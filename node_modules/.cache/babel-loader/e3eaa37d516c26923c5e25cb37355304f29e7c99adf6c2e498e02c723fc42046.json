{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\DSA Website\\\\src\\\\pages\\\\array-algorithms\\\\hashing.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ArrowLeft, Hash, ChevronLeft, ChevronRight, Code } from \"lucide-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HashingPage() {\n  _s();\n  const [arrayInput, setArrayInput] = useState(\"\");\n  const [target, setTarget] = useState(0);\n  const [steps, setSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isVisualizing, setIsVisualizing] = useState(false);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(\"frequency\");\n  const [showFullCode, setShowFullCode] = useState(false);\n  const resetVisualization = () => {\n    setSteps([]);\n    setCurrentStep(0);\n    setIsVisualizing(false);\n    setShowFullCode(false);\n  };\n  const generateFrequencySteps = array => {\n    const newSteps = [];\n    const hashMap = new Map();\n\n    // Initial state\n    newSteps.push({\n      array: array.map(item => ({\n        value: item,\n        isHighlighted: false,\n        isTarget: false,\n        isFrequent: false\n      })),\n      hashMap: [],\n      description: \"Initialize empty hash map for frequency counting\",\n      code: `# Initialize hash map\nfrequency_map = {}`\n    });\n\n    // Process each element\n    for (let i = 0; i < array.length; i++) {\n      const element = String(array[i]);\n      const currentCount = hashMap.get(element) || 0;\n      hashMap.set(element, currentCount + 1);\n      const currentArray = array.map((item, idx) => ({\n        value: item,\n        isHighlighted: idx === i,\n        isTarget: false,\n        isFrequent: false\n      }));\n      const currentHashMap = Array.from(hashMap.entries()).map(([key, value]) => ({\n        key,\n        value,\n        isActive: key === element\n      }));\n      newSteps.push({\n        array: currentArray,\n        hashMap: currentHashMap,\n        description: `Processing element '${element}': frequency = ${hashMap.get(element)}`,\n        code: `# Update frequency count\nif element in frequency_map:\n    frequency_map[element] += 1\nelse:\n    frequency_map[element] = 1`\n      });\n    }\n\n    // Final result\n    const finalHashMap = Array.from(hashMap.entries()).map(([key, value]) => ({\n      key,\n      value,\n      isActive: false\n    }));\n    newSteps.push({\n      array: array.map(item => ({\n        value: item,\n        isHighlighted: false,\n        isTarget: false,\n        isFrequent: false\n      })),\n      hashMap: finalHashMap,\n      description: \"Frequency counting complete\",\n      code: `# Return frequency map\nreturn frequency_map`,\n      result: `Frequencies: ${Array.from(hashMap.entries()).map(([k, v]) => `${k}:${v}`).join(\", \")}`\n    });\n    return newSteps;\n  };\n  const generateTwoSumHashSteps = array => {\n    const newSteps = [];\n    const hashMap = new Map();\n\n    // Initial state\n    newSteps.push({\n      array: array.map(num => ({\n        value: num,\n        isHighlighted: false,\n        isTarget: false,\n        isFrequent: false\n      })),\n      hashMap: [],\n      description: `Looking for two numbers that sum to ${target}`,\n      code: `# Initialize hash map\nnum_map = {}\ntarget = ${target}`\n    });\n\n    // Process each element\n    for (let i = 0; i < array.length; i++) {\n      const complement = target - array[i];\n      if (hashMap.has(complement)) {\n        // Found the pair\n        const complementIndex = hashMap.get(complement);\n        const currentArray = array.map((num, idx) => ({\n          value: num,\n          isHighlighted: idx === i || idx === complementIndex,\n          isTarget: idx === i || idx === complementIndex,\n          isFrequent: false\n        }));\n        const currentHashMap = Array.from(hashMap.entries()).map(([key, value]) => ({\n          key: String(key),\n          value,\n          isActive: key === complement\n        }));\n        newSteps.push({\n          array: currentArray,\n          hashMap: currentHashMap,\n          description: `Found pair: ${array[complementIndex]} + ${array[i]} = ${target}`,\n          code: `# Found the complement\nreturn [num_map[complement], i]`,\n          result: `Indices: [${complementIndex}, ${i}]`\n        });\n        return newSteps;\n      }\n\n      // Add current number to hash map\n      hashMap.set(array[i], i);\n      const currentArray = array.map((num, idx) => ({\n        value: num,\n        isHighlighted: idx === i,\n        isTarget: false,\n        isFrequent: false\n      }));\n      const currentHashMap = Array.from(hashMap.entries()).map(([key, value]) => ({\n        key: String(key),\n        value,\n        isActive: key === array[i]\n      }));\n      newSteps.push({\n        array: currentArray,\n        hashMap: currentHashMap,\n        description: `Checking ${array[i]}, looking for complement ${complement}`,\n        code: `# Check for complement\ncomplement = target - array[i]\nif complement in num_map:\n    return [num_map[complement], i]\nnum_map[array[i]] = i`\n      });\n    }\n\n    // No solution found\n    newSteps.push({\n      array: array.map(num => ({\n        value: num,\n        isHighlighted: false,\n        isTarget: false,\n        isFrequent: false\n      })),\n      hashMap: Array.from(hashMap.entries()).map(([key, value]) => ({\n        key: String(key),\n        value,\n        isActive: false\n      })),\n      description: \"No two numbers sum to target\",\n      code: `# No solution found\nreturn []`,\n      result: \"No solution\"\n    });\n    return newSteps;\n  };\n  const generateDuplicatesSteps = array => {\n    const newSteps = [];\n    const hashMap = new Map();\n    const duplicates = [];\n\n    // Initial state\n    newSteps.push({\n      array: array.map(item => ({\n        value: item,\n        isHighlighted: false,\n        isTarget: false,\n        isFrequent: false\n      })),\n      hashMap: [],\n      description: \"Finding duplicates using hash map\",\n      code: `# Initialize hash map\nseen = {}\nduplicates = []`\n    });\n\n    // Process each element\n    for (let i = 0; i < array.length; i++) {\n      const element = String(array[i]);\n      const currentCount = hashMap.get(element) || 0;\n      hashMap.set(element, currentCount + 1);\n      const isDuplicate = currentCount > 0;\n      if (isDuplicate && !duplicates.includes(element)) {\n        duplicates.push(element);\n      }\n      const currentArray = array.map((item, idx) => ({\n        value: item,\n        isHighlighted: idx === i,\n        isTarget: isDuplicate,\n        isFrequent: duplicates.includes(String(item))\n      }));\n      const currentHashMap = Array.from(hashMap.entries()).map(([key, value]) => ({\n        key,\n        value,\n        isActive: key === element\n      }));\n      newSteps.push({\n        array: currentArray,\n        hashMap: currentHashMap,\n        description: isDuplicate ? `Found duplicate: '${element}'` : `First occurrence of '${element}'`,\n        code: `# Check for duplicates\nif element in seen:\n    duplicates.append(element)\nseen[element] = seen.get(element, 0) + 1`\n      });\n    }\n\n    // Final result\n    newSteps.push({\n      array: array.map(item => ({\n        value: item,\n        isHighlighted: false,\n        isTarget: false,\n        isFrequent: duplicates.includes(String(item))\n      })),\n      hashMap: Array.from(hashMap.entries()).map(([key, value]) => ({\n        key,\n        value,\n        isActive: false\n      })),\n      description: \"Duplicate detection complete\",\n      code: `# Return duplicates\nreturn duplicates`,\n      result: `Duplicates: [${duplicates.join(\", \")}]`\n    });\n    return newSteps;\n  };\n  const generateFirstUniqueSteps = array => {\n    const newSteps = [];\n    const hashMap = new Map();\n\n    // First pass: count frequencies\n    for (let i = 0; i < array.length; i++) {\n      const element = String(array[i]);\n      hashMap.set(element, (hashMap.get(element) || 0) + 1);\n    }\n\n    // Initial state\n    newSteps.push({\n      array: array.map(item => ({\n        value: item,\n        isHighlighted: false,\n        isTarget: false,\n        isFrequent: false\n      })),\n      hashMap: Array.from(hashMap.entries()).map(([key, value]) => ({\n        key,\n        value,\n        isActive: false\n      })),\n      description: \"Frequency map built, now finding first unique element\",\n      code: `# Build frequency map\nfor element in array:\n    freq_map[element] = freq_map.get(element, 0) + 1`\n    });\n\n    // Second pass: find first unique\n    for (let i = 0; i < array.length; i++) {\n      const element = String(array[i]);\n      const frequency = hashMap.get(element);\n      const currentArray = array.map((item, idx) => ({\n        value: item,\n        isHighlighted: idx === i,\n        isTarget: frequency === 1 && idx === i,\n        isFrequent: hashMap.get(String(item)) > 1\n      }));\n      const currentHashMap = Array.from(hashMap.entries()).map(([key, value]) => ({\n        key,\n        value,\n        isActive: key === element\n      }));\n      if (frequency === 1) {\n        newSteps.push({\n          array: currentArray,\n          hashMap: currentHashMap,\n          description: `Found first unique element: '${element}'`,\n          code: `# Found first unique element\nif freq_map[element] == 1:\n    return element`,\n          result: `First unique: ${element}`\n        });\n        return newSteps;\n      }\n      newSteps.push({\n        array: currentArray,\n        hashMap: currentHashMap,\n        description: `'${element}' appears ${frequency} times (not unique)`,\n        code: `# Check if element is unique\nif freq_map[element] == 1:\n    return element`\n      });\n    }\n\n    // No unique element found\n    newSteps.push({\n      array: array.map(item => ({\n        value: item,\n        isHighlighted: false,\n        isTarget: false,\n        isFrequent: true\n      })),\n      hashMap: Array.from(hashMap.entries()).map(([key, value]) => ({\n        key,\n        value,\n        isActive: false\n      })),\n      description: \"No unique element found\",\n      code: `# No unique element\nreturn None`,\n      result: \"No unique element\"\n    });\n    return newSteps;\n  };\n  const handleVisualize = () => {\n    try {\n      let processedArray;\n      if (selectedAlgorithm === \"two-sum\") {\n        processedArray = arrayInput.split(\",\").map(num => {\n          const parsed = Number.parseInt(num.trim());\n          if (isNaN(parsed)) throw new Error(\"Invalid number\");\n          return parsed;\n        });\n      } else {\n        // For other algorithms, allow both numbers and strings\n        processedArray = arrayInput.split(\",\").map(item => {\n          const trimmed = item.trim();\n          const parsed = Number.parseInt(trimmed);\n          return isNaN(parsed) ? trimmed : parsed;\n        });\n      }\n      resetVisualization();\n      setIsVisualizing(true);\n      let newSteps;\n      switch (selectedAlgorithm) {\n        case \"frequency\":\n          newSteps = generateFrequencySteps(processedArray);\n          break;\n        case \"two-sum\":\n          newSteps = generateTwoSumHashSteps(processedArray);\n          break;\n        case \"duplicates\":\n          newSteps = generateDuplicatesSteps(processedArray);\n          break;\n        case \"first-unique\":\n          newSteps = generateFirstUniqueSteps(processedArray);\n          break;\n        default:\n          newSteps = [];\n      }\n      setSteps(newSteps);\n      setIsVisualizing(false);\n    } catch (err) {\n      alert(err instanceof Error ? err.message : \"Please enter valid input\");\n    }\n  };\n  const getFullCode = () => {\n    switch (selectedAlgorithm) {\n      case \"frequency\":\n        return `def count_frequency(array):\n    # Initialize hash map\n    frequency_map = {}\n    \n    # Count frequencies\n    for element in array:\n        if element in frequency_map:\n            frequency_map[element] += 1\n        else:\n            frequency_map[element] = 1\n    \n    return frequency_map`;\n      case \"two-sum\":\n        return `def two_sum_hash(array, target):\n    # Initialize hash map\n    num_map = {}\n    \n    # Process each element\n    for i, num in enumerate(array):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    \n    return []  # No solution found`;\n      case \"duplicates\":\n        return `def find_duplicates(array):\n    # Initialize hash map\n    seen = {}\n    duplicates = []\n    \n    # Find duplicates\n    for element in array:\n        if element in seen:\n            if element not in duplicates:\n                duplicates.append(element)\n        seen[element] = seen.get(element, 0) + 1\n    \n    return duplicates`;\n      case \"first-unique\":\n        return `def first_unique_element(array):\n    # Build frequency map\n    freq_map = {}\n    for element in array:\n        freq_map[element] = freq_map.get(element, 0) + 1\n    \n    # Find first unique element\n    for element in array:\n        if freq_map[element] == 1:\n            return element\n    \n    return None  # No unique element`;\n      default:\n        return \"\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-white shadow-sm border-b\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-3\",\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: \"/array-algorithms\",\n              className: \"p-2 hover:bg-gray-100 rounded-lg transition-colors\",\n              children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n                className: \"w-6 h-6 text-gray-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-gradient-to-r from-red-500 to-pink-500 rounded-lg\",\n              children: /*#__PURE__*/_jsxDEV(Hash, {\n                className: \"w-6 h-6 text-white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-3xl font-bold bg-gradient-to-r from-red-600 to-pink-600 bg-clip-text text-transparent\",\n              children: \"Hashing & Frequency Count\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-900 mb-4\",\n          children: \"Select Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-2 md:grid-cols-4 gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedAlgorithm(\"frequency\"),\n            className: `px-4 py-2 rounded-lg text-sm ${selectedAlgorithm === \"frequency\" ? \"bg-red-600 text-white\" : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"}`,\n            children: \"Frequency Count\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedAlgorithm(\"two-sum\"),\n            className: `px-4 py-2 rounded-lg text-sm ${selectedAlgorithm === \"two-sum\" ? \"bg-red-600 text-white\" : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"}`,\n            children: \"Two Sum (Hash)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedAlgorithm(\"duplicates\"),\n            className: `px-4 py-2 rounded-lg text-sm ${selectedAlgorithm === \"duplicates\" ? \"bg-red-600 text-white\" : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"}`,\n            children: \"Find Duplicates\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedAlgorithm(\"first-unique\"),\n            className: `px-4 py-2 rounded-lg text-sm ${selectedAlgorithm === \"first-unique\" ? \"bg-red-600 text-white\" : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"}`,\n            children: \"First Unique\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-900 mb-4\",\n          children: \"Input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"array-input\",\n              className: \"block text-sm font-medium text-gray-700 mb-2\",\n              children: [\"Array (comma-separated \", selectedAlgorithm === \"two-sum\" ? \"numbers\" : \"values\", \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"array-input\",\n              type: \"text\",\n              value: arrayInput,\n              onChange: e => setArrayInput(e.target.value),\n              className: \"w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500\",\n              placeholder: selectedAlgorithm === \"two-sum\" ? \"e.g., 2, 7, 11, 15\" : \"e.g., a, b, c, a, b\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 13\n          }, this), selectedAlgorithm === \"two-sum\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"target-input\",\n              className: \"block text-sm font-medium text-gray-700 mb-2\",\n              children: \"Target Sum\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"target-input\",\n              type: \"number\",\n              value: target,\n              onChange: e => setTarget(Number.parseInt(e.target.value)),\n              className: \"w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500\",\n              placeholder: \"Enter target sum\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleVisualize,\n            disabled: isVisualizing,\n            className: \"px-6 py-3 bg-gradient-to-r from-red-600 to-pink-600 text-white font-semibold rounded-lg hover:from-red-700 hover:to-pink-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\",\n            children: isVisualizing ? \"Visualizing...\" : \"Visualize\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 9\n      }, this), steps.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-900 mb-4\",\n            children: \"Array Visualization\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-wrap gap-4 justify-center\",\n            children: steps[currentStep].array.map((element, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `w-16 h-16 flex items-center justify-center rounded-lg text-lg font-semibold transition-all duration-200 ${element.isTarget ? \"bg-green-500 text-white\" : element.isFrequent ? \"bg-red-500 text-white\" : element.isHighlighted ? \"bg-red-100 text-red-700\" : \"bg-gray-100 text-gray-700\"}`,\n              children: element.value\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-900 mb-4\",\n            children: \"Hash Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\",\n            children: steps[currentStep].hashMap.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `p-3 rounded-lg border-2 transition-all duration-200 ${entry.isActive ? \"border-red-500 bg-red-50\" : \"border-gray-200 bg-gray-50\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm font-medium text-gray-700\",\n                children: entry.key\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 647,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-lg font-bold text-red-600\",\n                children: entry.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-900 mb-4\",\n            children: \"Step Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-gray-700\",\n                  children: steps[currentStep].description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 660,\n                  columnNumber: 21\n                }, this), steps[currentStep].result && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-green-600 font-semibold mt-2\",\n                  children: steps[currentStep].result\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 662,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 659,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center space-x-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setCurrentStep(prev => Math.max(0, prev - 1)),\n                  disabled: currentStep === 0,\n                  className: \"p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\",\n                  children: /*#__PURE__*/_jsxDEV(ChevronLeft, {\n                    className: \"w-6 h-6 text-gray-600\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 671,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-gray-600\",\n                  children: [\"Step \", currentStep + 1, \" of \", steps.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 673,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setCurrentStep(prev => Math.min(steps.length - 1, prev + 1)),\n                  disabled: currentStep === steps.length - 1,\n                  className: \"p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\",\n                  children: /*#__PURE__*/_jsxDEV(ChevronRight, {\n                    className: \"w-6 h-6 text-gray-600\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 681,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 676,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 665,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-between mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900\",\n              children: \"Code\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 691,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowFullCode(!showFullCode),\n              className: \"flex items-center space-x-2 text-red-600 hover:text-red-700\",\n              children: [/*#__PURE__*/_jsxDEV(Code, {\n                className: \"w-5 h-5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 696,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: showFullCode ? \"Show Current Step\" : \"Show Full Code\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 697,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"bg-gray-50 p-4 rounded-lg overflow-x-auto\",\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              className: \"text-sm text-gray-800\",\n              children: showFullCode ? getFullCode() : steps[currentStep].code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 701,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 501,\n    columnNumber: 5\n  }, this);\n}\n_s(HashingPage, \"J23Uyw8/q0GwtdBm9VRiT27zREE=\");\n_c = HashingPage;\nexport default HashingPage;\nvar _c;\n$RefreshReg$(_c, \"HashingPage\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","Link","ArrowLeft","Hash","ChevronLeft","ChevronRight","Code","jsxDEV","_jsxDEV","HashingPage","arrayInput","setArrayInput","target","setTarget","steps","setSteps","currentStep","setCurrentStep","isVisualizing","setIsVisualizing","selectedAlgorithm","setSelectedAlgorithm","showFullCode","setShowFullCode","resetVisualization","generateFrequencySteps","array","newSteps","hashMap","Map","push","map","item","value","isHighlighted","isTarget","isFrequent","description","code","i","length","element","String","currentCount","get","set","currentArray","idx","currentHashMap","Array","from","entries","key","isActive","finalHashMap","result","k","v","join","generateTwoSumHashSteps","num","complement","has","complementIndex","generateDuplicatesSteps","duplicates","isDuplicate","includes","generateFirstUniqueSteps","frequency","handleVisualize","processedArray","split","parsed","Number","parseInt","trim","isNaN","Error","trimmed","err","alert","message","getFullCode","className","children","to","fileName","lineNumber","columnNumber","onClick","htmlFor","id","type","onChange","e","placeholder","disabled","index","entry","prev","Math","max","min","_c","$RefreshReg$"],"sources":["D:/DSA Website/src/pages/array-algorithms/hashing.tsx"],"sourcesContent":["\"use client\"\r\nimport { useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { ArrowLeft, Hash, ChevronLeft, ChevronRight, Code } from \"lucide-react\"\r\n\r\ninterface ArrayElement {\r\n  value: number | string\r\n  isHighlighted: boolean\r\n  isTarget: boolean\r\n  isFrequent: boolean\r\n}\r\n\r\ninterface HashMapEntry {\r\n  key: string\r\n  value: number\r\n  isActive: boolean\r\n}\r\n\r\ninterface Step {\r\n  array: ArrayElement[]\r\n  hashMap: HashMapEntry[]\r\n  description: string\r\n  code: string\r\n  result?: string\r\n}\r\n\r\nfunction HashingPage() {\r\n  const [arrayInput, setArrayInput] = useState<string>(\"\")\r\n  const [target, setTarget] = useState<number>(0)\r\n  const [steps, setSteps] = useState<Step[]>([])\r\n  const [currentStep, setCurrentStep] = useState<number>(0)\r\n  const [isVisualizing, setIsVisualizing] = useState<boolean>(false)\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<\"frequency\" | \"two-sum\" | \"duplicates\" | \"first-unique\">(\r\n    \"frequency\",\r\n  )\r\n  const [showFullCode, setShowFullCode] = useState<boolean>(false)\r\n\r\n  const resetVisualization = () => {\r\n    setSteps([])\r\n    setCurrentStep(0)\r\n    setIsVisualizing(false)\r\n    setShowFullCode(false)\r\n  }\r\n\r\n  const generateFrequencySteps = (array: (number | string)[]) => {\r\n    const newSteps: Step[] = []\r\n    const hashMap = new Map<string, number>()\r\n\r\n    // Initial state\r\n    newSteps.push({\r\n      array: array.map((item) => ({\r\n        value: item,\r\n        isHighlighted: false,\r\n        isTarget: false,\r\n        isFrequent: false,\r\n      })),\r\n      hashMap: [],\r\n      description: \"Initialize empty hash map for frequency counting\",\r\n      code: `# Initialize hash map\r\nfrequency_map = {}`,\r\n    })\r\n\r\n    // Process each element\r\n    for (let i = 0; i < array.length; i++) {\r\n      const element = String(array[i])\r\n      const currentCount = hashMap.get(element) || 0\r\n      hashMap.set(element, currentCount + 1)\r\n\r\n      const currentArray = array.map((item, idx) => ({\r\n        value: item,\r\n        isHighlighted: idx === i,\r\n        isTarget: false,\r\n        isFrequent: false,\r\n      }))\r\n\r\n      const currentHashMap = Array.from(hashMap.entries()).map(([key, value]) => ({\r\n        key,\r\n        value,\r\n        isActive: key === element,\r\n      }))\r\n\r\n      newSteps.push({\r\n        array: currentArray,\r\n        hashMap: currentHashMap,\r\n        description: `Processing element '${element}': frequency = ${hashMap.get(element)}`,\r\n        code: `# Update frequency count\r\nif element in frequency_map:\r\n    frequency_map[element] += 1\r\nelse:\r\n    frequency_map[element] = 1`,\r\n      })\r\n    }\r\n\r\n    // Final result\r\n    const finalHashMap = Array.from(hashMap.entries()).map(([key, value]) => ({\r\n      key,\r\n      value,\r\n      isActive: false,\r\n    }))\r\n\r\n    newSteps.push({\r\n      array: array.map((item) => ({\r\n        value: item,\r\n        isHighlighted: false,\r\n        isTarget: false,\r\n        isFrequent: false,\r\n      })),\r\n      hashMap: finalHashMap,\r\n      description: \"Frequency counting complete\",\r\n      code: `# Return frequency map\r\nreturn frequency_map`,\r\n      result: `Frequencies: ${Array.from(hashMap.entries())\r\n        .map(([k, v]) => `${k}:${v}`)\r\n        .join(\", \")}`,\r\n    })\r\n\r\n    return newSteps\r\n  }\r\n\r\n  const generateTwoSumHashSteps = (array: number[]) => {\r\n    const newSteps: Step[] = []\r\n    const hashMap = new Map<number, number>()\r\n\r\n    // Initial state\r\n    newSteps.push({\r\n      array: array.map((num) => ({\r\n        value: num,\r\n        isHighlighted: false,\r\n        isTarget: false,\r\n        isFrequent: false,\r\n      })),\r\n      hashMap: [],\r\n      description: `Looking for two numbers that sum to ${target}`,\r\n      code: `# Initialize hash map\r\nnum_map = {}\r\ntarget = ${target}`,\r\n    })\r\n\r\n    // Process each element\r\n    for (let i = 0; i < array.length; i++) {\r\n      const complement = target - array[i]\r\n\r\n      if (hashMap.has(complement)) {\r\n        // Found the pair\r\n        const complementIndex = hashMap.get(complement)!\r\n        const currentArray = array.map((num, idx) => ({\r\n          value: num,\r\n          isHighlighted: idx === i || idx === complementIndex,\r\n          isTarget: idx === i || idx === complementIndex,\r\n          isFrequent: false,\r\n        }))\r\n\r\n        const currentHashMap = Array.from(hashMap.entries()).map(([key, value]) => ({\r\n          key: String(key),\r\n          value,\r\n          isActive: key === complement,\r\n        }))\r\n\r\n        newSteps.push({\r\n          array: currentArray,\r\n          hashMap: currentHashMap,\r\n          description: `Found pair: ${array[complementIndex]} + ${array[i]} = ${target}`,\r\n          code: `# Found the complement\r\nreturn [num_map[complement], i]`,\r\n          result: `Indices: [${complementIndex}, ${i}]`,\r\n        })\r\n        return newSteps\r\n      }\r\n\r\n      // Add current number to hash map\r\n      hashMap.set(array[i], i)\r\n\r\n      const currentArray = array.map((num, idx) => ({\r\n        value: num,\r\n        isHighlighted: idx === i,\r\n        isTarget: false,\r\n        isFrequent: false,\r\n      }))\r\n\r\n      const currentHashMap = Array.from(hashMap.entries()).map(([key, value]) => ({\r\n        key: String(key),\r\n        value,\r\n        isActive: key === array[i],\r\n      }))\r\n\r\n      newSteps.push({\r\n        array: currentArray,\r\n        hashMap: currentHashMap,\r\n        description: `Checking ${array[i]}, looking for complement ${complement}`,\r\n        code: `# Check for complement\r\ncomplement = target - array[i]\r\nif complement in num_map:\r\n    return [num_map[complement], i]\r\nnum_map[array[i]] = i`,\r\n      })\r\n    }\r\n\r\n    // No solution found\r\n    newSteps.push({\r\n      array: array.map((num) => ({\r\n        value: num,\r\n        isHighlighted: false,\r\n        isTarget: false,\r\n        isFrequent: false,\r\n      })),\r\n      hashMap: Array.from(hashMap.entries()).map(([key, value]) => ({\r\n        key: String(key),\r\n        value,\r\n        isActive: false,\r\n      })),\r\n      description: \"No two numbers sum to target\",\r\n      code: `# No solution found\r\nreturn []`,\r\n      result: \"No solution\",\r\n    })\r\n\r\n    return newSteps\r\n  }\r\n\r\n  const generateDuplicatesSteps = (array: (number | string)[]) => {\r\n    const newSteps: Step[] = []\r\n    const hashMap = new Map<string, number>()\r\n    const duplicates: string[] = []\r\n\r\n    // Initial state\r\n    newSteps.push({\r\n      array: array.map((item) => ({\r\n        value: item,\r\n        isHighlighted: false,\r\n        isTarget: false,\r\n        isFrequent: false,\r\n      })),\r\n      hashMap: [],\r\n      description: \"Finding duplicates using hash map\",\r\n      code: `# Initialize hash map\r\nseen = {}\r\nduplicates = []`,\r\n    })\r\n\r\n    // Process each element\r\n    for (let i = 0; i < array.length; i++) {\r\n      const element = String(array[i])\r\n      const currentCount = hashMap.get(element) || 0\r\n      hashMap.set(element, currentCount + 1)\r\n\r\n      const isDuplicate = currentCount > 0\r\n      if (isDuplicate && !duplicates.includes(element)) {\r\n        duplicates.push(element)\r\n      }\r\n\r\n      const currentArray = array.map((item, idx) => ({\r\n        value: item,\r\n        isHighlighted: idx === i,\r\n        isTarget: isDuplicate,\r\n        isFrequent: duplicates.includes(String(item)),\r\n      }))\r\n\r\n      const currentHashMap = Array.from(hashMap.entries()).map(([key, value]) => ({\r\n        key,\r\n        value,\r\n        isActive: key === element,\r\n      }))\r\n\r\n      newSteps.push({\r\n        array: currentArray,\r\n        hashMap: currentHashMap,\r\n        description: isDuplicate ? `Found duplicate: '${element}'` : `First occurrence of '${element}'`,\r\n        code: `# Check for duplicates\r\nif element in seen:\r\n    duplicates.append(element)\r\nseen[element] = seen.get(element, 0) + 1`,\r\n      })\r\n    }\r\n\r\n    // Final result\r\n    newSteps.push({\r\n      array: array.map((item) => ({\r\n        value: item,\r\n        isHighlighted: false,\r\n        isTarget: false,\r\n        isFrequent: duplicates.includes(String(item)),\r\n      })),\r\n      hashMap: Array.from(hashMap.entries()).map(([key, value]) => ({\r\n        key,\r\n        value,\r\n        isActive: false,\r\n      })),\r\n      description: \"Duplicate detection complete\",\r\n      code: `# Return duplicates\r\nreturn duplicates`,\r\n      result: `Duplicates: [${duplicates.join(\", \")}]`,\r\n    })\r\n\r\n    return newSteps\r\n  }\r\n\r\n  const generateFirstUniqueSteps = (array: (number | string)[]) => {\r\n    const newSteps: Step[] = []\r\n    const hashMap = new Map<string, number>()\r\n\r\n    // First pass: count frequencies\r\n    for (let i = 0; i < array.length; i++) {\r\n      const element = String(array[i])\r\n      hashMap.set(element, (hashMap.get(element) || 0) + 1)\r\n    }\r\n\r\n    // Initial state\r\n    newSteps.push({\r\n      array: array.map((item) => ({\r\n        value: item,\r\n        isHighlighted: false,\r\n        isTarget: false,\r\n        isFrequent: false,\r\n      })),\r\n      hashMap: Array.from(hashMap.entries()).map(([key, value]) => ({\r\n        key,\r\n        value,\r\n        isActive: false,\r\n      })),\r\n      description: \"Frequency map built, now finding first unique element\",\r\n      code: `# Build frequency map\r\nfor element in array:\r\n    freq_map[element] = freq_map.get(element, 0) + 1`,\r\n    })\r\n\r\n    // Second pass: find first unique\r\n    for (let i = 0; i < array.length; i++) {\r\n      const element = String(array[i])\r\n      const frequency = hashMap.get(element)!\r\n\r\n      const currentArray = array.map((item, idx) => ({\r\n        value: item,\r\n        isHighlighted: idx === i,\r\n        isTarget: frequency === 1 && idx === i,\r\n        isFrequent: hashMap.get(String(item))! > 1,\r\n      }))\r\n\r\n      const currentHashMap = Array.from(hashMap.entries()).map(([key, value]) => ({\r\n        key,\r\n        value,\r\n        isActive: key === element,\r\n      }))\r\n\r\n      if (frequency === 1) {\r\n        newSteps.push({\r\n          array: currentArray,\r\n          hashMap: currentHashMap,\r\n          description: `Found first unique element: '${element}'`,\r\n          code: `# Found first unique element\r\nif freq_map[element] == 1:\r\n    return element`,\r\n          result: `First unique: ${element}`,\r\n        })\r\n        return newSteps\r\n      }\r\n\r\n      newSteps.push({\r\n        array: currentArray,\r\n        hashMap: currentHashMap,\r\n        description: `'${element}' appears ${frequency} times (not unique)`,\r\n        code: `# Check if element is unique\r\nif freq_map[element] == 1:\r\n    return element`,\r\n      })\r\n    }\r\n\r\n    // No unique element found\r\n    newSteps.push({\r\n      array: array.map((item) => ({\r\n        value: item,\r\n        isHighlighted: false,\r\n        isTarget: false,\r\n        isFrequent: true,\r\n      })),\r\n      hashMap: Array.from(hashMap.entries()).map(([key, value]) => ({\r\n        key,\r\n        value,\r\n        isActive: false,\r\n      })),\r\n      description: \"No unique element found\",\r\n      code: `# No unique element\r\nreturn None`,\r\n      result: \"No unique element\",\r\n    })\r\n\r\n    return newSteps\r\n  }\r\n\r\n  const handleVisualize = () => {\r\n    try {\r\n      let processedArray: (number | string)[]\r\n\r\n      if (selectedAlgorithm === \"two-sum\") {\r\n        processedArray = arrayInput.split(\",\").map((num) => {\r\n          const parsed = Number.parseInt(num.trim())\r\n          if (isNaN(parsed)) throw new Error(\"Invalid number\")\r\n          return parsed\r\n        })\r\n      } else {\r\n        // For other algorithms, allow both numbers and strings\r\n        processedArray = arrayInput.split(\",\").map((item) => {\r\n          const trimmed = item.trim()\r\n          const parsed = Number.parseInt(trimmed)\r\n          return isNaN(parsed) ? trimmed : parsed\r\n        })\r\n      }\r\n\r\n      resetVisualization()\r\n      setIsVisualizing(true)\r\n\r\n      let newSteps: Step[]\r\n      switch (selectedAlgorithm) {\r\n        case \"frequency\":\r\n          newSteps = generateFrequencySteps(processedArray)\r\n          break\r\n        case \"two-sum\":\r\n          newSteps = generateTwoSumHashSteps(processedArray as number[])\r\n          break\r\n        case \"duplicates\":\r\n          newSteps = generateDuplicatesSteps(processedArray)\r\n          break\r\n        case \"first-unique\":\r\n          newSteps = generateFirstUniqueSteps(processedArray)\r\n          break\r\n        default:\r\n          newSteps = []\r\n      }\r\n\r\n      setSteps(newSteps)\r\n      setIsVisualizing(false)\r\n    } catch (err) {\r\n      alert(err instanceof Error ? err.message : \"Please enter valid input\")\r\n    }\r\n  }\r\n\r\n  const getFullCode = () => {\r\n    switch (selectedAlgorithm) {\r\n      case \"frequency\":\r\n        return `def count_frequency(array):\r\n    # Initialize hash map\r\n    frequency_map = {}\r\n    \r\n    # Count frequencies\r\n    for element in array:\r\n        if element in frequency_map:\r\n            frequency_map[element] += 1\r\n        else:\r\n            frequency_map[element] = 1\r\n    \r\n    return frequency_map`\r\n\r\n      case \"two-sum\":\r\n        return `def two_sum_hash(array, target):\r\n    # Initialize hash map\r\n    num_map = {}\r\n    \r\n    # Process each element\r\n    for i, num in enumerate(array):\r\n        complement = target - num\r\n        if complement in num_map:\r\n            return [num_map[complement], i]\r\n        num_map[num] = i\r\n    \r\n    return []  # No solution found`\r\n\r\n      case \"duplicates\":\r\n        return `def find_duplicates(array):\r\n    # Initialize hash map\r\n    seen = {}\r\n    duplicates = []\r\n    \r\n    # Find duplicates\r\n    for element in array:\r\n        if element in seen:\r\n            if element not in duplicates:\r\n                duplicates.append(element)\r\n        seen[element] = seen.get(element, 0) + 1\r\n    \r\n    return duplicates`\r\n\r\n      case \"first-unique\":\r\n        return `def first_unique_element(array):\r\n    # Build frequency map\r\n    freq_map = {}\r\n    for element in array:\r\n        freq_map[element] = freq_map.get(element, 0) + 1\r\n    \r\n    # Find first unique element\r\n    for element in array:\r\n        if freq_map[element] == 1:\r\n            return element\r\n    \r\n    return None  # No unique element`\r\n\r\n      default:\r\n        return \"\"\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100\">\r\n      <header className=\"bg-white shadow-sm border-b\">\r\n        <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <Link to=\"/array-algorithms\" className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\">\r\n                <ArrowLeft className=\"w-6 h-6 text-gray-600\" />\r\n              </Link>\r\n              <div className=\"p-2 bg-gradient-to-r from-red-500 to-pink-500 rounded-lg\">\r\n                <Hash className=\"w-6 h-6 text-white\" />\r\n              </div>\r\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-red-600 to-pink-600 bg-clip-text text-transparent\">\r\n                Hashing & Frequency Count\r\n              </h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8\">\r\n        {/* Algorithm Selection */}\r\n        <div className=\"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Select Algorithm</h2>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n            <button\r\n              onClick={() => setSelectedAlgorithm(\"frequency\")}\r\n              className={`px-4 py-2 rounded-lg text-sm ${\r\n                selectedAlgorithm === \"frequency\"\r\n                  ? \"bg-red-600 text-white\"\r\n                  : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\r\n              }`}\r\n            >\r\n              Frequency Count\r\n            </button>\r\n            <button\r\n              onClick={() => setSelectedAlgorithm(\"two-sum\")}\r\n              className={`px-4 py-2 rounded-lg text-sm ${\r\n                selectedAlgorithm === \"two-sum\"\r\n                  ? \"bg-red-600 text-white\"\r\n                  : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\r\n              }`}\r\n            >\r\n              Two Sum (Hash)\r\n            </button>\r\n            <button\r\n              onClick={() => setSelectedAlgorithm(\"duplicates\")}\r\n              className={`px-4 py-2 rounded-lg text-sm ${\r\n                selectedAlgorithm === \"duplicates\"\r\n                  ? \"bg-red-600 text-white\"\r\n                  : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\r\n              }`}\r\n            >\r\n              Find Duplicates\r\n            </button>\r\n            <button\r\n              onClick={() => setSelectedAlgorithm(\"first-unique\")}\r\n              className={`px-4 py-2 rounded-lg text-sm ${\r\n                selectedAlgorithm === \"first-unique\"\r\n                  ? \"bg-red-600 text-white\"\r\n                  : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\r\n              }`}\r\n            >\r\n              First Unique\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Input Section */}\r\n        <div className=\"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Input</h2>\r\n          <div className=\"flex flex-col gap-4\">\r\n            <div>\r\n              <label htmlFor=\"array-input\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Array (comma-separated {selectedAlgorithm === \"two-sum\" ? \"numbers\" : \"values\"})\r\n              </label>\r\n              <input\r\n                id=\"array-input\"\r\n                type=\"text\"\r\n                value={arrayInput}\r\n                onChange={(e) => setArrayInput(e.target.value)}\r\n                className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500\"\r\n                placeholder={selectedAlgorithm === \"two-sum\" ? \"e.g., 2, 7, 11, 15\" : \"e.g., a, b, c, a, b\"}\r\n              />\r\n            </div>\r\n            {selectedAlgorithm === \"two-sum\" && (\r\n              <div>\r\n                <label htmlFor=\"target-input\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Target Sum\r\n                </label>\r\n                <input\r\n                  id=\"target-input\"\r\n                  type=\"number\"\r\n                  value={target}\r\n                  onChange={(e) => setTarget(Number.parseInt(e.target.value))}\r\n                  className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500\"\r\n                  placeholder=\"Enter target sum\"\r\n                />\r\n              </div>\r\n            )}\r\n            <button\r\n              onClick={handleVisualize}\r\n              disabled={isVisualizing}\r\n              className=\"px-6 py-3 bg-gradient-to-r from-red-600 to-pink-600 text-white font-semibold rounded-lg hover:from-red-700 hover:to-pink-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            >\r\n              {isVisualizing ? \"Visualizing...\" : \"Visualize\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Visualization Section */}\r\n        {steps.length > 0 && (\r\n          <div className=\"space-y-8\">\r\n            {/* Array Visualization */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Array Visualization</h2>\r\n              <div className=\"flex flex-wrap gap-4 justify-center\">\r\n                {steps[currentStep].array.map((element, index) => (\r\n                  <div\r\n                    key={index}\r\n                    className={`w-16 h-16 flex items-center justify-center rounded-lg text-lg font-semibold transition-all duration-200 ${\r\n                      element.isTarget\r\n                        ? \"bg-green-500 text-white\"\r\n                        : element.isFrequent\r\n                          ? \"bg-red-500 text-white\"\r\n                          : element.isHighlighted\r\n                            ? \"bg-red-100 text-red-700\"\r\n                            : \"bg-gray-100 text-gray-700\"\r\n                    }`}\r\n                  >\r\n                    {element.value}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Hash Map Visualization */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Hash Map</h2>\r\n              <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\r\n                {steps[currentStep].hashMap.map((entry, index) => (\r\n                  <div\r\n                    key={index}\r\n                    className={`p-3 rounded-lg border-2 transition-all duration-200 ${\r\n                      entry.isActive ? \"border-red-500 bg-red-50\" : \"border-gray-200 bg-gray-50\"\r\n                    }`}\r\n                  >\r\n                    <div className=\"text-sm font-medium text-gray-700\">{entry.key}</div>\r\n                    <div className=\"text-lg font-bold text-red-600\">{entry.value}</div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Step Information */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Step Information</h2>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <div>\r\n                    <p className=\"text-gray-700\">{steps[currentStep].description}</p>\r\n                    {steps[currentStep].result && (\r\n                      <p className=\"text-green-600 font-semibold mt-2\">{steps[currentStep].result}</p>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-4\">\r\n                    <button\r\n                      onClick={() => setCurrentStep((prev) => Math.max(0, prev - 1))}\r\n                      disabled={currentStep === 0}\r\n                      className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    >\r\n                      <ChevronLeft className=\"w-6 h-6 text-gray-600\" />\r\n                    </button>\r\n                    <span className=\"text-gray-600\">\r\n                      Step {currentStep + 1} of {steps.length}\r\n                    </span>\r\n                    <button\r\n                      onClick={() => setCurrentStep((prev) => Math.min(steps.length - 1, prev + 1))}\r\n                      disabled={currentStep === steps.length - 1}\r\n                      className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    >\r\n                      <ChevronRight className=\"w-6 h-6 text-gray-600\" />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Code Section */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h2 className=\"text-xl font-bold text-gray-900\">Code</h2>\r\n                <button\r\n                  onClick={() => setShowFullCode(!showFullCode)}\r\n                  className=\"flex items-center space-x-2 text-red-600 hover:text-red-700\"\r\n                >\r\n                  <Code className=\"w-5 h-5\" />\r\n                  <span>{showFullCode ? \"Show Current Step\" : \"Show Full Code\"}</span>\r\n                </button>\r\n              </div>\r\n              <pre className=\"bg-gray-50 p-4 rounded-lg overflow-x-auto\">\r\n                <code className=\"text-sm text-gray-800\">{showFullCode ? getFullCode() : steps[currentStep].code}</code>\r\n              </pre>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HashingPage\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}