{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\DSA Website\\\\src\\\\pages\\\\ExpressionConverterPage.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ArrowLeft, Calculator, ChevronLeft, ChevronRight, Code } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExpressionConverterPage() {\n  _s();\n  var _steps$currentStep;\n  const [inputExpression, setInputExpression] = useState(\"A + B * C - D\");\n  const [conversionType, setConversionType] = useState(\"infix-to-postfix\");\n  const [steps, setSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isVisualizing, setIsVisualizing] = useState(false);\n  const [showFullCode, setShowFullCode] = useState(false);\n  const [result, setResult] = useState(\"\");\n  const resetVisualization = () => {\n    setSteps([]);\n    setCurrentStep(0);\n    setIsVisualizing(false);\n    setShowFullCode(false);\n    setResult(\"\");\n  };\n\n  // Utility functions\n  const isOperator = char => {\n    return ['+', '-', '*', '/', '^', '(', ')'].includes(char);\n  };\n  const getPrecedence = op => {\n    switch (op) {\n      case '+':\n      case '-':\n        return 1;\n      case '*':\n      case '/':\n        return 2;\n      case '^':\n        return 3;\n      default:\n        return 0;\n    }\n  };\n  const isRightAssociative = op => {\n    return op === '^';\n  };\n  const tokenize = expression => {\n    return expression.replace(/\\s+/g, '').split('').filter(char => char !== ' ');\n  };\n  const reverseString = str => {\n    return str.split('').reverse().join('');\n  };\n  const swapParentheses = expression => {\n    return expression.replace(/$$/g, 'TEMP').replace(/$$/g, '(').replace(/TEMP/g, ')');\n  };\n\n  // Infix to Postfix conversion\n  const generateInfixToPostfixSteps = expression => {\n    const newSteps = [];\n    const tokens = tokenize(expression);\n    const stack = [];\n    const output = [];\n\n    // Initial state\n    newSteps.push({\n      input: expression,\n      stack: [],\n      output: [],\n      currentToken: \"\",\n      description: \"Initialize empty stack and output array\",\n      code: `# Infix to Postfix Conversion\nstack = []\noutput = []`,\n      tokenIndex: -1\n    });\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      if (!isOperator(token)) {\n        // Operand\n        output.push(token);\n        newSteps.push({\n          input: expression,\n          stack: stack.map((item, idx) => ({\n            value: item,\n            isActive: false,\n            isOperator: isOperator(item)\n          })),\n          output: [...output],\n          currentToken: token,\n          description: `'${token}' is an operand, add to output`,\n          code: `# Operand found\nif isOperand(token):\n    output.append(token)`,\n          tokenIndex: i\n        });\n      } else if (token === '(') {\n        // Left parenthesis\n        stack.push(token);\n        newSteps.push({\n          input: expression,\n          stack: stack.map((item, idx) => ({\n            value: item,\n            isActive: idx === stack.length - 1,\n            isOperator: isOperator(item)\n          })),\n          output: [...output],\n          currentToken: token,\n          description: `'${token}' is left parenthesis, push to stack`,\n          code: `# Left parenthesis\nif token == '(':\n    stack.append(token)`,\n          tokenIndex: i\n        });\n      } else if (token === ')') {\n        // Right parenthesis\n        while (stack.length > 0 && stack[stack.length - 1] !== '(') {\n          const poppedOp = stack.pop();\n          output.push(poppedOp);\n          newSteps.push({\n            input: expression,\n            stack: stack.map((item, idx) => ({\n              value: item,\n              isActive: false,\n              isOperator: isOperator(item)\n            })),\n            output: [...output],\n            currentToken: token,\n            description: `Pop '${poppedOp}' from stack to output`,\n            code: `# Pop until '('\nwhile stack and stack[-1] != '(':\n    output.append(stack.pop())`,\n            tokenIndex: i\n          });\n        }\n        if (stack.length > 0) {\n          stack.pop(); // Remove the '('\n        }\n        newSteps.push({\n          input: expression,\n          stack: stack.map((item, idx) => ({\n            value: item,\n            isActive: false,\n            isOperator: isOperator(item)\n          })),\n          output: [...output],\n          currentToken: token,\n          description: `'${token}' is right parenthesis, pop '(' from stack`,\n          code: `# Remove left parenthesis\nstack.pop()  # Remove '('`,\n          tokenIndex: i\n        });\n      } else {\n        // Operator\n        while (stack.length > 0 && stack[stack.length - 1] !== '(' && (getPrecedence(stack[stack.length - 1]) > getPrecedence(token) || getPrecedence(stack[stack.length - 1]) === getPrecedence(token) && !isRightAssociative(token))) {\n          const poppedOp = stack.pop();\n          output.push(poppedOp);\n          newSteps.push({\n            input: expression,\n            stack: stack.map((item, idx) => ({\n              value: item,\n              isActive: false,\n              isOperator: isOperator(item)\n            })),\n            output: [...output],\n            currentToken: token,\n            description: `Pop '${poppedOp}' (higher/equal precedence) to output`,\n            code: `# Pop higher precedence operators\nwhile (stack and precedence(stack[-1]) >= precedence(token)):\n    output.append(stack.pop())`,\n            tokenIndex: i\n          });\n        }\n        stack.push(token);\n        newSteps.push({\n          input: expression,\n          stack: stack.map((item, idx) => ({\n            value: item,\n            isActive: idx === stack.length - 1,\n            isOperator: isOperator(item)\n          })),\n          output: [...output],\n          currentToken: token,\n          description: `Push operator '${token}' to stack`,\n          code: `# Push current operator\nstack.append(token)`,\n          tokenIndex: i\n        });\n      }\n    }\n\n    // Pop remaining operators\n    while (stack.length > 0) {\n      const poppedOp = stack.pop();\n      output.push(poppedOp);\n      newSteps.push({\n        input: expression,\n        stack: stack.map((item, idx) => ({\n          value: item,\n          isActive: false,\n          isOperator: isOperator(item)\n        })),\n        output: [...output],\n        currentToken: \"\",\n        description: `Pop remaining operator '${poppedOp}' to output`,\n        code: `# Pop remaining operators\nwhile stack:\n    output.append(stack.pop())`,\n        tokenIndex: -1\n      });\n    }\n\n    // Final result\n    newSteps.push({\n      input: expression,\n      stack: [],\n      output: [...output],\n      currentToken: \"\",\n      description: `Conversion complete! Postfix: ${output.join(' ')}`,\n      code: `# Return postfix expression\nreturn ''.join(output)`,\n      tokenIndex: -1\n    });\n    return {\n      steps: newSteps,\n      result: output.join(' ')\n    };\n  };\n\n  // Infix to Prefix conversion\n  const generateInfixToPrefixSteps = expression => {\n    const newSteps = [];\n\n    // Step 1: Reverse the expression and swap parentheses\n    const reversedExpr = swapParentheses(reverseString(expression));\n    newSteps.push({\n      input: expression,\n      stack: [],\n      output: [],\n      currentToken: \"\",\n      description: `Step 1: Reverse expression and swap parentheses: \"${reversedExpr}\"`,\n      code: `# Infix to Prefix Conversion\n# Step 1: Reverse and swap parentheses\nreversed_expr = reverse_and_swap(\"${expression}\")`,\n      tokenIndex: -1\n    });\n\n    // Step 2: Convert to postfix\n    const {\n      steps: postfixSteps,\n      result: postfixResult\n    } = generateInfixToPostfixSteps(reversedExpr);\n\n    // Add postfix conversion steps\n    postfixSteps.forEach((step, index) => {\n      if (index === 0) return; // Skip initial step\n      newSteps.push({\n        ...step,\n        description: `Step 2: ${step.description}`,\n        code: `# Converting reversed expression to postfix\n${step.code}`\n      });\n    });\n\n    // Step 3: Reverse the result\n    const finalResult = reverseString(postfixResult.replace(/\\s+/g, ''));\n    newSteps.push({\n      input: expression,\n      stack: [],\n      output: finalResult.split(''),\n      currentToken: \"\",\n      description: `Step 3: Reverse postfix result: \"${finalResult}\"`,\n      code: `# Step 3: Reverse the postfix result\nprefix_result = reverse(\"${postfixResult}\")\nreturn prefix_result`,\n      tokenIndex: -1\n    });\n    return {\n      steps: newSteps,\n      result: finalResult.split('').join(' ')\n    };\n  };\n\n  // Postfix to Infix conversion\n  const generatePostfixToInfixSteps = expression => {\n    const newSteps = [];\n    const tokens = tokenize(expression);\n    const stack = [];\n    newSteps.push({\n      input: expression,\n      stack: [],\n      output: [],\n      currentToken: \"\",\n      description: \"Initialize stack for postfix to infix conversion\",\n      code: `# Postfix to Infix Conversion\nstack = []`,\n      tokenIndex: -1\n    });\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      if (!isOperator(token)) {\n        // Operand\n        stack.push(token);\n        newSteps.push({\n          input: expression,\n          stack: stack.map((item, idx) => ({\n            value: item,\n            isActive: idx === stack.length - 1,\n            isOperator: false\n          })),\n          output: [],\n          currentToken: token,\n          description: `'${token}' is operand, push to stack`,\n          code: `# Push operand to stack\nif isOperand(token):\n    stack.append(token)`,\n          tokenIndex: i\n        });\n      } else if (token !== '(' && token !== ')') {\n        // Operator\n        if (stack.length >= 2) {\n          const operand2 = stack.pop();\n          const operand1 = stack.pop();\n          const infixExpr = `(${operand1}${token}${operand2})`;\n          stack.push(infixExpr);\n          newSteps.push({\n            input: expression,\n            stack: stack.map((item, idx) => ({\n              value: item,\n              isActive: idx === stack.length - 1,\n              isOperator: false\n            })),\n            output: [],\n            currentToken: token,\n            description: `Pop ${operand2}, ${operand1}, create (${operand1}${token}${operand2})`,\n            code: `# Process operator\noperand2 = stack.pop()\noperand1 = stack.pop()\ninfix_expr = f\"({operand1}{token}{operand2})\"\nstack.append(infix_expr)`,\n            tokenIndex: i\n          });\n        }\n      }\n    }\n    const finalResult = stack.length > 0 ? stack[0] : \"\";\n    newSteps.push({\n      input: expression,\n      stack: stack.map((item, idx) => ({\n        value: item,\n        isActive: false,\n        isOperator: false\n      })),\n      output: [finalResult],\n      currentToken: \"\",\n      description: `Conversion complete! Infix: ${finalResult}`,\n      code: `# Return final infix expression\nreturn stack[0]`,\n      tokenIndex: -1\n    });\n    return {\n      steps: newSteps,\n      result: finalResult\n    };\n  };\n\n  // Prefix to Infix conversion\n  const generatePrefixToInfixSteps = expression => {\n    const newSteps = [];\n    const tokens = tokenize(expression);\n    const stack = [];\n    newSteps.push({\n      input: expression,\n      stack: [],\n      output: [],\n      currentToken: \"\",\n      description: \"Initialize stack for prefix to infix conversion (process right to left)\",\n      code: `# Prefix to Infix Conversion\nstack = []\n# Process from right to left`,\n      tokenIndex: -1\n    });\n\n    // Process from right to left\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const token = tokens[i];\n      if (!isOperator(token)) {\n        // Operand\n        stack.push(token);\n        newSteps.push({\n          input: expression,\n          stack: stack.map((item, idx) => ({\n            value: item,\n            isActive: idx === stack.length - 1,\n            isOperator: false\n          })),\n          output: [],\n          currentToken: token,\n          description: `'${token}' is operand, push to stack`,\n          code: `# Push operand to stack\nif isOperand(token):\n    stack.append(token)`,\n          tokenIndex: i\n        });\n      } else if (token !== '(' && token !== ')') {\n        // Operator\n        if (stack.length >= 2) {\n          const operand1 = stack.pop();\n          const operand2 = stack.pop();\n          const infixExpr = `(${operand1}${token}${operand2})`;\n          stack.push(infixExpr);\n          newSteps.push({\n            input: expression,\n            stack: stack.map((item, idx) => ({\n              value: item,\n              isActive: idx === stack.length - 1,\n              isOperator: false\n            })),\n            output: [],\n            currentToken: token,\n            description: `Pop ${operand1}, ${operand2}, create (${operand1}${token}${operand2})`,\n            code: `# Process operator (right to left)\noperand1 = stack.pop()\noperand2 = stack.pop()\ninfix_expr = f\"({operand1}{token}{operand2})\"\nstack.append(infix_expr)`,\n            tokenIndex: i\n          });\n        }\n      }\n    }\n    const finalResult = stack.length > 0 ? stack[0] : \"\";\n    newSteps.push({\n      input: expression,\n      stack: stack.map((item, idx) => ({\n        value: item,\n        isActive: false,\n        isOperator: false\n      })),\n      output: [finalResult],\n      currentToken: \"\",\n      description: `Conversion complete! Infix: ${finalResult}`,\n      code: `# Return final infix expression\nreturn stack[0]`,\n      tokenIndex: -1\n    });\n    return {\n      steps: newSteps,\n      result: finalResult\n    };\n  };\n\n  // Postfix to Prefix conversion\n  const generatePostfixToPrefixSteps = expression => {\n    // Convert postfix to infix first, then infix to prefix\n    const {\n      result: infixResult\n    } = generatePostfixToInfixSteps(expression);\n    const {\n      steps: prefixSteps,\n      result: prefixResult\n    } = generateInfixToPrefixSteps(infixResult);\n    const newSteps = [];\n    newSteps.push({\n      input: expression,\n      stack: [],\n      output: [],\n      currentToken: \"\",\n      description: `Converting postfix to prefix via infix intermediate: ${infixResult}`,\n      code: `# Postfix to Prefix (via infix)\ninfix_result = postfix_to_infix(\"${expression}\")\nprefix_result = infix_to_prefix(infix_result)`,\n      tokenIndex: -1\n    });\n    return {\n      steps: newSteps,\n      result: prefixResult\n    };\n  };\n\n  // Prefix to Postfix conversion\n  const generatePrefixToPostfixSteps = expression => {\n    // Convert prefix to infix first, then infix to postfix\n    const {\n      result: infixResult\n    } = generatePrefixToInfixSteps(expression);\n    const {\n      steps: postfixSteps,\n      result: postfixResult\n    } = generateInfixToPostfixSteps(infixResult);\n    const newSteps = [];\n    newSteps.push({\n      input: expression,\n      stack: [],\n      output: [],\n      currentToken: \"\",\n      description: `Converting prefix to postfix via infix intermediate: ${infixResult}`,\n      code: `# Prefix to Postfix (via infix)\ninfix_result = prefix_to_infix(\"${expression}\")\npostfix_result = infix_to_postfix(infix_result)`,\n      tokenIndex: -1\n    });\n    return {\n      steps: newSteps,\n      result: postfixResult\n    };\n  };\n  const handleVisualize = () => {\n    try {\n      if (!inputExpression.trim()) {\n        throw new Error(\"Please enter an expression\");\n      }\n      resetVisualization();\n      setIsVisualizing(true);\n      let conversionResult;\n      switch (conversionType) {\n        case \"infix-to-postfix\":\n          conversionResult = generateInfixToPostfixSteps(inputExpression);\n          break;\n        case \"infix-to-prefix\":\n          conversionResult = generateInfixToPrefixSteps(inputExpression);\n          break;\n        case \"postfix-to-infix\":\n          conversionResult = generatePostfixToInfixSteps(inputExpression);\n          break;\n        case \"prefix-to-infix\":\n          conversionResult = generatePrefixToInfixSteps(inputExpression);\n          break;\n        case \"postfix-to-prefix\":\n          conversionResult = generatePostfixToPrefixSteps(inputExpression);\n          break;\n        case \"prefix-to-postfix\":\n          conversionResult = generatePrefixToPostfixSteps(inputExpression);\n          break;\n        default:\n          throw new Error(\"Invalid conversion type\");\n      }\n      setSteps(conversionResult.steps);\n      setResult(conversionResult.result);\n      setIsVisualizing(false);\n    } catch (err) {\n      alert(err instanceof Error ? err.message : \"Please enter a valid expression\");\n      setIsVisualizing(false);\n    }\n  };\n  const getFullCode = () => {\n    switch (conversionType) {\n      case \"infix-to-postfix\":\n        return `def infix_to_postfix(expression):\n    stack = []\n    output = []\n    \n    for token in expression:\n        if token.isalnum():  # Operand\n            output.append(token)\n        elif token == '(':\n            stack.append(token)\n        elif token == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()  # Remove '('\n        else:  # Operator\n            while (stack and stack[-1] != '(' and\n                   precedence(stack[-1]) >= precedence(token)):\n                output.append(stack.pop())\n            stack.append(token)\n    \n    while stack:\n        output.append(stack.pop())\n    \n    return ''.join(output)`;\n      case \"infix-to-prefix\":\n        return `def infix_to_prefix(expression):\n    # Step 1: Reverse and swap parentheses\n    reversed_expr = reverse_and_swap_parentheses(expression)\n    \n    # Step 2: Convert to postfix\n    postfix = infix_to_postfix(reversed_expr)\n    \n    # Step 3: Reverse the result\n    prefix = reverse(postfix)\n    \n    return prefix`;\n      case \"postfix-to-infix\":\n        return `def postfix_to_infix(expression):\n    stack = []\n    \n    for token in expression:\n        if token.isalnum():  # Operand\n            stack.append(token)\n        else:  # Operator\n            operand2 = stack.pop()\n            operand1 = stack.pop()\n            infix_expr = f\"({operand1}{token}{operand2})\"\n            stack.append(infix_expr)\n    \n    return stack[0]`;\n      case \"prefix-to-infix\":\n        return `def prefix_to_infix(expression):\n    stack = []\n    \n    # Process from right to left\n    for token in reversed(expression):\n        if token.isalnum():  # Operand\n            stack.append(token)\n        else:  # Operator\n            operand1 = stack.pop()\n            operand2 = stack.pop()\n            infix_expr = f\"({operand1}{token}{operand2})\"\n            stack.append(infix_expr)\n    \n    return stack[0]`;\n      case \"postfix-to-prefix\":\n        return `def postfix_to_prefix(expression):\n    # Convert via infix intermediate\n    infix = postfix_to_infix(expression)\n    prefix = infix_to_prefix(infix)\n    return prefix`;\n      case \"prefix-to-postfix\":\n        return `def prefix_to_postfix(expression):\n    # Convert via infix intermediate\n    infix = prefix_to_infix(expression)\n    postfix = infix_to_postfix(infix)\n    return postfix`;\n      default:\n        return \"\";\n    }\n  };\n  const conversionOptions = [{\n    value: \"infix-to-postfix\",\n    label: \"Infix → Postfix\",\n    example: \"A + B * C\"\n  }, {\n    value: \"infix-to-prefix\",\n    label: \"Infix → Prefix\",\n    example: \"A + B * C\"\n  }, {\n    value: \"postfix-to-infix\",\n    label: \"Postfix → Infix\",\n    example: \"A B C * +\"\n  }, {\n    value: \"prefix-to-infix\",\n    label: \"Prefix → Infix\",\n    example: \"+ A * B C\"\n  }, {\n    value: \"postfix-to-prefix\",\n    label: \"Postfix → Prefix\",\n    example: \"A B C * +\"\n  }, {\n    value: \"prefix-to-postfix\",\n    label: \"Prefix → Postfix\",\n    example: \"+ A * B C\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-white shadow-sm border-b\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-3\",\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              className: \"p-2 hover:bg-gray-100 rounded-lg transition-colors\",\n              children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n                className: \"w-6 h-6 text-gray-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 672,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg\",\n              children: /*#__PURE__*/_jsxDEV(Calculator, {\n                className: \"w-6 h-6 text-white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 675,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\",\n              children: \"Expression Converter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-900 mb-4\",\n          children: \"Expression Notation Converter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 mb-4\",\n          children: \"Convert mathematical expressions between infix, prefix, and postfix notations with step-by-step visualization.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-3 gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-3 bg-blue-50 rounded-lg\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"font-semibold text-blue-800\",\n              children: \"Infix\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-blue-700 text-sm\",\n              children: \"A + B * C (operators between operands)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-3 bg-purple-50 rounded-lg\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"font-semibold text-purple-800\",\n              children: \"Prefix\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-purple-700 text-sm\",\n              children: \"+ A * B C (operators before operands)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-3 bg-green-50 rounded-lg\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"font-semibold text-green-800\",\n              children: \"Postfix\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-green-700 text-sm\",\n              children: \"A B C * + (operators after operands)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-900 mb-4\",\n          children: \"Select Conversion Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n          children: conversionOptions.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setConversionType(option.value);\n              setInputExpression(option.example);\n              resetVisualization();\n            },\n            className: `p-4 rounded-lg border-2 transition-all duration-200 text-left ${conversionType === option.value ? \"border-blue-500 bg-blue-50 text-blue-700\" : \"border-gray-200 hover:border-gray-300 hover:bg-gray-50\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"font-semibold\",\n              children: option.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 726,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-600 mt-1\",\n              children: [\"Example: \", option.example]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 17\n            }, this)]\n          }, option.value, true, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-900 mb-4\",\n          children: \"Input Expression\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"expression-input\",\n              className: \"block text-sm font-medium text-gray-700 mb-2\",\n              children: \"Expression\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"expression-input\",\n              type: \"text\",\n              value: inputExpression,\n              onChange: e => setInputExpression(e.target.value),\n              className: \"w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500\",\n              placeholder: \"Enter expression (e.g., A + B * C)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-500 mt-1\",\n              children: \"Use letters for operands and +, -, *, /, ^ for operators. Parentheses are supported.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleVisualize,\n              disabled: isVisualizing,\n              className: \"px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\",\n              children: isVisualizing ? \"Converting...\" : \"Convert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 754,\n              columnNumber: 15\n            }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-2 px-4 py-3 bg-green-50 rounded-lg\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-green-800 font-semibold\",\n                children: \"Result:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-green-700 font-mono\",\n                children: result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 764,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 9\n      }, this), steps.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-900 mb-4\",\n            children: \"Expression Processing\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 776,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"text-lg font-semibold text-gray-800 mb-2\",\n                children: \"Input Expression\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 780,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex flex-wrap gap-2 justify-center\",\n                children: tokenize(steps[currentStep].input).map((token, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `w-12 h-12 flex items-center justify-center rounded-lg text-lg font-semibold transition-all duration-200 ${index === steps[currentStep].tokenIndex ? \"bg-blue-500 text-white shadow-lg\" : isOperator(token) ? \"bg-orange-100 text-orange-700\" : \"bg-gray-100 text-gray-700\"}`,\n                  children: token\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 783,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 781,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 779,\n              columnNumber: 17\n            }, this), steps[currentStep].currentToken && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"inline-flex items-center space-x-2 px-4 py-2 bg-blue-100 rounded-lg\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-blue-800 font-semibold\",\n                  children: \"Current Token:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 803,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-blue-700 font-mono text-lg\",\n                  children: steps[currentStep].currentToken\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 804,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 801,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 777,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-900 mb-4\",\n            children: \"Stack State\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col-reverse items-center gap-2 min-h-[100px]\",\n            children: steps[currentStep].stack.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-gray-500 italic\",\n              children: \"Stack is empty\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 816,\n              columnNumber: 19\n            }, this) : steps[currentStep].stack.map((element, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `min-w-[80px] h-12 flex items-center justify-center rounded-lg border-2 transition-all duration-200 px-2 ${element.isActive ? \"border-blue-500 bg-blue-50 text-blue-700\" : element.isOperator ? \"border-orange-300 bg-orange-50 text-orange-700\" : \"border-gray-300 bg-gray-50 text-gray-700\"}`,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-sm font-semibold truncate\",\n                  children: element.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 830,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 829,\n                columnNumber: 23\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 819,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 814,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-900 mb-4\",\n            children: \"Output\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-wrap gap-2 justify-center min-h-[60px] items-center\",\n            children: steps[currentStep].output.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-gray-500 italic\",\n              children: \"Output is empty\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 843,\n              columnNumber: 19\n            }, this) : steps[currentStep].output.map((token, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"min-w-[40px] h-12 flex items-center justify-center rounded-lg bg-green-100 text-green-700 border border-green-300 font-semibold px-2\",\n              children: token\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 846,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 841,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 839,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-900 mb-4\",\n            children: \"Step Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 859,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-gray-700\",\n                  children: steps[currentStep].description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 863,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 862,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center space-x-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setCurrentStep(prev => Math.max(0, prev - 1)),\n                  disabled: currentStep === 0,\n                  className: \"p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\",\n                  children: /*#__PURE__*/_jsxDEV(ChevronLeft, {\n                    className: \"w-6 h-6 text-gray-600\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 871,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 866,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-gray-600\",\n                  children: [\"Step \", currentStep + 1, \" of \", steps.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 873,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setCurrentStep(prev => Math.min(steps.length - 1, prev + 1)),\n                  disabled: currentStep === steps.length - 1,\n                  className: \"p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\",\n                  children: /*#__PURE__*/_jsxDEV(ChevronRight, {\n                    className: \"w-6 h-6 text-gray-600\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 881,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 876,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 865,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 861,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 860,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 858,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-between mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900\",\n              children: \"Code\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 891,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowFullCode(!showFullCode),\n              className: \"flex items-center space-x-2 text-blue-600 hover:text-blue-700\",\n              children: [/*#__PURE__*/_jsxDEV(Code, {\n                className: \"w-5 h-5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 896,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: showFullCode ? \"Show Current Step\" : \"Show Full Code\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 897,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 892,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"bg-gray-50 p-4 rounded-lg overflow-x-auto\",\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              className: \"text-sm text-gray-800\",\n              children: showFullCode ? getFullCode() : (_steps$currentStep = steps[currentStep]) === null || _steps$currentStep === void 0 ? void 0 : _steps$currentStep.code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 900,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-900 mb-4\",\n            children: \"Algorithm Insights\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 907,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-3 text-sm\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-3 bg-blue-50 rounded-lg\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"font-semibold text-blue-800\",\n                children: \"Stack Usage:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 910,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-blue-700\",\n                children: \"Stack is used to temporarily store operators and manage precedence during conversion\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 911,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 909,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-3 bg-purple-50 rounded-lg\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"font-semibold text-purple-800\",\n                children: \"Precedence Rules:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 916,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-purple-700\",\n                children: \"^ (highest) \\u2192 *, / \\u2192 +, - (lowest). Higher precedence operators are processed first\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 917,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 915,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-3 bg-green-50 rounded-lg\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"font-semibold text-green-800\",\n                children: \"Applications:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 922,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-green-700\",\n                children: \"Compilers, calculators, and expression evaluators use these conversions for parsing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 923,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 921,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 908,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 906,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 666,\n    columnNumber: 5\n  }, this);\n}\n_s(ExpressionConverterPage, \"nJC+7BuGoriAU5dbgcriVoXJvXw=\");\n_c = ExpressionConverterPage;\nexport default ExpressionConverterPage;\nvar _c;\n$RefreshReg$(_c, \"ExpressionConverterPage\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","Link","ArrowLeft","Calculator","ChevronLeft","ChevronRight","Code","jsxDEV","_jsxDEV","ExpressionConverterPage","_steps$currentStep","inputExpression","setInputExpression","conversionType","setConversionType","steps","setSteps","currentStep","setCurrentStep","isVisualizing","setIsVisualizing","showFullCode","setShowFullCode","result","setResult","resetVisualization","isOperator","char","includes","getPrecedence","op","isRightAssociative","tokenize","expression","replace","split","filter","reverseString","str","reverse","join","swapParentheses","generateInfixToPostfixSteps","newSteps","tokens","stack","output","push","input","currentToken","description","code","tokenIndex","i","length","token","map","item","idx","value","isActive","poppedOp","pop","generateInfixToPrefixSteps","reversedExpr","postfixSteps","postfixResult","forEach","step","index","finalResult","generatePostfixToInfixSteps","operand2","operand1","infixExpr","generatePrefixToInfixSteps","generatePostfixToPrefixSteps","infixResult","prefixSteps","prefixResult","generatePrefixToPostfixSteps","handleVisualize","trim","Error","conversionResult","err","alert","message","getFullCode","conversionOptions","label","example","className","children","to","fileName","lineNumber","columnNumber","option","onClick","htmlFor","id","type","onChange","e","target","placeholder","disabled","element","prev","Math","max","min","_c","$RefreshReg$"],"sources":["D:/DSA Website/src/pages/ExpressionConverterPage.tsx"],"sourcesContent":["\"use client\"\r\nimport { useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { ArrowLeft, Calculator, ChevronLeft, ChevronRight, Code, ArrowRight } from 'lucide-react'\r\n\r\ninterface StackElement {\r\n  value: string\r\n  isActive: boolean\r\n  isOperator: boolean\r\n}\r\n\r\ninterface Step {\r\n  input: string\r\n  stack: StackElement[]\r\n  output: string[]\r\n  currentToken: string\r\n  description: string\r\n  code: string\r\n  tokenIndex: number\r\n}\r\n\r\ntype ConversionType = \"infix-to-postfix\" | \"infix-to-prefix\" | \"postfix-to-infix\" | \"prefix-to-infix\" | \"postfix-to-prefix\" | \"prefix-to-postfix\"\r\n\r\nfunction ExpressionConverterPage() {\r\n  const [inputExpression, setInputExpression] = useState<string>(\"A + B * C - D\")\r\n  const [conversionType, setConversionType] = useState<ConversionType>(\"infix-to-postfix\")\r\n  const [steps, setSteps] = useState<Step[]>([])\r\n  const [currentStep, setCurrentStep] = useState<number>(0)\r\n  const [isVisualizing, setIsVisualizing] = useState<boolean>(false)\r\n  const [showFullCode, setShowFullCode] = useState<boolean>(false)\r\n  const [result, setResult] = useState<string>(\"\")\r\n\r\n  const resetVisualization = () => {\r\n    setSteps([])\r\n    setCurrentStep(0)\r\n    setIsVisualizing(false)\r\n    setShowFullCode(false)\r\n    setResult(\"\")\r\n  }\r\n\r\n  // Utility functions\r\n  const isOperator = (char: string): boolean => {\r\n    return ['+', '-', '*', '/', '^', '(', ')'].includes(char)\r\n  }\r\n\r\n  const getPrecedence = (op: string): number => {\r\n    switch (op) {\r\n      case '+':\r\n      case '-':\r\n        return 1\r\n      case '*':\r\n      case '/':\r\n        return 2\r\n      case '^':\r\n        return 3\r\n      default:\r\n        return 0\r\n    }\r\n  }\r\n\r\n  const isRightAssociative = (op: string): boolean => {\r\n    return op === '^'\r\n  }\r\n\r\n  const tokenize = (expression: string): string[] => {\r\n    return expression.replace(/\\s+/g, '').split('').filter(char => char !== ' ')\r\n  }\r\n\r\n  const reverseString = (str: string): string => {\r\n    return str.split('').reverse().join('')\r\n  }\r\n\r\n  const swapParentheses = (expression: string): string => {\r\n    return expression.replace(/$$/g, 'TEMP').replace(/$$/g, '(').replace(/TEMP/g, ')')\r\n  }\r\n\r\n  // Infix to Postfix conversion\r\n  const generateInfixToPostfixSteps = (expression: string) => {\r\n    const newSteps: Step[] = []\r\n    const tokens = tokenize(expression)\r\n    const stack: string[] = []\r\n    const output: string[] = []\r\n\r\n    // Initial state\r\n    newSteps.push({\r\n      input: expression,\r\n      stack: [],\r\n      output: [],\r\n      currentToken: \"\",\r\n      description: \"Initialize empty stack and output array\",\r\n      code: `# Infix to Postfix Conversion\r\nstack = []\r\noutput = []`,\r\n      tokenIndex: -1,\r\n    })\r\n\r\n    for (let i = 0; i < tokens.length; i++) {\r\n      const token = tokens[i]\r\n\r\n      if (!isOperator(token)) {\r\n        // Operand\r\n        output.push(token)\r\n        newSteps.push({\r\n          input: expression,\r\n          stack: stack.map((item, idx) => ({\r\n            value: item,\r\n            isActive: false,\r\n            isOperator: isOperator(item),\r\n          })),\r\n          output: [...output],\r\n          currentToken: token,\r\n          description: `'${token}' is an operand, add to output`,\r\n          code: `# Operand found\r\nif isOperand(token):\r\n    output.append(token)`,\r\n          tokenIndex: i,\r\n        })\r\n      } else if (token === '(') {\r\n        // Left parenthesis\r\n        stack.push(token)\r\n        newSteps.push({\r\n          input: expression,\r\n          stack: stack.map((item, idx) => ({\r\n            value: item,\r\n            isActive: idx === stack.length - 1,\r\n            isOperator: isOperator(item),\r\n          })),\r\n          output: [...output],\r\n          currentToken: token,\r\n          description: `'${token}' is left parenthesis, push to stack`,\r\n          code: `# Left parenthesis\r\nif token == '(':\r\n    stack.append(token)`,\r\n          tokenIndex: i,\r\n        })\r\n      } else if (token === ')') {\r\n        // Right parenthesis\r\n        while (stack.length > 0 && stack[stack.length - 1] !== '(') {\r\n          const poppedOp = stack.pop()!\r\n          output.push(poppedOp)\r\n          newSteps.push({\r\n            input: expression,\r\n            stack: stack.map((item, idx) => ({\r\n              value: item,\r\n              isActive: false,\r\n              isOperator: isOperator(item),\r\n            })),\r\n            output: [...output],\r\n            currentToken: token,\r\n            description: `Pop '${poppedOp}' from stack to output`,\r\n            code: `# Pop until '('\r\nwhile stack and stack[-1] != '(':\r\n    output.append(stack.pop())`,\r\n            tokenIndex: i,\r\n          })\r\n        }\r\n        if (stack.length > 0) {\r\n          stack.pop() // Remove the '('\r\n        }\r\n        newSteps.push({\r\n          input: expression,\r\n          stack: stack.map((item, idx) => ({\r\n            value: item,\r\n            isActive: false,\r\n            isOperator: isOperator(item),\r\n          })),\r\n          output: [...output],\r\n          currentToken: token,\r\n          description: `'${token}' is right parenthesis, pop '(' from stack`,\r\n          code: `# Remove left parenthesis\r\nstack.pop()  # Remove '('`,\r\n          tokenIndex: i,\r\n        })\r\n      } else {\r\n        // Operator\r\n        while (\r\n          stack.length > 0 &&\r\n          stack[stack.length - 1] !== '(' &&\r\n          (getPrecedence(stack[stack.length - 1]) > getPrecedence(token) ||\r\n            (getPrecedence(stack[stack.length - 1]) === getPrecedence(token) && !isRightAssociative(token)))\r\n        ) {\r\n          const poppedOp = stack.pop()!\r\n          output.push(poppedOp)\r\n          newSteps.push({\r\n            input: expression,\r\n            stack: stack.map((item, idx) => ({\r\n              value: item,\r\n              isActive: false,\r\n              isOperator: isOperator(item),\r\n            })),\r\n            output: [...output],\r\n            currentToken: token,\r\n            description: `Pop '${poppedOp}' (higher/equal precedence) to output`,\r\n            code: `# Pop higher precedence operators\r\nwhile (stack and precedence(stack[-1]) >= precedence(token)):\r\n    output.append(stack.pop())`,\r\n            tokenIndex: i,\r\n          })\r\n        }\r\n        stack.push(token)\r\n        newSteps.push({\r\n          input: expression,\r\n          stack: stack.map((item, idx) => ({\r\n            value: item,\r\n            isActive: idx === stack.length - 1,\r\n            isOperator: isOperator(item),\r\n          })),\r\n          output: [...output],\r\n          currentToken: token,\r\n          description: `Push operator '${token}' to stack`,\r\n          code: `# Push current operator\r\nstack.append(token)`,\r\n          tokenIndex: i,\r\n        })\r\n      }\r\n    }\r\n\r\n    // Pop remaining operators\r\n    while (stack.length > 0) {\r\n      const poppedOp = stack.pop()!\r\n      output.push(poppedOp)\r\n      newSteps.push({\r\n        input: expression,\r\n        stack: stack.map((item, idx) => ({\r\n          value: item,\r\n          isActive: false,\r\n          isOperator: isOperator(item),\r\n        })),\r\n        output: [...output],\r\n        currentToken: \"\",\r\n        description: `Pop remaining operator '${poppedOp}' to output`,\r\n        code: `# Pop remaining operators\r\nwhile stack:\r\n    output.append(stack.pop())`,\r\n        tokenIndex: -1,\r\n      })\r\n    }\r\n\r\n    // Final result\r\n    newSteps.push({\r\n      input: expression,\r\n      stack: [],\r\n      output: [...output],\r\n      currentToken: \"\",\r\n      description: `Conversion complete! Postfix: ${output.join(' ')}`,\r\n      code: `# Return postfix expression\r\nreturn ''.join(output)`,\r\n      tokenIndex: -1,\r\n    })\r\n\r\n    return { steps: newSteps, result: output.join(' ') }\r\n  }\r\n\r\n  // Infix to Prefix conversion\r\n  const generateInfixToPrefixSteps = (expression: string) => {\r\n    const newSteps: Step[] = []\r\n    \r\n    // Step 1: Reverse the expression and swap parentheses\r\n    const reversedExpr = swapParentheses(reverseString(expression))\r\n    \r\n    newSteps.push({\r\n      input: expression,\r\n      stack: [],\r\n      output: [],\r\n      currentToken: \"\",\r\n      description: `Step 1: Reverse expression and swap parentheses: \"${reversedExpr}\"`,\r\n      code: `# Infix to Prefix Conversion\r\n# Step 1: Reverse and swap parentheses\r\nreversed_expr = reverse_and_swap(\"${expression}\")`,\r\n      tokenIndex: -1,\r\n    })\r\n\r\n    // Step 2: Convert to postfix\r\n    const { steps: postfixSteps, result: postfixResult } = generateInfixToPostfixSteps(reversedExpr)\r\n    \r\n    // Add postfix conversion steps\r\n    postfixSteps.forEach((step, index) => {\r\n      if (index === 0) return // Skip initial step\r\n      newSteps.push({\r\n        ...step,\r\n        description: `Step 2: ${step.description}`,\r\n        code: `# Converting reversed expression to postfix\r\n${step.code}`,\r\n      })\r\n    })\r\n\r\n    // Step 3: Reverse the result\r\n    const finalResult = reverseString(postfixResult.replace(/\\s+/g, ''))\r\n    \r\n    newSteps.push({\r\n      input: expression,\r\n      stack: [],\r\n      output: finalResult.split(''),\r\n      currentToken: \"\",\r\n      description: `Step 3: Reverse postfix result: \"${finalResult}\"`,\r\n      code: `# Step 3: Reverse the postfix result\r\nprefix_result = reverse(\"${postfixResult}\")\r\nreturn prefix_result`,\r\n      tokenIndex: -1,\r\n    })\r\n\r\n    return { steps: newSteps, result: finalResult.split('').join(' ') }\r\n  }\r\n\r\n  // Postfix to Infix conversion\r\n  const generatePostfixToInfixSteps = (expression: string) => {\r\n    const newSteps: Step[] = []\r\n    const tokens = tokenize(expression)\r\n    const stack: string[] = []\r\n\r\n    newSteps.push({\r\n      input: expression,\r\n      stack: [],\r\n      output: [],\r\n      currentToken: \"\",\r\n      description: \"Initialize stack for postfix to infix conversion\",\r\n      code: `# Postfix to Infix Conversion\r\nstack = []`,\r\n      tokenIndex: -1,\r\n    })\r\n\r\n    for (let i = 0; i < tokens.length; i++) {\r\n      const token = tokens[i]\r\n\r\n      if (!isOperator(token)) {\r\n        // Operand\r\n        stack.push(token)\r\n        newSteps.push({\r\n          input: expression,\r\n          stack: stack.map((item, idx) => ({\r\n            value: item,\r\n            isActive: idx === stack.length - 1,\r\n            isOperator: false,\r\n          })),\r\n          output: [],\r\n          currentToken: token,\r\n          description: `'${token}' is operand, push to stack`,\r\n          code: `# Push operand to stack\r\nif isOperand(token):\r\n    stack.append(token)`,\r\n          tokenIndex: i,\r\n        })\r\n      } else if (token !== '(' && token !== ')') {\r\n        // Operator\r\n        if (stack.length >= 2) {\r\n          const operand2 = stack.pop()!\r\n          const operand1 = stack.pop()!\r\n          const infixExpr = `(${operand1}${token}${operand2})`\r\n          stack.push(infixExpr)\r\n          \r\n          newSteps.push({\r\n            input: expression,\r\n            stack: stack.map((item, idx) => ({\r\n              value: item,\r\n              isActive: idx === stack.length - 1,\r\n              isOperator: false,\r\n            })),\r\n            output: [],\r\n            currentToken: token,\r\n            description: `Pop ${operand2}, ${operand1}, create (${operand1}${token}${operand2})`,\r\n            code: `# Process operator\r\noperand2 = stack.pop()\r\noperand1 = stack.pop()\r\ninfix_expr = f\"({operand1}{token}{operand2})\"\r\nstack.append(infix_expr)`,\r\n            tokenIndex: i,\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    const finalResult = stack.length > 0 ? stack[0] : \"\"\r\n    newSteps.push({\r\n      input: expression,\r\n      stack: stack.map((item, idx) => ({\r\n        value: item,\r\n        isActive: false,\r\n        isOperator: false,\r\n      })),\r\n      output: [finalResult],\r\n      currentToken: \"\",\r\n      description: `Conversion complete! Infix: ${finalResult}`,\r\n      code: `# Return final infix expression\r\nreturn stack[0]`,\r\n      tokenIndex: -1,\r\n    })\r\n\r\n    return { steps: newSteps, result: finalResult }\r\n  }\r\n\r\n  // Prefix to Infix conversion\r\n  const generatePrefixToInfixSteps = (expression: string) => {\r\n    const newSteps: Step[] = []\r\n    const tokens = tokenize(expression)\r\n    const stack: string[] = []\r\n\r\n    newSteps.push({\r\n      input: expression,\r\n      stack: [],\r\n      output: [],\r\n      currentToken: \"\",\r\n      description: \"Initialize stack for prefix to infix conversion (process right to left)\",\r\n      code: `# Prefix to Infix Conversion\r\nstack = []\r\n# Process from right to left`,\r\n      tokenIndex: -1,\r\n    })\r\n\r\n    // Process from right to left\r\n    for (let i = tokens.length - 1; i >= 0; i--) {\r\n      const token = tokens[i]\r\n\r\n      if (!isOperator(token)) {\r\n        // Operand\r\n        stack.push(token)\r\n        newSteps.push({\r\n          input: expression,\r\n          stack: stack.map((item, idx) => ({\r\n            value: item,\r\n            isActive: idx === stack.length - 1,\r\n            isOperator: false,\r\n          })),\r\n          output: [],\r\n          currentToken: token,\r\n          description: `'${token}' is operand, push to stack`,\r\n          code: `# Push operand to stack\r\nif isOperand(token):\r\n    stack.append(token)`,\r\n          tokenIndex: i,\r\n        })\r\n      } else if (token !== '(' && token !== ')') {\r\n        // Operator\r\n        if (stack.length >= 2) {\r\n          const operand1 = stack.pop()!\r\n          const operand2 = stack.pop()!\r\n          const infixExpr = `(${operand1}${token}${operand2})`\r\n          stack.push(infixExpr)\r\n          \r\n          newSteps.push({\r\n            input: expression,\r\n            stack: stack.map((item, idx) => ({\r\n              value: item,\r\n              isActive: idx === stack.length - 1,\r\n              isOperator: false,\r\n            })),\r\n            output: [],\r\n            currentToken: token,\r\n            description: `Pop ${operand1}, ${operand2}, create (${operand1}${token}${operand2})`,\r\n            code: `# Process operator (right to left)\r\noperand1 = stack.pop()\r\noperand2 = stack.pop()\r\ninfix_expr = f\"({operand1}{token}{operand2})\"\r\nstack.append(infix_expr)`,\r\n            tokenIndex: i,\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    const finalResult = stack.length > 0 ? stack[0] : \"\"\r\n    newSteps.push({\r\n      input: expression,\r\n      stack: stack.map((item, idx) => ({\r\n        value: item,\r\n        isActive: false,\r\n        isOperator: false,\r\n      })),\r\n      output: [finalResult],\r\n      currentToken: \"\",\r\n      description: `Conversion complete! Infix: ${finalResult}`,\r\n      code: `# Return final infix expression\r\nreturn stack[0]`,\r\n      tokenIndex: -1,\r\n    })\r\n\r\n    return { steps: newSteps, result: finalResult }\r\n  }\r\n\r\n  // Postfix to Prefix conversion\r\n  const generatePostfixToPrefixSteps = (expression: string) => {\r\n    // Convert postfix to infix first, then infix to prefix\r\n    const { result: infixResult } = generatePostfixToInfixSteps(expression)\r\n    const { steps: prefixSteps, result: prefixResult } = generateInfixToPrefixSteps(infixResult)\r\n    \r\n    const newSteps: Step[] = []\r\n    newSteps.push({\r\n      input: expression,\r\n      stack: [],\r\n      output: [],\r\n      currentToken: \"\",\r\n      description: `Converting postfix to prefix via infix intermediate: ${infixResult}`,\r\n      code: `# Postfix to Prefix (via infix)\r\ninfix_result = postfix_to_infix(\"${expression}\")\r\nprefix_result = infix_to_prefix(infix_result)`,\r\n      tokenIndex: -1,\r\n    })\r\n\r\n    return { steps: newSteps, result: prefixResult }\r\n  }\r\n\r\n  // Prefix to Postfix conversion\r\n  const generatePrefixToPostfixSteps = (expression: string) => {\r\n    // Convert prefix to infix first, then infix to postfix\r\n    const { result: infixResult } = generatePrefixToInfixSteps(expression)\r\n    const { steps: postfixSteps, result: postfixResult } = generateInfixToPostfixSteps(infixResult)\r\n    \r\n    const newSteps: Step[] = []\r\n    newSteps.push({\r\n      input: expression,\r\n      stack: [],\r\n      output: [],\r\n      currentToken: \"\",\r\n      description: `Converting prefix to postfix via infix intermediate: ${infixResult}`,\r\n      code: `# Prefix to Postfix (via infix)\r\ninfix_result = prefix_to_infix(\"${expression}\")\r\npostfix_result = infix_to_postfix(infix_result)`,\r\n      tokenIndex: -1,\r\n    })\r\n\r\n    return { steps: newSteps, result: postfixResult }\r\n  }\r\n\r\n  const handleVisualize = () => {\r\n    try {\r\n      if (!inputExpression.trim()) {\r\n        throw new Error(\"Please enter an expression\")\r\n      }\r\n\r\n      resetVisualization()\r\n      setIsVisualizing(true)\r\n\r\n      let conversionResult: { steps: Step[]; result: string }\r\n\r\n      switch (conversionType) {\r\n        case \"infix-to-postfix\":\r\n          conversionResult = generateInfixToPostfixSteps(inputExpression)\r\n          break\r\n        case \"infix-to-prefix\":\r\n          conversionResult = generateInfixToPrefixSteps(inputExpression)\r\n          break\r\n        case \"postfix-to-infix\":\r\n          conversionResult = generatePostfixToInfixSteps(inputExpression)\r\n          break\r\n        case \"prefix-to-infix\":\r\n          conversionResult = generatePrefixToInfixSteps(inputExpression)\r\n          break\r\n        case \"postfix-to-prefix\":\r\n          conversionResult = generatePostfixToPrefixSteps(inputExpression)\r\n          break\r\n        case \"prefix-to-postfix\":\r\n          conversionResult = generatePrefixToPostfixSteps(inputExpression)\r\n          break\r\n        default:\r\n          throw new Error(\"Invalid conversion type\")\r\n      }\r\n\r\n      setSteps(conversionResult.steps)\r\n      setResult(conversionResult.result)\r\n      setIsVisualizing(false)\r\n    } catch (err) {\r\n      alert(err instanceof Error ? err.message : \"Please enter a valid expression\")\r\n      setIsVisualizing(false)\r\n    }\r\n  }\r\n\r\n  const getFullCode = () => {\r\n    switch (conversionType) {\r\n      case \"infix-to-postfix\":\r\n        return `def infix_to_postfix(expression):\r\n    stack = []\r\n    output = []\r\n    \r\n    for token in expression:\r\n        if token.isalnum():  # Operand\r\n            output.append(token)\r\n        elif token == '(':\r\n            stack.append(token)\r\n        elif token == ')':\r\n            while stack and stack[-1] != '(':\r\n                output.append(stack.pop())\r\n            stack.pop()  # Remove '('\r\n        else:  # Operator\r\n            while (stack and stack[-1] != '(' and\r\n                   precedence(stack[-1]) >= precedence(token)):\r\n                output.append(stack.pop())\r\n            stack.append(token)\r\n    \r\n    while stack:\r\n        output.append(stack.pop())\r\n    \r\n    return ''.join(output)`\r\n\r\n      case \"infix-to-prefix\":\r\n        return `def infix_to_prefix(expression):\r\n    # Step 1: Reverse and swap parentheses\r\n    reversed_expr = reverse_and_swap_parentheses(expression)\r\n    \r\n    # Step 2: Convert to postfix\r\n    postfix = infix_to_postfix(reversed_expr)\r\n    \r\n    # Step 3: Reverse the result\r\n    prefix = reverse(postfix)\r\n    \r\n    return prefix`\r\n\r\n      case \"postfix-to-infix\":\r\n        return `def postfix_to_infix(expression):\r\n    stack = []\r\n    \r\n    for token in expression:\r\n        if token.isalnum():  # Operand\r\n            stack.append(token)\r\n        else:  # Operator\r\n            operand2 = stack.pop()\r\n            operand1 = stack.pop()\r\n            infix_expr = f\"({operand1}{token}{operand2})\"\r\n            stack.append(infix_expr)\r\n    \r\n    return stack[0]`\r\n\r\n      case \"prefix-to-infix\":\r\n        return `def prefix_to_infix(expression):\r\n    stack = []\r\n    \r\n    # Process from right to left\r\n    for token in reversed(expression):\r\n        if token.isalnum():  # Operand\r\n            stack.append(token)\r\n        else:  # Operator\r\n            operand1 = stack.pop()\r\n            operand2 = stack.pop()\r\n            infix_expr = f\"({operand1}{token}{operand2})\"\r\n            stack.append(infix_expr)\r\n    \r\n    return stack[0]`\r\n\r\n      case \"postfix-to-prefix\":\r\n        return `def postfix_to_prefix(expression):\r\n    # Convert via infix intermediate\r\n    infix = postfix_to_infix(expression)\r\n    prefix = infix_to_prefix(infix)\r\n    return prefix`\r\n\r\n      case \"prefix-to-postfix\":\r\n        return `def prefix_to_postfix(expression):\r\n    # Convert via infix intermediate\r\n    infix = prefix_to_infix(expression)\r\n    postfix = infix_to_postfix(infix)\r\n    return postfix`\r\n\r\n      default:\r\n        return \"\"\r\n    }\r\n  }\r\n\r\n  const conversionOptions = [\r\n    { value: \"infix-to-postfix\", label: \"Infix → Postfix\", example: \"A + B * C\" },\r\n    { value: \"infix-to-prefix\", label: \"Infix → Prefix\", example: \"A + B * C\" },\r\n    { value: \"postfix-to-infix\", label: \"Postfix → Infix\", example: \"A B C * +\" },\r\n    { value: \"prefix-to-infix\", label: \"Prefix → Infix\", example: \"+ A * B C\" },\r\n    { value: \"postfix-to-prefix\", label: \"Postfix → Prefix\", example: \"A B C * +\" },\r\n    { value: \"prefix-to-postfix\", label: \"Prefix → Postfix\", example: \"+ A * B C\" },\r\n  ]\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100\">\r\n      <header className=\"bg-white shadow-sm border-b\">\r\n        <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <Link to=\"/\" className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\">\r\n                <ArrowLeft className=\"w-6 h-6 text-gray-600\" />\r\n              </Link>\r\n              <div className=\"p-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg\">\r\n                <Calculator className=\"w-6 h-6 text-white\" />\r\n              </div>\r\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\r\n                Expression Converter\r\n              </h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8\">\r\n        {/* Algorithm Info */}\r\n        <div className=\"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Expression Notation Converter</h2>\r\n          <p className=\"text-gray-600 mb-4\">\r\n            Convert mathematical expressions between infix, prefix, and postfix notations with step-by-step visualization.\r\n          </p>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <div className=\"p-3 bg-blue-50 rounded-lg\">\r\n              <div className=\"font-semibold text-blue-800\">Infix</div>\r\n              <div className=\"text-blue-700 text-sm\">A + B * C (operators between operands)</div>\r\n            </div>\r\n            <div className=\"p-3 bg-purple-50 rounded-lg\">\r\n              <div className=\"font-semibold text-purple-800\">Prefix</div>\r\n              <div className=\"text-purple-700 text-sm\">+ A * B C (operators before operands)</div>\r\n            </div>\r\n            <div className=\"p-3 bg-green-50 rounded-lg\">\r\n              <div className=\"font-semibold text-green-800\">Postfix</div>\r\n              <div className=\"text-green-700 text-sm\">A B C * + (operators after operands)</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Conversion Type Selection */}\r\n        <div className=\"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Select Conversion Type</h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            {conversionOptions.map((option) => (\r\n              <button\r\n                key={option.value}\r\n                onClick={() => {\r\n                  setConversionType(option.value as ConversionType)\r\n                  setInputExpression(option.example)\r\n                  resetVisualization()\r\n                }}\r\n                className={`p-4 rounded-lg border-2 transition-all duration-200 text-left ${\r\n                  conversionType === option.value\r\n                    ? \"border-blue-500 bg-blue-50 text-blue-700\"\r\n                    : \"border-gray-200 hover:border-gray-300 hover:bg-gray-50\"\r\n                }`}\r\n              >\r\n                <div className=\"font-semibold\">{option.label}</div>\r\n                <div className=\"text-sm text-gray-600 mt-1\">Example: {option.example}</div>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Input Section */}\r\n        <div className=\"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Input Expression</h2>\r\n          <div className=\"flex flex-col gap-4\">\r\n            <div>\r\n              <label htmlFor=\"expression-input\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Expression\r\n              </label>\r\n              <input\r\n                id=\"expression-input\"\r\n                type=\"text\"\r\n                value={inputExpression}\r\n                onChange={(e) => setInputExpression(e.target.value)}\r\n                className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500\"\r\n                placeholder=\"Enter expression (e.g., A + B * C)\"\r\n              />\r\n              <p className=\"text-sm text-gray-500 mt-1\">\r\n                Use letters for operands and +, -, *, /, ^ for operators. Parentheses are supported.\r\n              </p>\r\n            </div>\r\n            <div className=\"flex gap-4\">\r\n              <button\r\n                onClick={handleVisualize}\r\n                disabled={isVisualizing}\r\n                className=\"px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n              >\r\n                {isVisualizing ? \"Converting...\" : \"Convert\"}\r\n              </button>\r\n              {result && (\r\n                <div className=\"flex items-center space-x-2 px-4 py-3 bg-green-50 rounded-lg\">\r\n                  <span className=\"text-green-800 font-semibold\">Result:</span>\r\n                  <span className=\"text-green-700 font-mono\">{result}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Visualization Section */}\r\n        {steps.length > 0 && (\r\n          <div className=\"space-y-8\">\r\n            {/* Expression Visualization */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Expression Processing</h2>\r\n              <div className=\"space-y-4\">\r\n                {/* Input Expression */}\r\n                <div>\r\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Input Expression</h3>\r\n                  <div className=\"flex flex-wrap gap-2 justify-center\">\r\n                    {tokenize(steps[currentStep].input).map((token, index) => (\r\n                      <div\r\n                        key={index}\r\n                        className={`w-12 h-12 flex items-center justify-center rounded-lg text-lg font-semibold transition-all duration-200 ${\r\n                          index === steps[currentStep].tokenIndex\r\n                            ? \"bg-blue-500 text-white shadow-lg\"\r\n                            : isOperator(token)\r\n                              ? \"bg-orange-100 text-orange-700\"\r\n                              : \"bg-gray-100 text-gray-700\"\r\n                        }`}\r\n                      >\r\n                        {token}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Current Token */}\r\n                {steps[currentStep].currentToken && (\r\n                  <div className=\"text-center\">\r\n                    <div className=\"inline-flex items-center space-x-2 px-4 py-2 bg-blue-100 rounded-lg\">\r\n                      <span className=\"text-blue-800 font-semibold\">Current Token:</span>\r\n                      <span className=\"text-blue-700 font-mono text-lg\">{steps[currentStep].currentToken}</span>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Stack Visualization */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Stack State</h2>\r\n              <div className=\"flex flex-col-reverse items-center gap-2 min-h-[100px]\">\r\n                {steps[currentStep].stack.length === 0 ? (\r\n                  <div className=\"text-gray-500 italic\">Stack is empty</div>\r\n                ) : (\r\n                  steps[currentStep].stack.map((element, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={`min-w-[80px] h-12 flex items-center justify-center rounded-lg border-2 transition-all duration-200 px-2 ${\r\n                        element.isActive\r\n                          ? \"border-blue-500 bg-blue-50 text-blue-700\"\r\n                          : element.isOperator\r\n                            ? \"border-orange-300 bg-orange-50 text-orange-700\"\r\n                            : \"border-gray-300 bg-gray-50 text-gray-700\"\r\n                      }`}\r\n                    >\r\n                      <div className=\"text-center\">\r\n                        <div className=\"text-sm font-semibold truncate\">{element.value}</div>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Output Visualization */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Output</h2>\r\n              <div className=\"flex flex-wrap gap-2 justify-center min-h-[60px] items-center\">\r\n                {steps[currentStep].output.length === 0 ? (\r\n                  <div className=\"text-gray-500 italic\">Output is empty</div>\r\n                ) : (\r\n                  steps[currentStep].output.map((token, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className=\"min-w-[40px] h-12 flex items-center justify-center rounded-lg bg-green-100 text-green-700 border border-green-300 font-semibold px-2\"\r\n                    >\r\n                      {token}\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Step Information */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Step Information</h2>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <div>\r\n                    <p className=\"text-gray-700\">{steps[currentStep].description}</p>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-4\">\r\n                    <button\r\n                      onClick={() => setCurrentStep((prev) => Math.max(0, prev - 1))}\r\n                      disabled={currentStep === 0}\r\n                      className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    >\r\n                      <ChevronLeft className=\"w-6 h-6 text-gray-600\" />\r\n                    </button>\r\n                    <span className=\"text-gray-600\">\r\n                      Step {currentStep + 1} of {steps.length}\r\n                    </span>\r\n                    <button\r\n                      onClick={() => setCurrentStep((prev) => Math.min(steps.length - 1, prev + 1))}\r\n                      disabled={currentStep === steps.length - 1}\r\n                      className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    >\r\n                      <ChevronRight className=\"w-6 h-6 text-gray-600\" />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Code Section */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h2 className=\"text-xl font-bold text-gray-900\">Code</h2>\r\n                <button\r\n                  onClick={() => setShowFullCode(!showFullCode)}\r\n                  className=\"flex items-center space-x-2 text-blue-600 hover:text-blue-700\"\r\n                >\r\n                  <Code className=\"w-5 h-5\" />\r\n                  <span>{showFullCode ? \"Show Current Step\" : \"Show Full Code\"}</span>\r\n                </button>\r\n              </div>\r\n              <pre className=\"bg-gray-50 p-4 rounded-lg overflow-x-auto\">\r\n                <code className=\"text-sm text-gray-800\">{showFullCode ? getFullCode() : steps[currentStep]?.code}</code>\r\n              </pre>\r\n            </div>\r\n\r\n            {/* Algorithm Insights */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Algorithm Insights</h2>\r\n              <div className=\"space-y-3 text-sm\">\r\n                <div className=\"p-3 bg-blue-50 rounded-lg\">\r\n                  <div className=\"font-semibold text-blue-800\">Stack Usage:</div>\r\n                  <div className=\"text-blue-700\">\r\n                    Stack is used to temporarily store operators and manage precedence during conversion\r\n                  </div>\r\n                </div>\r\n                <div className=\"p-3 bg-purple-50 rounded-lg\">\r\n                  <div className=\"font-semibold text-purple-800\">Precedence Rules:</div>\r\n                  <div className=\"text-purple-700\">\r\n                    ^ (highest) → *, / → +, - (lowest). Higher precedence operators are processed first\r\n                  </div>\r\n                </div>\r\n                <div className=\"p-3 bg-green-50 rounded-lg\">\r\n                  <div className=\"font-semibold text-green-800\">Applications:</div>\r\n                  <div className=\"text-green-700\">\r\n                    Compilers, calculators, and expression evaluators use these conversions for parsing\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ExpressionConverterPage\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}