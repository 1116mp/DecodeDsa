{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\DSA Website\\\\src\\\\pages\\\\array-algorithms\\\\bit-manipulation.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ArrowLeft, Binary, ChevronLeft, ChevronRight, Code } from \"lucide-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BitManipulationPage() {\n  _s();\n  var _steps$currentStep$re;\n  const [arrayInput, setArrayInput] = useState(\"\");\n  const [steps, setSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isVisualizing, setIsVisualizing] = useState(false);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(\"single-number\");\n  const [showFullCode, setShowFullCode] = useState(false);\n  const resetVisualization = () => {\n    setSteps([]);\n    setCurrentStep(0);\n    setIsVisualizing(false);\n    setShowFullCode(false);\n  };\n  const toBinaryString = (num, bits = 8) => {\n    return num.toString(2).padStart(bits, \"0\");\n  };\n  const generateSingleNumberSteps = array => {\n    const newSteps = [];\n    let result = 0;\n\n    // Initial state\n    newSteps.push({\n      numbers: array.map(num => ({\n        value: num,\n        binaryString: toBinaryString(num),\n        isHighlighted: false,\n        isResult: false\n      })),\n      description: \"Find the single number using XOR operation\",\n      code: `# XOR all numbers - duplicates cancel out\nresult = 0`\n    });\n\n    // Process each number\n    for (let i = 0; i < array.length; i++) {\n      const prevResult = result;\n      result ^= array[i];\n      const currentNumbers = array.map((num, idx) => ({\n        value: num,\n        binaryString: toBinaryString(num),\n        isHighlighted: idx === i,\n        isResult: false\n      }));\n      newSteps.push({\n        numbers: currentNumbers,\n        description: `XOR with ${array[i]}: ${prevResult} ^ ${array[i]} = ${result}`,\n        code: `# XOR operation\nresult = result ^ array[i]\n# ${toBinaryString(prevResult)} ^ ${toBinaryString(array[i])} = ${toBinaryString(result)}`,\n        operation: `${toBinaryString(prevResult)} ^ ${toBinaryString(array[i])} = ${toBinaryString(result)}`,\n        result: result\n      });\n    }\n\n    // Final result\n    newSteps.push({\n      numbers: array.map(num => ({\n        value: num,\n        binaryString: toBinaryString(num),\n        isHighlighted: false,\n        isResult: num === result\n      })),\n      description: `Single number found: ${result}`,\n      code: `# Return the single number\nreturn result`,\n      result: result\n    });\n    return newSteps;\n  };\n  const generateCountBitsSteps = array => {\n    const newSteps = [];\n    newSteps.push({\n      numbers: array.map(num => ({\n        value: num,\n        binaryString: toBinaryString(num),\n        isHighlighted: false,\n        isResult: false\n      })),\n      description: \"Count set bits (1s) in each number\",\n      code: `# Count set bits in each number\ndef count_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count`\n    });\n\n    // Process each number\n    for (let i = 0; i < array.length; i++) {\n      const num = array[i];\n      let count = 0;\n      let temp = num;\n\n      // Count bits step by step\n      const bitSteps = [];\n      while (temp > 0) {\n        if (temp & 1) count++;\n        bitSteps.push(`${temp} & 1 = ${temp & 1}`);\n        temp >>= 1;\n      }\n      const currentNumbers = array.map((n, idx) => ({\n        value: n,\n        binaryString: toBinaryString(n),\n        isHighlighted: idx === i,\n        isResult: idx < i\n      }));\n      newSteps.push({\n        numbers: currentNumbers,\n        description: `Counting bits in ${num}: ${count} set bits`,\n        code: `# Counting bits in ${num}\n${bitSteps.join(\"\\n\")}\n# Total set bits: ${count}`,\n        result: count\n      });\n    }\n    return newSteps;\n  };\n  const generatePowerOfTwoSteps = array => {\n    const newSteps = [];\n    newSteps.push({\n      numbers: array.map(num => ({\n        value: num,\n        binaryString: toBinaryString(num),\n        isHighlighted: false,\n        isResult: false\n      })),\n      description: \"Check if numbers are powers of 2 using n & (n-1) == 0\",\n      code: `# Power of 2 check: n & (n-1) == 0\ndef is_power_of_two(n):\n    return n > 0 and (n & (n-1)) == 0`\n    });\n\n    // Process each number\n    for (let i = 0; i < array.length; i++) {\n      const num = array[i];\n      const isPowerOfTwo = num > 0 && (num & num - 1) === 0;\n      const currentNumbers = array.map((n, idx) => ({\n        value: n,\n        binaryString: toBinaryString(n),\n        isHighlighted: idx === i,\n        isResult: idx === i && isPowerOfTwo\n      }));\n      newSteps.push({\n        numbers: currentNumbers,\n        description: `Checking ${num}: ${num} & ${num - 1} = ${num & num - 1} ${isPowerOfTwo ? \"(Power of 2!)\" : \"(Not power of 2)\"}`,\n        code: `# Check ${num}\n${toBinaryString(num)} & ${toBinaryString(num - 1)} = ${toBinaryString(num & num - 1)}\n# Result: ${isPowerOfTwo}`,\n        result: isPowerOfTwo\n      });\n    }\n    return newSteps;\n  };\n  const generateReverseBitsSteps = array => {\n    const newSteps = [];\n    newSteps.push({\n      numbers: array.map(num => ({\n        value: num,\n        binaryString: toBinaryString(num),\n        isHighlighted: false,\n        isResult: false\n      })),\n      description: \"Reverse bits of each number\",\n      code: `# Reverse bits\ndef reverse_bits(n):\n    result = 0\n    for i in range(8):  # 8-bit numbers\n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result`\n    });\n\n    // Process each number\n    for (let i = 0; i < array.length; i++) {\n      const num = array[i];\n      let result = 0;\n      let temp = num;\n\n      // Reverse bits\n      for (let bit = 0; bit < 8; bit++) {\n        result = result << 1 | temp & 1;\n        temp >>= 1;\n      }\n      const currentNumbers = array.map((n, idx) => ({\n        value: n,\n        binaryString: toBinaryString(n),\n        isHighlighted: idx === i,\n        isResult: false\n      }));\n      newSteps.push({\n        numbers: currentNumbers,\n        description: `Reversing ${num}: ${toBinaryString(num)} â†’ ${toBinaryString(result)} (${result})`,\n        code: `# Reverse bits of ${num}\nOriginal:  ${toBinaryString(num)}\nReversed:  ${toBinaryString(result)}\nResult: ${result}`,\n        result: result\n      });\n    }\n    return newSteps;\n  };\n  const handleVisualize = () => {\n    try {\n      const numbers = arrayInput.split(\",\").map(num => Number.parseInt(num.trim()));\n      if (numbers.some(isNaN) || numbers.some(n => n < 0 || n > 255)) {\n        throw new Error(\"Please enter valid numbers between 0-255\");\n      }\n      resetVisualization();\n      setIsVisualizing(true);\n      let newSteps;\n      switch (selectedAlgorithm) {\n        case \"single-number\":\n          newSteps = generateSingleNumberSteps(numbers);\n          break;\n        case \"count-bits\":\n          newSteps = generateCountBitsSteps(numbers);\n          break;\n        case \"power-of-two\":\n          newSteps = generatePowerOfTwoSteps(numbers);\n          break;\n        case \"reverse-bits\":\n          newSteps = generateReverseBitsSteps(numbers);\n          break;\n        default:\n          newSteps = [];\n      }\n      setSteps(newSteps);\n      setIsVisualizing(false);\n    } catch (err) {\n      alert(err instanceof Error ? err.message : \"Please enter valid numbers\");\n    }\n  };\n  const getFullCode = () => {\n    switch (selectedAlgorithm) {\n      case \"single-number\":\n        return `def single_number(nums):\n    result = 0\n    for num in nums:\n        result ^= num\n    return result`;\n      case \"count-bits\":\n        return `def count_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\ndef count_all_bits(nums):\n    return [count_bits(num) for num in nums]`;\n      case \"power-of-two\":\n        return `def is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\ndef check_all_powers(nums):\n    return [is_power_of_two(num) for num in nums]`;\n      case \"reverse-bits\":\n        return `def reverse_bits(n):\n    result = 0\n    for i in range(8):  # 8-bit numbers\n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result\n\ndef reverse_all_bits(nums):\n    return [reverse_bits(num) for num in nums]`;\n      default:\n        return \"\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-white shadow-sm border-b\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-3\",\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: \"/array-algorithms\",\n              className: \"p-2 hover:bg-gray-100 rounded-lg transition-colors\",\n              children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n                className: \"w-6 h-6 text-gray-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-lg\",\n              children: /*#__PURE__*/_jsxDEV(Binary, {\n                className: \"w-6 h-6 text-white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-3xl font-bold bg-gradient-to-r from-yellow-600 to-orange-600 bg-clip-text text-transparent\",\n              children: \"Bit Manipulation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-900 mb-4\",\n          children: \"Select Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-2 md:grid-cols-4 gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedAlgorithm(\"single-number\"),\n            className: `px-4 py-2 rounded-lg text-sm ${selectedAlgorithm === \"single-number\" ? \"bg-yellow-600 text-white\" : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"}`,\n            children: \"Single Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedAlgorithm(\"count-bits\"),\n            className: `px-4 py-2 rounded-lg text-sm ${selectedAlgorithm === \"count-bits\" ? \"bg-yellow-600 text-white\" : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"}`,\n            children: \"Count Set Bits\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedAlgorithm(\"power-of-two\"),\n            className: `px-4 py-2 rounded-lg text-sm ${selectedAlgorithm === \"power-of-two\" ? \"bg-yellow-600 text-white\" : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"}`,\n            children: \"Power of Two\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedAlgorithm(\"reverse-bits\"),\n            className: `px-4 py-2 rounded-lg text-sm ${selectedAlgorithm === \"reverse-bits\" ? \"bg-yellow-600 text-white\" : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"}`,\n            children: \"Reverse Bits\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-900 mb-4\",\n          children: \"Input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"array-input\",\n              className: \"block text-sm font-medium text-gray-700 mb-2\",\n              children: \"Numbers (0-255, comma-separated)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"array-input\",\n              type: \"text\",\n              value: arrayInput,\n              onChange: e => setArrayInput(e.target.value),\n              className: \"w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-yellow-500\",\n              placeholder: selectedAlgorithm === \"single-number\" ? \"e.g., 2, 2, 1\" : \"e.g., 5, 8, 16, 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleVisualize,\n            disabled: isVisualizing,\n            className: \"px-6 py-3 bg-gradient-to-r from-yellow-600 to-orange-600 text-white font-semibold rounded-lg hover:from-yellow-700 hover:to-orange-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\",\n            children: isVisualizing ? \"Visualizing...\" : \"Visualize\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), steps.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-900 mb-4\",\n            children: \"Binary Representation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-4\",\n            children: steps[currentStep].numbers.map((element, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `flex items-center gap-4 p-3 rounded-lg transition-all duration-200 ${element.isHighlighted ? \"bg-yellow-100 border-2 border-yellow-500\" : element.isResult ? \"bg-green-100 border-2 border-green-500\" : \"bg-gray-50\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"w-12 text-center font-semibold\",\n                children: element.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"font-mono text-lg\",\n                children: element.binaryString.split(\"\").map((bit, bitIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `inline-block w-6 text-center ${bit === \"1\" ? \"text-blue-600 font-bold\" : \"text-gray-400\"}`,\n                  children: bit\n                }, bitIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 441,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm text-gray-500\",\n                children: [\"(Index \", index, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 451,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 13\n        }, this), steps[currentStep].operation && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-900 mb-4\",\n            children: \"Current Operation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"font-mono text-lg bg-gray-50 p-4 rounded-lg\",\n            children: steps[currentStep].operation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 15\n        }, this), steps[currentStep] && typeof steps[currentStep].result !== 'undefined' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-900 mb-4\",\n            children: \"Result\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-green-600\",\n            children: typeof steps[currentStep].result === \"boolean\" ? (_steps$currentStep$re = steps[currentStep].result) === null || _steps$currentStep$re === void 0 ? void 0 : _steps$currentStep$re.toString() : steps[currentStep].result\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-gray-900 mb-4\",\n            children: \"Step Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-gray-700\",\n                  children: steps[currentStep].description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 483,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center space-x-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setCurrentStep(prev => Math.max(0, prev - 1)),\n                  disabled: currentStep === 0,\n                  className: \"p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\",\n                  children: /*#__PURE__*/_jsxDEV(ChevronLeft, {\n                    className: \"w-6 h-6 text-gray-600\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 491,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-gray-600\",\n                  children: [\"Step \", currentStep + 1, \" of \", steps.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 493,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setCurrentStep(prev => Math.min(steps.length - 1, prev + 1)),\n                  disabled: currentStep === steps.length - 1,\n                  className: \"p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\",\n                  children: /*#__PURE__*/_jsxDEV(ChevronRight, {\n                    className: \"w-6 h-6 text-gray-600\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 501,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 496,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-between mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900\",\n              children: \"Code\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowFullCode(!showFullCode),\n              className: \"flex items-center space-x-2 text-yellow-600 hover:text-yellow-700\",\n              children: [/*#__PURE__*/_jsxDEV(Code, {\n                className: \"w-5 h-5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 516,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: showFullCode ? \"Show Current Step\" : \"Show Full Code\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"bg-gray-50 p-4 rounded-lg overflow-x-auto\",\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              className: \"text-sm text-gray-800\",\n              children: showFullCode ? getFullCode() : steps[currentStep].code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 5\n  }, this);\n}\n_s(BitManipulationPage, \"uc4GzQvazgwtXTgbAjSJHIRg+6w=\");\n_c = BitManipulationPage;\nexport default BitManipulationPage;\nvar _c;\n$RefreshReg$(_c, \"BitManipulationPage\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","Link","ArrowLeft","Binary","ChevronLeft","ChevronRight","Code","jsxDEV","_jsxDEV","BitManipulationPage","_steps$currentStep$re","arrayInput","setArrayInput","steps","setSteps","currentStep","setCurrentStep","isVisualizing","setIsVisualizing","selectedAlgorithm","setSelectedAlgorithm","showFullCode","setShowFullCode","resetVisualization","toBinaryString","num","bits","toString","padStart","generateSingleNumberSteps","array","newSteps","result","push","numbers","map","value","binaryString","isHighlighted","isResult","description","code","i","length","prevResult","currentNumbers","idx","operation","generateCountBitsSteps","count","temp","bitSteps","n","join","generatePowerOfTwoSteps","isPowerOfTwo","generateReverseBitsSteps","bit","handleVisualize","split","Number","parseInt","trim","some","isNaN","Error","err","alert","message","getFullCode","className","children","to","fileName","lineNumber","columnNumber","onClick","htmlFor","id","type","onChange","e","target","placeholder","disabled","element","index","bitIndex","prev","Math","max","min","_c","$RefreshReg$"],"sources":["D:/DSA Website/src/pages/array-algorithms/bit-manipulation.tsx"],"sourcesContent":["\"use client\"\r\nimport { useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { ArrowLeft, Binary, ChevronLeft, ChevronRight, Code } from \"lucide-react\"\r\n\r\ninterface BitElement {\r\n  value: number\r\n  binaryString: string\r\n  isHighlighted: boolean\r\n  isResult: boolean\r\n}\r\n\r\ninterface Step {\r\n  numbers: BitElement[]\r\n  description: string\r\n  code: string\r\n  operation?: string\r\n  result?: number | boolean\r\n}\r\n\r\nfunction BitManipulationPage() {\r\n  const [arrayInput, setArrayInput] = useState<string>(\"\")\r\n  const [steps, setSteps] = useState<Step[]>([])\r\n  const [currentStep, setCurrentStep] = useState<number>(0)\r\n  const [isVisualizing, setIsVisualizing] = useState<boolean>(false)\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<\r\n    \"single-number\" | \"count-bits\" | \"power-of-two\" | \"reverse-bits\"\r\n  >(\"single-number\")\r\n  const [showFullCode, setShowFullCode] = useState<boolean>(false)\r\n\r\n  const resetVisualization = () => {\r\n    setSteps([])\r\n    setCurrentStep(0)\r\n    setIsVisualizing(false)\r\n    setShowFullCode(false)\r\n  }\r\n\r\n  const toBinaryString = (num: number, bits = 8) => {\r\n    return num.toString(2).padStart(bits, \"0\")\r\n  }\r\n\r\n  const generateSingleNumberSteps = (array: number[]) => {\r\n    const newSteps: Step[] = []\r\n    let result = 0\r\n\r\n    // Initial state\r\n    newSteps.push({\r\n      numbers: array.map((num) => ({\r\n        value: num,\r\n        binaryString: toBinaryString(num),\r\n        isHighlighted: false,\r\n        isResult: false,\r\n      })),\r\n      description: \"Find the single number using XOR operation\",\r\n      code: `# XOR all numbers - duplicates cancel out\r\nresult = 0`,\r\n    })\r\n\r\n    // Process each number\r\n    for (let i = 0; i < array.length; i++) {\r\n      const prevResult = result\r\n      result ^= array[i]\r\n\r\n      const currentNumbers = array.map((num, idx) => ({\r\n        value: num,\r\n        binaryString: toBinaryString(num),\r\n        isHighlighted: idx === i,\r\n        isResult: false,\r\n      }))\r\n\r\n      newSteps.push({\r\n        numbers: currentNumbers,\r\n        description: `XOR with ${array[i]}: ${prevResult} ^ ${array[i]} = ${result}`,\r\n        code: `# XOR operation\r\nresult = result ^ array[i]\r\n# ${toBinaryString(prevResult)} ^ ${toBinaryString(array[i])} = ${toBinaryString(result)}`,\r\n        operation: `${toBinaryString(prevResult)} ^ ${toBinaryString(array[i])} = ${toBinaryString(result)}`,\r\n        result: result,\r\n      })\r\n    }\r\n\r\n    // Final result\r\n    newSteps.push({\r\n      numbers: array.map((num) => ({\r\n        value: num,\r\n        binaryString: toBinaryString(num),\r\n        isHighlighted: false,\r\n        isResult: num === result,\r\n      })),\r\n      description: `Single number found: ${result}`,\r\n      code: `# Return the single number\r\nreturn result`,\r\n      result: result,\r\n    })\r\n\r\n    return newSteps\r\n  }\r\n\r\n  const generateCountBitsSteps = (array: number[]) => {\r\n    const newSteps: Step[] = []\r\n\r\n    newSteps.push({\r\n      numbers: array.map((num) => ({\r\n        value: num,\r\n        binaryString: toBinaryString(num),\r\n        isHighlighted: false,\r\n        isResult: false,\r\n      })),\r\n      description: \"Count set bits (1s) in each number\",\r\n      code: `# Count set bits in each number\r\ndef count_bits(n):\r\n    count = 0\r\n    while n:\r\n        count += n & 1\r\n        n >>= 1\r\n    return count`,\r\n    })\r\n\r\n    // Process each number\r\n    for (let i = 0; i < array.length; i++) {\r\n      const num = array[i]\r\n      let count = 0\r\n      let temp = num\r\n\r\n      // Count bits step by step\r\n      const bitSteps: string[] = []\r\n      while (temp > 0) {\r\n        if (temp & 1) count++\r\n        bitSteps.push(`${temp} & 1 = ${temp & 1}`)\r\n        temp >>= 1\r\n      }\r\n\r\n      const currentNumbers = array.map((n, idx) => ({\r\n        value: n,\r\n        binaryString: toBinaryString(n),\r\n        isHighlighted: idx === i,\r\n        isResult: idx < i,\r\n      }))\r\n\r\n      newSteps.push({\r\n        numbers: currentNumbers,\r\n        description: `Counting bits in ${num}: ${count} set bits`,\r\n        code: `# Counting bits in ${num}\r\n${bitSteps.join(\"\\n\")}\r\n# Total set bits: ${count}`,\r\n        result: count,\r\n      })\r\n    }\r\n\r\n    return newSteps\r\n  }\r\n\r\n  const generatePowerOfTwoSteps = (array: number[]) => {\r\n    const newSteps: Step[] = []\r\n\r\n    newSteps.push({\r\n      numbers: array.map((num) => ({\r\n        value: num,\r\n        binaryString: toBinaryString(num),\r\n        isHighlighted: false,\r\n        isResult: false,\r\n      })),\r\n      description: \"Check if numbers are powers of 2 using n & (n-1) == 0\",\r\n      code: `# Power of 2 check: n & (n-1) == 0\r\ndef is_power_of_two(n):\r\n    return n > 0 and (n & (n-1)) == 0`,\r\n    })\r\n\r\n    // Process each number\r\n    for (let i = 0; i < array.length; i++) {\r\n      const num = array[i]\r\n      const isPowerOfTwo = num > 0 && (num & (num - 1)) === 0\r\n\r\n      const currentNumbers = array.map((n, idx) => ({\r\n        value: n,\r\n        binaryString: toBinaryString(n),\r\n        isHighlighted: idx === i,\r\n        isResult: idx === i && isPowerOfTwo,\r\n      }))\r\n\r\n      newSteps.push({\r\n        numbers: currentNumbers,\r\n        description: `Checking ${num}: ${num} & ${num - 1} = ${num & (num - 1)} ${isPowerOfTwo ? \"(Power of 2!)\" : \"(Not power of 2)\"}`,\r\n        code: `# Check ${num}\r\n${toBinaryString(num)} & ${toBinaryString(num - 1)} = ${toBinaryString(num & (num - 1))}\r\n# Result: ${isPowerOfTwo}`,\r\n        result: isPowerOfTwo,\r\n      })\r\n    }\r\n\r\n    return newSteps\r\n  }\r\n\r\n  const generateReverseBitsSteps = (array: number[]) => {\r\n    const newSteps: Step[] = []\r\n\r\n    newSteps.push({\r\n      numbers: array.map((num) => ({\r\n        value: num,\r\n        binaryString: toBinaryString(num),\r\n        isHighlighted: false,\r\n        isResult: false,\r\n      })),\r\n      description: \"Reverse bits of each number\",\r\n      code: `# Reverse bits\r\ndef reverse_bits(n):\r\n    result = 0\r\n    for i in range(8):  # 8-bit numbers\r\n        result = (result << 1) | (n & 1)\r\n        n >>= 1\r\n    return result`,\r\n    })\r\n\r\n    // Process each number\r\n    for (let i = 0; i < array.length; i++) {\r\n      const num = array[i]\r\n      let result = 0\r\n      let temp = num\r\n\r\n      // Reverse bits\r\n      for (let bit = 0; bit < 8; bit++) {\r\n        result = (result << 1) | (temp & 1)\r\n        temp >>= 1\r\n      }\r\n\r\n      const currentNumbers = array.map((n, idx) => ({\r\n        value: n,\r\n        binaryString: toBinaryString(n),\r\n        isHighlighted: idx === i,\r\n        isResult: false,\r\n      }))\r\n\r\n      newSteps.push({\r\n        numbers: currentNumbers,\r\n        description: `Reversing ${num}: ${toBinaryString(num)} â†’ ${toBinaryString(result)} (${result})`,\r\n        code: `# Reverse bits of ${num}\r\nOriginal:  ${toBinaryString(num)}\r\nReversed:  ${toBinaryString(result)}\r\nResult: ${result}`,\r\n        result: result,\r\n      })\r\n    }\r\n\r\n    return newSteps\r\n  }\r\n\r\n  const handleVisualize = () => {\r\n    try {\r\n      const numbers = arrayInput.split(\",\").map((num) => Number.parseInt(num.trim()))\r\n      if (numbers.some(isNaN) || numbers.some((n) => n < 0 || n > 255)) {\r\n        throw new Error(\"Please enter valid numbers between 0-255\")\r\n      }\r\n\r\n      resetVisualization()\r\n      setIsVisualizing(true)\r\n\r\n      let newSteps: Step[]\r\n      switch (selectedAlgorithm) {\r\n        case \"single-number\":\r\n          newSteps = generateSingleNumberSteps(numbers)\r\n          break\r\n        case \"count-bits\":\r\n          newSteps = generateCountBitsSteps(numbers)\r\n          break\r\n        case \"power-of-two\":\r\n          newSteps = generatePowerOfTwoSteps(numbers)\r\n          break\r\n        case \"reverse-bits\":\r\n          newSteps = generateReverseBitsSteps(numbers)\r\n          break\r\n        default:\r\n          newSteps = []\r\n      }\r\n\r\n      setSteps(newSteps)\r\n      setIsVisualizing(false)\r\n    } catch (err) {\r\n      alert(err instanceof Error ? err.message : \"Please enter valid numbers\")\r\n    }\r\n  }\r\n\r\n  const getFullCode = () => {\r\n    switch (selectedAlgorithm) {\r\n      case \"single-number\":\r\n        return `def single_number(nums):\r\n    result = 0\r\n    for num in nums:\r\n        result ^= num\r\n    return result`\r\n\r\n      case \"count-bits\":\r\n        return `def count_bits(n):\r\n    count = 0\r\n    while n:\r\n        count += n & 1\r\n        n >>= 1\r\n    return count\r\n\r\ndef count_all_bits(nums):\r\n    return [count_bits(num) for num in nums]`\r\n\r\n      case \"power-of-two\":\r\n        return `def is_power_of_two(n):\r\n    return n > 0 and (n & (n - 1)) == 0\r\n\r\ndef check_all_powers(nums):\r\n    return [is_power_of_two(num) for num in nums]`\r\n\r\n      case \"reverse-bits\":\r\n        return `def reverse_bits(n):\r\n    result = 0\r\n    for i in range(8):  # 8-bit numbers\r\n        result = (result << 1) | (n & 1)\r\n        n >>= 1\r\n    return result\r\n\r\ndef reverse_all_bits(nums):\r\n    return [reverse_bits(num) for num in nums]`\r\n\r\n      default:\r\n        return \"\"\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100\">\r\n      <header className=\"bg-white shadow-sm border-b\">\r\n        <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <Link to=\"/array-algorithms\" className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\">\r\n                <ArrowLeft className=\"w-6 h-6 text-gray-600\" />\r\n              </Link>\r\n              <div className=\"p-2 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-lg\">\r\n                <Binary className=\"w-6 h-6 text-white\" />\r\n              </div>\r\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-yellow-600 to-orange-600 bg-clip-text text-transparent\">\r\n                Bit Manipulation\r\n              </h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8\">\r\n        {/* Algorithm Selection */}\r\n        <div className=\"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Select Algorithm</h2>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n            <button\r\n              onClick={() => setSelectedAlgorithm(\"single-number\")}\r\n              className={`px-4 py-2 rounded-lg text-sm ${\r\n                selectedAlgorithm === \"single-number\"\r\n                  ? \"bg-yellow-600 text-white\"\r\n                  : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\r\n              }`}\r\n            >\r\n              Single Number\r\n            </button>\r\n            <button\r\n              onClick={() => setSelectedAlgorithm(\"count-bits\")}\r\n              className={`px-4 py-2 rounded-lg text-sm ${\r\n                selectedAlgorithm === \"count-bits\"\r\n                  ? \"bg-yellow-600 text-white\"\r\n                  : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\r\n              }`}\r\n            >\r\n              Count Set Bits\r\n            </button>\r\n            <button\r\n              onClick={() => setSelectedAlgorithm(\"power-of-two\")}\r\n              className={`px-4 py-2 rounded-lg text-sm ${\r\n                selectedAlgorithm === \"power-of-two\"\r\n                  ? \"bg-yellow-600 text-white\"\r\n                  : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\r\n              }`}\r\n            >\r\n              Power of Two\r\n            </button>\r\n            <button\r\n              onClick={() => setSelectedAlgorithm(\"reverse-bits\")}\r\n              className={`px-4 py-2 rounded-lg text-sm ${\r\n                selectedAlgorithm === \"reverse-bits\"\r\n                  ? \"bg-yellow-600 text-white\"\r\n                  : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\r\n              }`}\r\n            >\r\n              Reverse Bits\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Input Section */}\r\n        <div className=\"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Input</h2>\r\n          <div className=\"flex flex-col gap-4\">\r\n            <div>\r\n              <label htmlFor=\"array-input\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Numbers (0-255, comma-separated)\r\n              </label>\r\n              <input\r\n                id=\"array-input\"\r\n                type=\"text\"\r\n                value={arrayInput}\r\n                onChange={(e) => setArrayInput(e.target.value)}\r\n                className=\"w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-yellow-500\"\r\n                placeholder={selectedAlgorithm === \"single-number\" ? \"e.g., 2, 2, 1\" : \"e.g., 5, 8, 16, 3\"}\r\n              />\r\n            </div>\r\n            <button\r\n              onClick={handleVisualize}\r\n              disabled={isVisualizing}\r\n              className=\"px-6 py-3 bg-gradient-to-r from-yellow-600 to-orange-600 text-white font-semibold rounded-lg hover:from-yellow-700 hover:to-orange-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            >\r\n              {isVisualizing ? \"Visualizing...\" : \"Visualize\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Visualization Section */}\r\n        {steps.length > 0 && (\r\n          <div className=\"space-y-8\">\r\n            {/* Binary Visualization */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Binary Representation</h2>\r\n              <div className=\"space-y-4\">\r\n                {steps[currentStep].numbers.map((element, index) => (\r\n                  <div\r\n                    key={index}\r\n                    className={`flex items-center gap-4 p-3 rounded-lg transition-all duration-200 ${\r\n                      element.isHighlighted\r\n                        ? \"bg-yellow-100 border-2 border-yellow-500\"\r\n                        : element.isResult\r\n                          ? \"bg-green-100 border-2 border-green-500\"\r\n                          : \"bg-gray-50\"\r\n                    }`}\r\n                  >\r\n                    <div className=\"w-12 text-center font-semibold\">{element.value}</div>\r\n                    <div className=\"font-mono text-lg\">\r\n                      {element.binaryString.split(\"\").map((bit, bitIndex) => (\r\n                        <span\r\n                          key={bitIndex}\r\n                          className={`inline-block w-6 text-center ${\r\n                            bit === \"1\" ? \"text-blue-600 font-bold\" : \"text-gray-400\"\r\n                          }`}\r\n                        >\r\n                          {bit}\r\n                        </span>\r\n                      ))}\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-500\">(Index {index})</div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Operation Display */}\r\n            {steps[currentStep].operation && (\r\n              <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n                <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Current Operation</h2>\r\n                <div className=\"font-mono text-lg bg-gray-50 p-4 rounded-lg\">{steps[currentStep].operation}</div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Result Display */}\r\n            {steps[currentStep] && typeof steps[currentStep].result !== 'undefined' && (\r\n              <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n                <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Result</h2>\r\n                <div className=\"text-2xl font-bold text-green-600\">\r\n                  {typeof steps[currentStep].result === \"boolean\"\r\n                    ? steps[currentStep].result?.toString()\r\n                    : steps[currentStep].result}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Step Information */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Step Information</h2>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <div>\r\n                    <p className=\"text-gray-700\">{steps[currentStep].description}</p>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-4\">\r\n                    <button\r\n                      onClick={() => setCurrentStep((prev) => Math.max(0, prev - 1))}\r\n                      disabled={currentStep === 0}\r\n                      className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    >\r\n                      <ChevronLeft className=\"w-6 h-6 text-gray-600\" />\r\n                    </button>\r\n                    <span className=\"text-gray-600\">\r\n                      Step {currentStep + 1} of {steps.length}\r\n                    </span>\r\n                    <button\r\n                      onClick={() => setCurrentStep((prev) => Math.min(steps.length - 1, prev + 1))}\r\n                      disabled={currentStep === steps.length - 1}\r\n                      className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    >\r\n                      <ChevronRight className=\"w-6 h-6 text-gray-600\" />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Code Section */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h2 className=\"text-xl font-bold text-gray-900\">Code</h2>\r\n                <button\r\n                  onClick={() => setShowFullCode(!showFullCode)}\r\n                  className=\"flex items-center space-x-2 text-yellow-600 hover:text-yellow-700\"\r\n                >\r\n                  <Code className=\"w-5 h-5\" />\r\n                  <span>{showFullCode ? \"Show Current Step\" : \"Show Full Code\"}</span>\r\n                </button>\r\n              </div>\r\n              <pre className=\"bg-gray-50 p-4 rounded-lg overflow-x-auto\">\r\n                <code className=\"text-sm text-gray-800\">{showFullCode ? getFullCode() : steps[currentStep].code}</code>\r\n              </pre>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BitManipulationPage\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}