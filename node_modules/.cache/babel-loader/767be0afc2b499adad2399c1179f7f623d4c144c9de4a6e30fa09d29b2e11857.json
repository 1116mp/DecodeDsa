{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\DSA Website\\\\src\\\\components\\\\SortingVisualizer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Badge } from './ui/badge';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SortingVisualizer = ({\n  algorithm,\n  inputArray\n}) => {\n  _s();\n  var _steps$currentStep, _steps$currentStep2, _steps$currentStep3;\n  const [steps, setSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  useEffect(() => {\n    const array = inputArray.split(' ').map(Number).filter(n => !isNaN(n));\n    const newSteps = generateSteps(algorithm, array);\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [algorithm, inputArray]);\n  const generateSteps = (algorithm, array) => {\n    const steps = [];\n    const arr = [...array];\n    switch (algorithm) {\n      case 'Bubble Sort':\n        return bubbleSort(arr, steps);\n      case 'Selection Sort':\n        return selectionSort(arr, steps);\n      case 'Insertion Sort':\n        return insertionSort(arr, steps);\n      case 'Merge Sort':\n        return mergeSort(arr, steps);\n      case 'Quick Sort':\n        return quickSort(arr, steps);\n      case 'Heap Sort':\n        return heapSort(arr, steps);\n      default:\n        steps.push({\n          array: arr,\n          description: 'Algorithm not implemented yet',\n          code: '// Implementation coming soon'\n        });\n        return steps;\n    }\n  };\n  const bubbleSort = (arr, steps) => {\n    const n = arr.length;\n    for (let i = 0; i < n - 1; i++) {\n      let swapped = false;\n      steps.push({\n        array: [...arr],\n        description: `Pass ${i + 1}: Starting bubble sort pass`,\n        code: `// Pass ${i + 1}\\nfor (let j = 0; j < ${n - i - 1}; j++) {`\n      });\n      for (let j = 0; j < n - i - 1; j++) {\n        steps.push({\n          array: [...arr],\n          description: `Comparing elements at positions ${j} and ${j + 1}`,\n          code: `if (arr[${j}] > arr[${j + 1}]) {\\n  // ${arr[j]} > ${arr[j + 1]} is ${arr[j] > arr[j + 1]}\\n}`,\n          comparing: [j, j + 1]\n        });\n        if (arr[j] > arr[j + 1]) {\n          [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n          swapped = true;\n          steps.push({\n            array: [...arr],\n            description: `Swapped ${arr[j]} and ${arr[j + 1]} because ${arr[j + 1]} < ${arr[j]}`,\n            code: `// Swap elements\\n[arr[${j}], arr[${j + 1}]] = [arr[${j + 1}], arr[${j}]];`,\n            swapping: [j, j + 1]\n          });\n        }\n      }\n      if (!swapped) {\n        steps.push({\n          array: [...arr],\n          description: `No swaps in this pass - array is sorted!`,\n          code: `// No swaps occurred, array is sorted\\nbreak;`\n        });\n        break;\n      }\n    }\n    steps.push({\n      array: [...arr],\n      description: `Bubble sort completed`,\n      code: `// Bubble sort completed\\n// Final array: [${arr.join(', ')}]`,\n      sorted: Array.from({\n        length: arr.length\n      }, (_, i) => i)\n    });\n    return steps;\n  };\n  const selectionSort = (arr, steps) => {\n    const n = arr.length;\n    for (let i = 0; i < n - 1; i++) {\n      let minIdx = i;\n      steps.push({\n        array: [...arr],\n        description: `Pass ${i + 1}: Finding minimum element in unsorted portion`,\n        code: `// Pass ${i + 1}\\nlet minIdx = ${i};\\nlet minValue = arr[${i}]; // ${arr[i]}`\n      });\n      for (let j = i + 1; j < n; j++) {\n        steps.push({\n          array: [...arr],\n          description: `Comparing elements at positions ${minIdx} and ${j}`,\n          code: `if (arr[${j}] < arr[${minIdx}]) {\\n  // ${arr[j]} < ${arr[minIdx]} is ${arr[j] < arr[minIdx]}\\n}`,\n          comparing: [minIdx, j]\n        });\n        if (arr[j] < arr[minIdx]) {\n          minIdx = j;\n          steps.push({\n            array: [...arr],\n            description: `New minimum found: ${arr[j]} at position ${j}`,\n            code: `minIdx = ${j}; // New minimum: ${arr[j]}`\n          });\n        }\n      }\n      if (minIdx !== i) {\n        steps.push({\n          array: [...arr],\n          description: `Swapping minimum element ${arr[minIdx]} with element at position ${i}`,\n          code: `// Swap minimum with first unsorted element\\n[arr[${i}], arr[${minIdx}]] = [arr[${minIdx}], arr[${i}]];`,\n          swapping: [i, minIdx]\n        });\n        [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n      }\n      steps.push({\n        array: [...arr],\n        description: `Position ${i} is now in correct place`,\n        code: `// Position ${i} is now in correct place`,\n        sorted: Array.from({\n          length: i + 1\n        }, (_, idx) => idx)\n      });\n    }\n    steps.push({\n      array: [...arr],\n      description: `Selection sort completed`,\n      code: `// Selection sort completed\\n// Final array: [${arr.join(', ')}]`,\n      sorted: Array.from({\n        length: arr.length\n      }, (_, i) => i)\n    });\n    return steps;\n  };\n  const insertionSort = (arr, steps) => {\n    for (let i = 1; i < arr.length; i++) {\n      const key = arr[i];\n      let j = i - 1;\n      steps.push({\n        array: [...arr],\n        description: `Pass ${i}: Inserting element ${key} into sorted portion`,\n        code: `// Pass ${i}\\nlet key = arr[${i}]; // ${key}\\nlet j = ${i - 1};`,\n        comparing: [i]\n      });\n      while (j >= 0 && arr[j] > key) {\n        steps.push({\n          array: [...arr],\n          description: `Shifting element ${arr[j]} right to make space for ${key}`,\n          code: `while (j >= 0 && arr[j] > key) {\\n  arr[j + 1] = arr[j]; // Shift ${arr[j]} right\\n  j--;\\n}`,\n          comparing: [j, j + 1]\n        });\n        arr[j + 1] = arr[j];\n        j--;\n        steps.push({\n          array: [...arr],\n          description: `Shifted element right, continue checking position ${j >= 0 ? j : 'none'}`,\n          code: `// Element shifted, j = ${j}`\n        });\n      }\n      arr[j + 1] = key;\n      steps.push({\n        array: [...arr],\n        description: `Inserted ${key} at position ${j + 1}`,\n        code: `arr[${j + 1}] = key; // Insert ${key}`,\n        sorted: Array.from({\n          length: i + 1\n        }, (_, idx) => idx)\n      });\n    }\n    steps.push({\n      array: [...arr],\n      description: `Insertion sort completed`,\n      code: `// Insertion sort completed\\n// Final array: [${arr.join(', ')}]`,\n      sorted: Array.from({\n        length: arr.length\n      }, (_, i) => i)\n    });\n    return steps;\n  };\n  const mergeSort = (arr, steps) => {\n    const mergeSortHelper = (arr, left, right, depth = 0) => {\n      if (left >= right) return;\n      const mid = Math.floor((left + right) / 2);\n      steps.push({\n        array: [...arr],\n        description: `Divide: Splitting array from index ${left} to ${right} at middle ${mid}`,\n        code: `// Divide phase (depth ${depth})\\nlet mid = Math.floor((${left} + ${right}) / 2); // ${mid}`\n      });\n      mergeSortHelper(arr, left, mid, depth + 1);\n      mergeSortHelper(arr, mid + 1, right, depth + 1);\n\n      // Merge phase\n      const leftArr = arr.slice(left, mid + 1);\n      const rightArr = arr.slice(mid + 1, right + 1);\n      steps.push({\n        array: [...arr],\n        description: `Merge: Combining [${leftArr.join(', ')}] and [${rightArr.join(', ')}]`,\n        code: `// Merge phase\\nleft = [${leftArr.join(', ')}]\\nright = [${rightArr.join(', ')}]`\n      });\n      let i = 0,\n        j = 0,\n        k = left;\n      while (i < leftArr.length && j < rightArr.length) {\n        if (leftArr[i] <= rightArr[j]) {\n          arr[k] = leftArr[i];\n          steps.push({\n            array: [...arr],\n            description: `${leftArr[i]} ≤ ${rightArr[j]}, so place ${leftArr[i]} at position ${k}`,\n            code: `arr[${k}] = ${leftArr[i]}; // ${leftArr[i]} ≤ ${rightArr[j]}`\n          });\n          i++;\n        } else {\n          arr[k] = rightArr[j];\n          steps.push({\n            array: [...arr],\n            description: `${rightArr[j]} < ${leftArr[i]}, so place ${rightArr[j]} at position ${k}`,\n            code: `arr[${k}] = ${rightArr[j]}; // ${rightArr[j]} < ${leftArr[i]}`\n          });\n          j++;\n        }\n        k++;\n      }\n      while (i < leftArr.length) {\n        arr[k] = leftArr[i];\n        steps.push({\n          array: [...arr],\n          description: `Copy remaining element ${leftArr[i]} to position ${k}`,\n          code: `arr[${k}] = ${leftArr[i]}; // Copy remaining`\n        });\n        i++;\n        k++;\n      }\n      while (j < rightArr.length) {\n        arr[k] = rightArr[j];\n        steps.push({\n          array: [...arr],\n          description: `Copy remaining element ${rightArr[j]} to position ${k}`,\n          code: `arr[${k}] = ${rightArr[j]}; // Copy remaining`\n        });\n        j++;\n        k++;\n      }\n    };\n    mergeSortHelper(arr, 0, arr.length - 1);\n    steps.push({\n      array: [...arr],\n      description: `Merge sort completed`,\n      code: `// Merge sort completed\\n// Final array: [${arr.join(', ')}]`,\n      sorted: Array.from({\n        length: arr.length\n      }, (_, i) => i)\n    });\n    return steps;\n  };\n  const quickSort = (arr, steps) => {\n    const quickSortHelper = (arr, low, high, depth = 0) => {\n      if (low < high) {\n        steps.push({\n          array: [...arr],\n          description: `Partitioning array from index ${low} to ${high}`,\n          code: `// Quick sort (depth ${depth})\\n// Partition from ${low} to ${high}`\n        });\n        const pi = partition(arr, low, high);\n        steps.push({\n          array: [...arr],\n          description: `Pivot ${arr[pi]} placed at position ${pi}`,\n          code: `// Pivot ${arr[pi]} placed at position ${pi}`,\n          pivot: pi\n        });\n        quickSortHelper(arr, low, pi - 1, depth + 1);\n        quickSortHelper(arr, pi + 1, high, depth + 1);\n      }\n    };\n    const partition = (arr, low, high) => {\n      const pivot = arr[high];\n      let i = low - 1;\n      steps.push({\n        array: [...arr],\n        description: `Starting partition with pivot ${pivot}`,\n        code: `let pivot = arr[${high}]; // ${pivot}\\nlet i = ${low - 1};`,\n        pivot: high\n      });\n      for (let j = low; j < high; j++) {\n        steps.push({\n          array: [...arr],\n          description: `Comparing element ${arr[j]} with pivot ${pivot}`,\n          code: `if (arr[${j}] <= pivot) {\\n  // ${arr[j]} <= ${pivot} is ${arr[j] <= pivot}\\n}`,\n          comparing: [j, high]\n        });\n        if (arr[j] <= pivot) {\n          i++;\n          if (i !== j) {\n            steps.push({\n              array: [...arr],\n              description: `Swapping elements at positions ${i} and ${j}`,\n              code: `i++; // i = ${i}\\n[arr[${i}], arr[${j}]] = [arr[${j}], arr[${i}]];`,\n              swapping: [i, j]\n            });\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n          } else {\n            steps.push({\n              array: [...arr],\n              description: `${arr[j]} ≤ ${pivot}, increment i to ${i + 1}`,\n              code: `i++; // i = ${i + 1}`\n            });\n            i++;\n          }\n        }\n      }\n      steps.push({\n        array: [...arr],\n        description: `Placing pivot ${pivot} at final position ${i + 1}`,\n        code: `[arr[${i + 1}], arr[${high}]] = [arr[${high}], arr[${i + 1}]];`,\n        swapping: [i + 1, high]\n      });\n      [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n      return i + 1;\n    };\n    quickSortHelper(arr, 0, arr.length - 1);\n    steps.push({\n      array: [...arr],\n      description: `Quick sort completed`,\n      code: `// Quick sort completed\\n// Final array: [${arr.join(', ')}]`,\n      sorted: Array.from({\n        length: arr.length\n      }, (_, i) => i)\n    });\n    return steps;\n  };\n  const heapSort = (arr, steps) => {\n    const n = arr.length;\n\n    // Build max heap\n    steps.push({\n      array: [...arr],\n      description: `Building max heap from array`,\n      code: `// Build max heap\\n// Start from last non-leaf node`\n    });\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n      heapify(arr, n, i, steps);\n    }\n    steps.push({\n      array: [...arr],\n      description: `Max heap built: [${arr.join(', ')}]`,\n      code: `// Max heap construction complete`\n    });\n\n    // Extract elements from heap one by one\n    for (let i = n - 1; i > 0; i--) {\n      steps.push({\n        array: [...arr],\n        description: `Moving root ${arr[0]} to end position ${i}`,\n        code: `// Move root to end\\n[arr[0], arr[${i}]] = [arr[${i}], arr[0]];`,\n        swapping: [0, i]\n      });\n      [arr[0], arr[i]] = [arr[i], arr[0]];\n      steps.push({\n        array: [...arr],\n        description: `Heapifying reduced heap of size ${i}`,\n        code: `// Heapify reduced heap of size ${i}`,\n        sorted: Array.from({\n          length: n - i\n        }, (_, idx) => n - 1 - idx)\n      });\n      heapify(arr, i, 0, steps);\n    }\n    steps.push({\n      array: [...arr],\n      description: `Heap sort completed`,\n      code: `// Heap sort completed\\n// Final array: [${arr.join(', ')}]`,\n      sorted: Array.from({\n        length: arr.length\n      }, (_, i) => i)\n    });\n    return steps;\n  };\n  const heapify = (arr, n, i, steps) => {\n    let largest = i;\n    const left = 2 * i + 1;\n    const right = 2 * i + 2;\n    if (left < n && arr[left] > arr[largest]) {\n      largest = left;\n    }\n    if (right < n && arr[right] > arr[largest]) {\n      largest = right;\n    }\n    if (largest !== i) {\n      steps.push({\n        array: [...arr],\n        description: `Swapping parent with larger child`,\n        code: `// Heapify: swap parent with larger child\\n[arr[${i}], arr[${largest}]] = [arr[${largest}], arr[${i}]];`,\n        swapping: [i, largest]\n      });\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      heapify(arr, n, largest, steps);\n    }\n  };\n  const handleNext = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n  const handleReset = () => {\n    setCurrentStep(0);\n  };\n  const getElementColor = index => {\n    var _step$sorted, _step$swapping, _step$comparing;\n    const step = steps[currentStep];\n    if (!step) return 'bg-blue-500';\n    if ((_step$sorted = step.sorted) !== null && _step$sorted !== void 0 && _step$sorted.includes(index)) return 'bg-green-500';\n    if ((_step$swapping = step.swapping) !== null && _step$swapping !== void 0 && _step$swapping.includes(index)) return 'bg-red-500';\n    if ((_step$comparing = step.comparing) !== null && _step$comparing !== void 0 && _step$comparing.includes(index)) return 'bg-yellow-500';\n    if (step.pivot === index) return 'bg-purple-500';\n    return 'bg-blue-500';\n  };\n  if (steps.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"Array Visualization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-2\",\n            children: (_steps$currentStep = steps[currentStep]) === null || _steps$currentStep === void 0 ? void 0 : _steps$currentStep.array.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `w-12 h-12 flex items-center justify-center text-white rounded-md ${getElementColor(index)}`,\n              children: value\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-2\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: handlePrevious,\n              disabled: currentStep === 0,\n              variant: \"secondary\",\n              children: \"Previous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleNext,\n              disabled: currentStep === steps.length - 1,\n              variant: \"primary\",\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleReset,\n              variant: \"secondary\",\n              children: \"Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"Step Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600\",\n          children: (_steps$currentStep2 = steps[currentStep]) === null || _steps$currentStep2 === void 0 ? void 0 : _steps$currentStep2.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"bg-gray-800 text-white p-4 rounded-md overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            children: (_steps$currentStep3 = steps[currentStep]) === null || _steps$currentStep3 === void 0 ? void 0 : _steps$currentStep3.code\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(Badge, {\n        variant: \"default\",\n        children: [\"Step \", currentStep + 1, \" of \", steps.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(Badge, {\n          variant: \"success\",\n          children: \"Sorted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Badge, {\n          variant: \"error\",\n          children: \"Swapping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Badge, {\n          variant: \"warning\",\n          children: \"Comparing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Badge, {\n          variant: \"default\",\n          children: \"Pivot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 498,\n    columnNumber: 5\n  }, this);\n};\n_s(SortingVisualizer, \"28vzVcXq5e+yZe0hsYVXcMNuHgE=\");\n_c = SortingVisualizer;\nexport default SortingVisualizer;\nvar _c;\n$RefreshReg$(_c, \"SortingVisualizer\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","React","useEffect","useState","Button","Card","CardContent","CardHeader","CardTitle","Badge","jsxDEV","_jsxDEV","SortingVisualizer","algorithm","inputArray","_steps$currentStep","_steps$currentStep2","_steps$currentStep3","steps","setSteps","currentStep","setCurrentStep","array","split","map","Number","filter","n","isNaN","newSteps","generateSteps","arr","bubbleSort","selectionSort","insertionSort","mergeSort","quickSort","heapSort","push","description","code","length","i","swapped","j","comparing","swapping","join","sorted","Array","from","_","minIdx","idx","key","mergeSortHelper","left","right","depth","mid","Math","floor","leftArr","slice","rightArr","k","quickSortHelper","low","high","pi","partition","pivot","heapify","largest","handleNext","handlePrevious","handleReset","getElementColor","index","_step$sorted","_step$swapping","_step$comparing","step","includes","children","fileName","lineNumber","columnNumber","className","value","onClick","disabled","variant","_c","$RefreshReg$"],"sources":["D:/DSA Website/src/components/SortingVisualizer.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button } from './ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Badge } from './ui/badge';\r\n\r\ninterface SortingVisualizerProps {\r\n  algorithm: string;\r\n  inputArray: string;\r\n}\r\n\r\ninterface Step {\r\n  array: number[];\r\n  description: string;\r\n  code: string;\r\n  comparing?: number[];\r\n  swapping?: number[];\r\n  sorted?: number[];\r\n  pivot?: number;\r\n}\r\n\r\nconst SortingVisualizer: React.FC<SortingVisualizerProps> = ({ algorithm, inputArray }) => {\r\n  const [steps, setSteps] = useState<Step[]>([]);\r\n  const [currentStep, setCurrentStep] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    const array = inputArray.split(' ').map(Number).filter(n => !isNaN(n));\r\n    const newSteps = generateSteps(algorithm, array);\r\n    setSteps(newSteps);\r\n    setCurrentStep(0);\r\n  }, [algorithm, inputArray]);\r\n\r\n  const generateSteps = (algorithm: string, array: number[]): Step[] => {\r\n    const steps: Step[] = [];\r\n    const arr = [...array];\r\n\r\n    switch (algorithm) {\r\n      case 'Bubble Sort':\r\n        return bubbleSort(arr, steps);\r\n      case 'Selection Sort':\r\n        return selectionSort(arr, steps);\r\n      case 'Insertion Sort':\r\n        return insertionSort(arr, steps);\r\n      case 'Merge Sort':\r\n        return mergeSort(arr, steps);\r\n      case 'Quick Sort':\r\n        return quickSort(arr, steps);\r\n      case 'Heap Sort':\r\n        return heapSort(arr, steps);\r\n      default:\r\n        steps.push({\r\n          array: arr,\r\n          description: 'Algorithm not implemented yet',\r\n          code: '// Implementation coming soon'\r\n        });\r\n        return steps;\r\n    }\r\n  };\r\n\r\n  const bubbleSort = (arr: number[], steps: Step[]): Step[] => {\r\n    const n = arr.length;\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n      let swapped = false;\r\n\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Pass ${i + 1}: Starting bubble sort pass`,\r\n        code: `// Pass ${i + 1}\\nfor (let j = 0; j < ${n - i - 1}; j++) {`,\r\n      });\r\n\r\n      for (let j = 0; j < n - i - 1; j++) {\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `Comparing elements at positions ${j} and ${j + 1}`,\r\n          code: `if (arr[${j}] > arr[${j + 1}]) {\\n  // ${arr[j]} > ${arr[j + 1]} is ${arr[j] > arr[j + 1]}\\n}`,\r\n          comparing: [j, j + 1],\r\n        });\r\n\r\n        if (arr[j] > arr[j + 1]) {\r\n          [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\r\n          swapped = true;\r\n\r\n          steps.push({\r\n            array: [...arr],\r\n            description: `Swapped ${arr[j]} and ${arr[j + 1]} because ${arr[j + 1]} < ${arr[j]}`,\r\n            code: `// Swap elements\\n[arr[${j}], arr[${j + 1}]] = [arr[${j + 1}], arr[${j}]];`,\r\n            swapping: [j, j + 1],\r\n          });\r\n        }\r\n      }\r\n\r\n      if (!swapped) {\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `No swaps in this pass - array is sorted!`,\r\n          code: `// No swaps occurred, array is sorted\\nbreak;`,\r\n        });\r\n        break;\r\n      }\r\n    }\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Bubble sort completed`,\r\n      code: `// Bubble sort completed\\n// Final array: [${arr.join(', ')}]`,\r\n      sorted: Array.from({ length: arr.length }, (_, i) => i),\r\n    });\r\n\r\n    return steps;\r\n  };\r\n\r\n  const selectionSort = (arr: number[], steps: Step[]): Step[] => {\r\n    const n = arr.length;\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n      let minIdx = i;\r\n\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Pass ${i + 1}: Finding minimum element in unsorted portion`,\r\n        code: `// Pass ${i + 1}\\nlet minIdx = ${i};\\nlet minValue = arr[${i}]; // ${arr[i]}`,\r\n      });\r\n\r\n      for (let j = i + 1; j < n; j++) {\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `Comparing elements at positions ${minIdx} and ${j}`,\r\n          code: `if (arr[${j}] < arr[${minIdx}]) {\\n  // ${arr[j]} < ${arr[minIdx]} is ${arr[j] < arr[minIdx]}\\n}`,\r\n          comparing: [minIdx, j],\r\n        });\r\n\r\n        if (arr[j] < arr[minIdx]) {\r\n          minIdx = j;\r\n          steps.push({\r\n            array: [...arr],\r\n            description: `New minimum found: ${arr[j]} at position ${j}`,\r\n            code: `minIdx = ${j}; // New minimum: ${arr[j]}`,\r\n          });\r\n        }\r\n      }\r\n\r\n      if (minIdx !== i) {\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `Swapping minimum element ${arr[minIdx]} with element at position ${i}`,\r\n          code: `// Swap minimum with first unsorted element\\n[arr[${i}], arr[${minIdx}]] = [arr[${minIdx}], arr[${i}]];`,\r\n          swapping: [i, minIdx],\r\n        });\r\n        [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\r\n      }\r\n\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Position ${i} is now in correct place`,\r\n        code: `// Position ${i} is now in correct place`,\r\n        sorted: Array.from({ length: i + 1 }, (_, idx) => idx),\r\n      });\r\n    }\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Selection sort completed`,\r\n      code: `// Selection sort completed\\n// Final array: [${arr.join(', ')}]`,\r\n      sorted: Array.from({ length: arr.length }, (_, i) => i),\r\n    });\r\n\r\n    return steps;\r\n  };\r\n\r\n  const insertionSort = (arr: number[], steps: Step[]): Step[] => {\r\n    for (let i = 1; i < arr.length; i++) {\r\n      const key = arr[i];\r\n      let j = i - 1;\r\n\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Pass ${i}: Inserting element ${key} into sorted portion`,\r\n        code: `// Pass ${i}\\nlet key = arr[${i}]; // ${key}\\nlet j = ${i - 1};`,\r\n        comparing: [i],\r\n      });\r\n\r\n      while (j >= 0 && arr[j] > key) {\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `Shifting element ${arr[j]} right to make space for ${key}`,\r\n          code: `while (j >= 0 && arr[j] > key) {\\n  arr[j + 1] = arr[j]; // Shift ${arr[j]} right\\n  j--;\\n}`,\r\n          comparing: [j, j + 1],\r\n        });\r\n\r\n        arr[j + 1] = arr[j];\r\n        j--;\r\n\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `Shifted element right, continue checking position ${j >= 0 ? j : 'none'}`,\r\n          code: `// Element shifted, j = ${j}`,\r\n        });\r\n      }\r\n\r\n      arr[j + 1] = key;\r\n\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Inserted ${key} at position ${j + 1}`,\r\n        code: `arr[${j + 1}] = key; // Insert ${key}`,\r\n        sorted: Array.from({ length: i + 1 }, (_, idx) => idx),\r\n      });\r\n    }\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Insertion sort completed`,\r\n      code: `// Insertion sort completed\\n// Final array: [${arr.join(', ')}]`,\r\n      sorted: Array.from({ length: arr.length }, (_, i) => i),\r\n    });\r\n\r\n    return steps;\r\n  };\r\n\r\n  const mergeSort = (arr: number[], steps: Step[]): Step[] => {\r\n    const mergeSortHelper = (arr: number[], left: number, right: number, depth = 0): void => {\r\n      if (left >= right) return;\r\n\r\n      const mid = Math.floor((left + right) / 2);\r\n\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Divide: Splitting array from index ${left} to ${right} at middle ${mid}`,\r\n        code: `// Divide phase (depth ${depth})\\nlet mid = Math.floor((${left} + ${right}) / 2); // ${mid}`,\r\n      });\r\n\r\n      mergeSortHelper(arr, left, mid, depth + 1);\r\n      mergeSortHelper(arr, mid + 1, right, depth + 1);\r\n\r\n      // Merge phase\r\n      const leftArr = arr.slice(left, mid + 1);\r\n      const rightArr = arr.slice(mid + 1, right + 1);\r\n\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Merge: Combining [${leftArr.join(', ')}] and [${rightArr.join(', ')}]`,\r\n        code: `// Merge phase\\nleft = [${leftArr.join(', ')}]\\nright = [${rightArr.join(', ')}]`,\r\n      });\r\n\r\n      let i = 0, j = 0, k = left;\r\n\r\n      while (i < leftArr.length && j < rightArr.length) {\r\n        if (leftArr[i] <= rightArr[j]) {\r\n          arr[k] = leftArr[i];\r\n          steps.push({\r\n            array: [...arr],\r\n            description: `${leftArr[i]} ≤ ${rightArr[j]}, so place ${leftArr[i]} at position ${k}`,\r\n            code: `arr[${k}] = ${leftArr[i]}; // ${leftArr[i]} ≤ ${rightArr[j]}`,\r\n          });\r\n          i++;\r\n        } else {\r\n          arr[k] = rightArr[j];\r\n          steps.push({\r\n            array: [...arr],\r\n            description: `${rightArr[j]} < ${leftArr[i]}, so place ${rightArr[j]} at position ${k}`,\r\n            code: `arr[${k}] = ${rightArr[j]}; // ${rightArr[j]} < ${leftArr[i]}`,\r\n          });\r\n          j++;\r\n        }\r\n        k++;\r\n      }\r\n\r\n      while (i < leftArr.length) {\r\n        arr[k] = leftArr[i];\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `Copy remaining element ${leftArr[i]} to position ${k}`,\r\n          code: `arr[${k}] = ${leftArr[i]}; // Copy remaining`,\r\n        });\r\n        i++;\r\n        k++;\r\n      }\r\n\r\n      while (j < rightArr.length) {\r\n        arr[k] = rightArr[j];\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `Copy remaining element ${rightArr[j]} to position ${k}`,\r\n          code: `arr[${k}] = ${rightArr[j]}; // Copy remaining`,\r\n        });\r\n        j++;\r\n        k++;\r\n      }\r\n    };\r\n\r\n    mergeSortHelper(arr, 0, arr.length - 1);\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Merge sort completed`,\r\n      code: `// Merge sort completed\\n// Final array: [${arr.join(', ')}]`,\r\n      sorted: Array.from({ length: arr.length }, (_, i) => i),\r\n    });\r\n\r\n    return steps;\r\n  };\r\n\r\n  const quickSort = (arr: number[], steps: Step[]): Step[] => {\r\n    const quickSortHelper = (arr: number[], low: number, high: number, depth = 0): void => {\r\n      if (low < high) {\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `Partitioning array from index ${low} to ${high}`,\r\n          code: `// Quick sort (depth ${depth})\\n// Partition from ${low} to ${high}`,\r\n        });\r\n\r\n        const pi = partition(arr, low, high);\r\n\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `Pivot ${arr[pi]} placed at position ${pi}`,\r\n          code: `// Pivot ${arr[pi]} placed at position ${pi}`,\r\n          pivot: pi,\r\n        });\r\n\r\n        quickSortHelper(arr, low, pi - 1, depth + 1);\r\n        quickSortHelper(arr, pi + 1, high, depth + 1);\r\n      }\r\n    };\r\n\r\n    const partition = (arr: number[], low: number, high: number): number => {\r\n      const pivot = arr[high];\r\n      let i = low - 1;\r\n\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Starting partition with pivot ${pivot}`,\r\n        code: `let pivot = arr[${high}]; // ${pivot}\\nlet i = ${low - 1};`,\r\n        pivot: high,\r\n      });\r\n\r\n      for (let j = low; j < high; j++) {\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `Comparing element ${arr[j]} with pivot ${pivot}`,\r\n          code: `if (arr[${j}] <= pivot) {\\n  // ${arr[j]} <= ${pivot} is ${arr[j] <= pivot}\\n}`,\r\n          comparing: [j, high],\r\n        });\r\n\r\n        if (arr[j] <= pivot) {\r\n          i++;\r\n          if (i !== j) {\r\n            steps.push({\r\n              array: [...arr],\r\n              description: `Swapping elements at positions ${i} and ${j}`,\r\n              code: `i++; // i = ${i}\\n[arr[${i}], arr[${j}]] = [arr[${j}], arr[${i}]];`,\r\n              swapping: [i, j],\r\n            });\r\n            [arr[i], arr[j]] = [arr[j], arr[i]];\r\n          } else {\r\n            steps.push({\r\n              array: [...arr],\r\n              description: `${arr[j]} ≤ ${pivot}, increment i to ${i + 1}`,\r\n              code: `i++; // i = ${i + 1}`,\r\n            });\r\n            i++;\r\n          }\r\n        }\r\n      }\r\n\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Placing pivot ${pivot} at final position ${i + 1}`,\r\n        code: `[arr[${i + 1}], arr[${high}]] = [arr[${high}], arr[${i + 1}]];`,\r\n        swapping: [i + 1, high],\r\n      });\r\n      [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\r\n      return i + 1;\r\n    };\r\n\r\n    quickSortHelper(arr, 0, arr.length - 1);\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Quick sort completed`,\r\n      code: `// Quick sort completed\\n// Final array: [${arr.join(', ')}]`,\r\n      sorted: Array.from({ length: arr.length }, (_, i) => i),\r\n    });\r\n\r\n    return steps;\r\n  };\r\n\r\n  const heapSort = (arr: number[], steps: Step[]): Step[] => {\r\n    const n = arr.length;\r\n\r\n    // Build max heap\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Building max heap from array`,\r\n      code: `// Build max heap\\n// Start from last non-leaf node`,\r\n    });\r\n\r\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n      heapify(arr, n, i, steps);\r\n    }\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Max heap built: [${arr.join(', ')}]`,\r\n      code: `// Max heap construction complete`,\r\n    });\r\n\r\n    // Extract elements from heap one by one\r\n    for (let i = n - 1; i > 0; i--) {\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Moving root ${arr[0]} to end position ${i}`,\r\n        code: `// Move root to end\\n[arr[0], arr[${i}]] = [arr[${i}], arr[0]];`,\r\n        swapping: [0, i],\r\n      });\r\n      [arr[0], arr[i]] = [arr[i], arr[0]];\r\n\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Heapifying reduced heap of size ${i}`,\r\n        code: `// Heapify reduced heap of size ${i}`,\r\n        sorted: Array.from({ length: n - i }, (_, idx) => n - 1 - idx),\r\n      });\r\n\r\n      heapify(arr, i, 0, steps);\r\n    }\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Heap sort completed`,\r\n      code: `// Heap sort completed\\n// Final array: [${arr.join(', ')}]`,\r\n      sorted: Array.from({ length: arr.length }, (_, i) => i),\r\n    });\r\n\r\n    return steps;\r\n  };\r\n\r\n  const heapify = (arr: number[], n: number, i: number, steps: Step[]): void => {\r\n    let largest = i;\r\n    const left = 2 * i + 1;\r\n    const right = 2 * i + 2;\r\n\r\n    if (left < n && arr[left] > arr[largest]) {\r\n      largest = left;\r\n    }\r\n\r\n    if (right < n && arr[right] > arr[largest]) {\r\n      largest = right;\r\n    }\r\n\r\n    if (largest !== i) {\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Swapping parent with larger child`,\r\n        code: `// Heapify: swap parent with larger child\\n[arr[${i}], arr[${largest}]] = [arr[${largest}], arr[${i}]];`,\r\n        swapping: [i, largest],\r\n      });\r\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\r\n      heapify(arr, n, largest, steps);\r\n    }\r\n  };\r\n\r\n  const handleNext = (): void => {\r\n    if (currentStep < steps.length - 1) {\r\n      setCurrentStep(currentStep + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevious = (): void => {\r\n    if (currentStep > 0) {\r\n      setCurrentStep(currentStep - 1);\r\n    }\r\n  };\r\n\r\n  const handleReset = (): void => {\r\n    setCurrentStep(0);\r\n  };\r\n\r\n  const getElementColor = (index: number): string => {\r\n    const step = steps[currentStep];\r\n    if (!step) return 'bg-blue-500';\r\n\r\n    if (step.sorted?.includes(index)) return 'bg-green-500';\r\n    if (step.swapping?.includes(index)) return 'bg-red-500';\r\n    if (step.comparing?.includes(index)) return 'bg-yellow-500';\r\n    if (step.pivot === index) return 'bg-purple-500';\r\n\r\n    return 'bg-blue-500';\r\n  };\r\n\r\n  if (steps.length === 0) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Array Visualization</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex space-x-2\">\r\n              {steps[currentStep]?.array.map((value: number, index: number) => (\r\n                <div\r\n                  key={index}\r\n                  className={`w-12 h-12 flex items-center justify-center text-white rounded-md ${getElementColor(index)}`}\r\n                >\r\n                  {value}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"flex space-x-2\">\r\n              <Button\r\n                onClick={handlePrevious}\r\n                disabled={currentStep === 0}\r\n                variant=\"secondary\"\r\n              >\r\n                Previous\r\n              </Button>\r\n              <Button\r\n                onClick={handleNext}\r\n                disabled={currentStep === steps.length - 1}\r\n                variant=\"primary\"\r\n              >\r\n                Next\r\n              </Button>\r\n              <Button\r\n                onClick={handleReset}\r\n                variant=\"secondary\"\r\n              >\r\n                Reset\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Step Description</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <p className=\"text-gray-600\">{steps[currentStep]?.description}</p>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Code</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <pre className=\"bg-gray-800 text-white p-4 rounded-md overflow-x-auto\">\r\n            <code>{steps[currentStep]?.code}</code>\r\n          </pre>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <div className=\"flex items-center justify-between\">\r\n        <Badge variant=\"default\">\r\n          Step {currentStep + 1} of {steps.length}\r\n        </Badge>\r\n        <div className=\"flex space-x-2\">\r\n          <Badge variant=\"success\">Sorted</Badge>\r\n          <Badge variant=\"error\">Swapping</Badge>\r\n          <Badge variant=\"warning\">Comparing</Badge>\r\n          <Badge variant=\"default\">Pivot</Badge>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortingVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}