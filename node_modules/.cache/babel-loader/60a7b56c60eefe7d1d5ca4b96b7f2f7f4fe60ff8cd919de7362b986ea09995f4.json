{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\DSA Website\\\\src\\\\pages\\\\TreeVisualizerPage.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { TreePine, Plus, Search, RotateCcw, Code, BookOpen, Lightbulb, Target, Clock, Zap, Database, Layers } from \"lucide-react\";\n\n// Tree Node interfaces for different tree types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TreeVisualizerPage() {\n  _s();\n  const [treeType, setTreeType] = useState(\"binary\");\n  const [root, setRoot] = useState(null);\n  const [bTreeRoot, setBTreeRoot] = useState(null);\n  const [heapArray, setHeapArray] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [bTreeOrder, setBTreeOrder] = useState(3); // Minimum degree for B-tree\n\n  // UI states\n  const [operationHistory, setOperationHistory] = useState([]);\n  const [showCode, setShowCode] = useState(false);\n  const [showTutorial, setShowTutorial] = useState(false);\n  const [nodeCounter, setNodeCounter] = useState(0);\n  const [traversalResult, setTraversalResult] = useState([]);\n  const [selectedTraversal, setSelectedTraversal] = useState(\"inorder\");\n\n  // Helper functions\n  const generateNodeId = () => {\n    setNodeCounter(prev => prev + 1);\n    return `node-${nodeCounter}`;\n  };\n  const createTreeNode = value => ({\n    id: generateNodeId(),\n    value,\n    left: null,\n    right: null,\n    height: 1,\n    color: \"red\",\n    // Default for Red-Black trees\n    isNew: true\n  });\n  const createBTreeNode = (keys = [], isLeaf = true) => ({\n    id: generateNodeId(),\n    keys,\n    children: [],\n    isLeaf,\n    isNew: true\n  });\n  const createHeapNode = (value, index) => ({\n    id: generateNodeId(),\n    value,\n    index,\n    isNew: true\n  });\n\n  // Binary Search Tree Operations\n  const insertBST = async value => {\n    const steps = [];\n    steps.push({\n      type: \"highlight\",\n      description: `Inserting value ${value} into Binary Search Tree`,\n      code: `function insert(root, value) {\\n  if (!root) return new Node(value)`\n    });\n    if (!root) {\n      const newNode = createTreeNode(value);\n      setRoot(newNode);\n      steps.push({\n        type: \"insert\",\n        nodeId: newNode.id,\n        description: \"Tree is empty. Creating root node\",\n        code: \"  root = new Node(value)\\n  return root\"\n      });\n    } else {\n      const newNode = await insertBSTRecursive(root, value, steps);\n      setRoot({\n        ...root\n      });\n    }\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value}`,\n      code: \"// Insertion completed\"\n    });\n    setAnimationSteps(steps);\n    setCurrentStepIndex(0);\n    setIsAnimating(true);\n    addToHistory(`Inserted ${value} into BST`);\n  };\n  const insertBSTRecursive = async (node, value, steps) => {\n    steps.push({\n      type: \"highlight\",\n      nodeId: node.id,\n      description: `Comparing ${value} with ${node.value}`,\n      code: `  if (value < node.value)`\n    });\n    if (value < node.value) {\n      if (!node.left) {\n        const newNode = createTreeNode(value);\n        node.left = newNode;\n        newNode.parent = node;\n        steps.push({\n          type: \"insert\",\n          nodeId: newNode.id,\n          description: `${value} < ${node.value}, inserting as left child`,\n          code: \"    node.left = new Node(value)\"\n        });\n        return newNode;\n      } else {\n        return await insertBSTRecursive(node.left, value, steps);\n      }\n    } else if (value > node.value) {\n      if (!node.right) {\n        const newNode = createTreeNode(value);\n        node.right = newNode;\n        newNode.parent = node;\n        steps.push({\n          type: \"insert\",\n          nodeId: newNode.id,\n          description: `${value} > ${node.value}, inserting as right child`,\n          code: \"    node.right = new Node(value)\"\n        });\n        return newNode;\n      } else {\n        return await insertBSTRecursive(node.right, value, steps);\n      }\n    } else {\n      steps.push({\n        type: \"highlight\",\n        nodeId: node.id,\n        description: `Value ${value} already exists`,\n        code: \"  // Duplicate value, no insertion\"\n      });\n      return node;\n    }\n  };\n\n  // AVL Tree Operations\n  const getHeight = node => {\n    return node ? node.height || 1 : 0;\n  };\n  const getBalance = node => {\n    var _node$left, _node$right;\n    return node ? getHeight((_node$left = node.left) !== null && _node$left !== void 0 ? _node$left : null) - getHeight((_node$right = node.right) !== null && _node$right !== void 0 ? _node$right : null) : 0;\n  };\n  const updateHeight = node => {\n    var _node$left2, _node$right2;\n    node.height = Math.max(getHeight((_node$left2 = node.left) !== null && _node$left2 !== void 0 ? _node$left2 : null), getHeight((_node$right2 = node.right) !== null && _node$right2 !== void 0 ? _node$right2 : null)) + 1;\n  };\n  const rotateRight = (y, steps) => {\n    const x = y.left;\n    const T2 = x.right;\n    steps.push({\n      type: \"rotate\",\n      nodeId: y.id,\n      description: `Performing right rotation on node ${y.value}`,\n      code: `// Right rotation\\nlet x = y.left\\ny.left = x.right\\nx.right = y`\n    });\n\n    // Perform rotation\n    x.right = y;\n    y.left = T2;\n\n    // Update heights\n    updateHeight(y);\n    updateHeight(x);\n    return x;\n  };\n  const rotateLeft = (x, steps) => {\n    const y = x.right;\n    const T2 = y.left;\n    steps.push({\n      type: \"rotate\",\n      nodeId: x.id,\n      description: `Performing left rotation on node ${x.value}`,\n      code: `// Left rotation\\nlet y = x.right\\nx.right = y.left\\ny.left = x`\n    });\n\n    // Perform rotation\n    y.left = x;\n    x.right = T2;\n\n    // Update heights\n    updateHeight(x);\n    updateHeight(y);\n    return y;\n  };\n  const insertAVL = async value => {\n    const steps = [];\n    steps.push({\n      type: \"highlight\",\n      description: `Inserting value ${value} into AVL Tree`,\n      code: `function insertAVL(root, value) {`\n    });\n    const newRoot = await insertAVLRecursive(root, value, steps);\n    setRoot(newRoot);\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value} with AVL balancing`,\n      code: \"// AVL insertion completed\"\n    });\n    setAnimationSteps(steps);\n    setCurrentStepIndex(0);\n    setIsAnimating(true);\n    addToHistory(`Inserted ${value} into AVL tree`);\n  };\n  const insertAVLRecursive = async (node, value, steps) => {\n    var _node$left$value, _node$left4, _node$right$value, _node$right4;\n    // Standard BST insertion\n    if (!node) {\n      const newNode = createTreeNode(value);\n      steps.push({\n        type: \"insert\",\n        nodeId: newNode.id,\n        description: `Creating new node with value ${value}`,\n        code: \"  return new Node(value)\"\n      });\n      return newNode;\n    }\n    steps.push({\n      type: \"highlight\",\n      nodeId: node.id,\n      description: `Comparing ${value} with ${node.value}`,\n      code: `  if (value < node.value)`\n    });\n    if (value < node.value) {\n      var _node$left3;\n      node.left = await insertAVLRecursive((_node$left3 = node.left) !== null && _node$left3 !== void 0 ? _node$left3 : null, value, steps);\n    } else if (value > node.value) {\n      var _node$right3;\n      node.right = await insertAVLRecursive((_node$right3 = node.right) !== null && _node$right3 !== void 0 ? _node$right3 : null, value, steps);\n    } else {\n      return node; // Duplicate values not allowed\n    }\n\n    // Update height\n    updateHeight(node);\n\n    // Get balance factor\n    const balance = getBalance(node);\n    steps.push({\n      type: \"highlight\",\n      nodeId: node.id,\n      description: `Balance factor of node ${node.value}: ${balance}`,\n      code: `  balance = height(left) - height(right) = ${balance}`\n    });\n\n    // Left Left Case\n    if (balance > 1 && value < node.left.value) {\n      return rotateRight(node, steps);\n    }\n\n    // Right Right Case\n    if (balance < -1 && value > node.right.value) {\n      return rotateLeft(node, steps);\n    }\n\n    // Left Right Case\n    if (balance > 1 && value > ((_node$left$value = (_node$left4 = node.left) === null || _node$left4 === void 0 ? void 0 : _node$left4.value) !== null && _node$left$value !== void 0 ? _node$left$value : Number.POSITIVE_INFINITY)) {\n      if (node.left) {\n        node.left = rotateLeft(node.left, steps);\n        return rotateRight(node, steps);\n      } else {\n        return node;\n      }\n    }\n\n    // Right Left Case\n    if (balance < -1 && value < ((_node$right$value = (_node$right4 = node.right) === null || _node$right4 === void 0 ? void 0 : _node$right4.value) !== null && _node$right$value !== void 0 ? _node$right$value : Number.NEGATIVE_INFINITY)) {\n      if (node.right) {\n        node.right = rotateRight(node.right, steps);\n        return rotateLeft(node, steps);\n      } else {\n        return node;\n      }\n    }\n    return node;\n  };\n\n  // Red-Black Tree Operations\n  const insertRedBlack = async value => {\n    const steps = [];\n    steps.push({\n      type: \"highlight\",\n      description: `Inserting value ${value} into Red-Black Tree`,\n      code: `function insertRB(root, value) {`\n    });\n    if (!root) {\n      const newNode = createTreeNode(value);\n      newNode.color = \"black\"; // Root is always black\n      setRoot(newNode);\n      steps.push({\n        type: \"insert\",\n        nodeId: newNode.id,\n        description: \"Creating root node (colored black)\",\n        code: \"  root = new Node(value)\\n  root.color = BLACK\"\n      });\n    } else {\n      const newNode = await insertRBRecursive(root, value, steps);\n      // Fix violations\n      await fixRedBlackViolations(newNode, steps);\n      setRoot({\n        ...root\n      });\n    }\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value} into Red-Black tree`,\n      code: \"// Red-Black insertion completed\"\n    });\n    setAnimationSteps(steps);\n    setCurrentStepIndex(0);\n    setIsAnimating(true);\n    addToHistory(`Inserted ${value} into Red-Black tree`);\n  };\n  const insertRBRecursive = async (node, value, steps) => {\n    if (value < node.value) {\n      if (!node.left) {\n        const newNode = createTreeNode(value);\n        newNode.color = \"red\"; // New nodes are red\n        node.left = newNode;\n        newNode.parent = node;\n        steps.push({\n          type: \"insert\",\n          nodeId: newNode.id,\n          description: `Inserting ${value} as left child (colored red)`,\n          code: \"  node.left = new Node(value)\\n  node.left.color = RED\"\n        });\n        return newNode;\n      } else {\n        return await insertRBRecursive(node.left, value, steps);\n      }\n    } else if (value > node.value) {\n      if (!node.right) {\n        const newNode = createTreeNode(value);\n        newNode.color = \"red\"; // New nodes are red\n        node.right = newNode;\n        newNode.parent = node;\n        steps.push({\n          type: \"insert\",\n          nodeId: newNode.id,\n          description: `Inserting ${value} as right child (colored red)`,\n          code: \"  node.right = new Node(value)\\n  node.right.color = RED\"\n        });\n        return newNode;\n      } else {\n        return await insertRBRecursive(node.right, value, steps);\n      }\n    }\n    return node;\n  };\n  const fixRedBlackViolations = async (node, steps) => {\n    // Implementation of Red-Black tree fix-up would go here\n    // This is a simplified version\n    if (node.parent && node.parent.color === \"red\") {\n      steps.push({\n        type: \"recolor\",\n        nodeId: node.id,\n        description: \"Fixing Red-Black tree violations\",\n        code: \"// Fix red-red violation\"\n      });\n    }\n  };\n\n  // Heap Operations\n  const insertHeap = async value => {\n    const steps = [];\n    const newHeap = [...heapArray];\n    const newNode = createHeapNode(value, newHeap.length);\n    newHeap.push(newNode);\n    steps.push({\n      type: \"insert\",\n      nodeId: newNode.id,\n      description: `Inserting ${value} at the end of heap`,\n      code: `heap.push(${value})`\n    });\n\n    // Heapify up\n    let index = newHeap.length - 1;\n    while (index > 0) {\n      const parentIndex = Math.floor((index - 1) / 2);\n      if (newHeap[index].value <= newHeap[parentIndex].value) break;\n      steps.push({\n        type: \"heapify\",\n        nodeId: newHeap[index].id,\n        description: `Swapping ${newHeap[index].value} with parent ${newHeap[parentIndex].value}`,\n        code: `swap(heap[${index}], heap[${parentIndex}])`\n      })\n\n      // Swap\n      ;\n      [newHeap[index], newHeap[parentIndex]] = [newHeap[parentIndex], newHeap[index]];\n      newHeap[index].index = index;\n      newHeap[parentIndex].index = parentIndex;\n      index = parentIndex;\n    }\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value} into max heap`,\n      code: \"// Heap insertion completed\"\n    });\n    setHeapArray(newHeap);\n    setAnimationSteps(steps);\n    setCurrentStepIndex(0);\n    setIsAnimating(true);\n    addToHistory(`Inserted ${value} into heap`);\n  };\n\n  // B-Tree Operations\n  const insertBTree = async value => {\n    const steps = [];\n    steps.push({\n      type: \"highlight\",\n      description: `Inserting value ${value} into B-Tree (order ${bTreeOrder})`,\n      code: `function insertBTree(root, value) {`\n    });\n    if (!bTreeRoot) {\n      const newNode = createBTreeNode([value], true);\n      setBTreeRoot(newNode);\n      steps.push({\n        type: \"insert\",\n        nodeId: newNode.id,\n        description: \"Creating root node\",\n        code: \"  root = new BTreeNode([value])\"\n      });\n    } else {\n      await insertBTreeRecursive(bTreeRoot, value, steps);\n      setBTreeRoot({\n        ...bTreeRoot\n      });\n    }\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value} into B-Tree`,\n      code: \"// B-Tree insertion completed\"\n    });\n    setAnimationSteps(steps);\n    setCurrentStepIndex(0);\n    setIsAnimating(true);\n    addToHistory(`Inserted ${value} into B-Tree`);\n  };\n  const insertBTreeRecursive = async (node, value, steps) => {\n    // Find the correct position to insert\n    let i = 0;\n    while (i < node.keys.length && value > node.keys[i]) {\n      i++;\n    }\n    if (node.isLeaf) {\n      // Insert in leaf node\n      node.keys.splice(i, 0, value);\n      steps.push({\n        type: \"insert\",\n        nodeId: node.id,\n        description: `Inserting ${value} into leaf node`,\n        code: `node.keys.insert(${i}, ${value})`\n      });\n\n      // Check if node is full\n      if (node.keys.length >= 2 * bTreeOrder - 1) {\n        steps.push({\n          type: \"highlight\",\n          nodeId: node.id,\n          description: \"Node is full, splitting required\",\n          code: \"// Node overflow, split needed\"\n        });\n      }\n    } else {\n      // Recursively insert in child\n      await insertBTreeRecursive(node.children[i], value, steps);\n    }\n  };\n\n  // Tree Traversals\n  const performTraversal = type => {\n    const result = [];\n    switch (type) {\n      case \"inorder\":\n        inorderTraversal(root, result);\n        break;\n      case \"preorder\":\n        preorderTraversal(root, result);\n        break;\n      case \"postorder\":\n        postorderTraversal(root, result);\n        break;\n      case \"levelorder\":\n        levelorderTraversal(root, result);\n        break;\n    }\n    setTraversalResult(result);\n    addToHistory(`Performed ${type} traversal: [${result.join(\", \")}]`);\n  };\n  const inorderTraversal = (node, result) => {\n    if (node) {\n      var _node$left5, _node$right5;\n      inorderTraversal((_node$left5 = node.left) !== null && _node$left5 !== void 0 ? _node$left5 : null, result);\n      result.push(node.value);\n      inorderTraversal((_node$right5 = node.right) !== null && _node$right5 !== void 0 ? _node$right5 : null, result);\n    }\n  };\n  const preorderTraversal = (node, result) => {\n    if (node) {\n      var _node$left6, _node$right6;\n      result.push(node.value);\n      preorderTraversal((_node$left6 = node.left) !== null && _node$left6 !== void 0 ? _node$left6 : null, result);\n      preorderTraversal((_node$right6 = node.right) !== null && _node$right6 !== void 0 ? _node$right6 : null, result);\n    }\n  };\n  const postorderTraversal = (node, result) => {\n    if (node) {\n      var _node$left7, _node$right7;\n      postorderTraversal((_node$left7 = node.left) !== null && _node$left7 !== void 0 ? _node$left7 : null, result);\n      postorderTraversal((_node$right7 = node.right) !== null && _node$right7 !== void 0 ? _node$right7 : null, result);\n      result.push(node.value);\n    }\n  };\n  const levelorderTraversal = (node, result) => {\n    if (!node) return;\n    const queue = [node];\n    while (queue.length > 0) {\n      const current = queue.shift();\n      result.push(current.value);\n      if (current.left) queue.push(current.left);\n      if (current.right) queue.push(current.right);\n    }\n  };\n\n  // Search operation\n  const searchTree = async value => {\n    if (!root) {\n      addToHistory(\"Cannot search in empty tree\");\n      return;\n    }\n    const steps = [];\n    let found = false;\n    const searchRecursive = node => {\n      if (!node) return false;\n      steps.push({\n        type: \"highlight\",\n        nodeId: node.id,\n        description: `Comparing search value ${value} with node value ${node.value}`,\n        code: `if (value === node.value) return true`\n      });\n      if (node.value === value) {\n        found = true;\n        steps.push({\n          type: \"highlight\",\n          nodeId: node.id,\n          description: `Found value ${value}!`,\n          code: `// Value found at node ${node.value}`\n        });\n        return true;\n      } else if (value < node.value) {\n        var _node$left8;\n        steps.push({\n          type: \"highlight\",\n          nodeId: node.id,\n          description: `${value} < ${node.value}, searching left subtree`,\n          code: `return search(node.left, value)`\n        });\n        return searchRecursive((_node$left8 = node.left) !== null && _node$left8 !== void 0 ? _node$left8 : null);\n      } else {\n        var _node$right8;\n        steps.push({\n          type: \"highlight\",\n          nodeId: node.id,\n          description: `${value} > ${node.value}, searching right subtree`,\n          code: `return search(node.right, value)`\n        });\n        return searchRecursive((_node$right8 = node.right) !== null && _node$right8 !== void 0 ? _node$right8 : null);\n      }\n    };\n    searchRecursive(root);\n    if (!found) {\n      steps.push({\n        type: \"complete\",\n        description: `Value ${value} not found in tree`,\n        code: \"// Search completed - value not found\"\n      });\n    }\n    setAnimationSteps(steps);\n    setCurrentStepIndex(0);\n    setIsAnimating(true);\n    addToHistory(`Searched for ${value} - ${found ? \"found\" : \"not found\"}`);\n  };\n  const addToHistory = operation => {\n    setOperationHistory(prev => [`${new Date().toLocaleTimeString()}: ${operation}`, ...prev.slice(0, 19)]);\n  };\n\n  // Clear tree\n  const clearTree = () => {\n    setRoot(null);\n    setBTreeRoot(null);\n    setHeapArray([]);\n    setAnimationSteps([]);\n    setOperationHistory([]);\n    setTraversalResult([]);\n    addToHistory(\"Tree cleared\");\n  };\n\n  // Get current step info\n  const currentStep = animationSteps[currentStepIndex];\n\n  // Tutorial content\n  const tutorialContent = {\n    binary: {\n      title: \"Binary Tree\",\n      description: \"A tree where each node has at most two children (left and right).\",\n      complexity: \"Search/Insert/Delete: O(n) worst case, O(log n) average case\",\n      useCase: \"Basic tree structure, foundation for other tree types.\"\n    },\n    bst: {\n      title: \"Binary Search Tree\",\n      description: \"A binary tree where left child < parent < right child for all nodes.\",\n      complexity: \"Search/Insert/Delete: O(log n) average, O(n) worst case\",\n      useCase: \"Efficient searching, sorting, and range queries.\"\n    },\n    avl: {\n      title: \"AVL Tree\",\n      description: \"Self-balancing BST where heights of subtrees differ by at most 1.\",\n      complexity: \"Search/Insert/Delete: O(log n) guaranteed\",\n      useCase: \"When you need guaranteed logarithmic operations.\"\n    },\n    redblack: {\n      title: \"Red-Black Tree\",\n      description: \"Self-balancing BST with color properties ensuring balance.\",\n      complexity: \"Search/Insert/Delete: O(log n) guaranteed\",\n      useCase: \"Used in many standard libraries (C++ STL, Java TreeMap).\"\n    },\n    heap: {\n      title: \"Binary Heap\",\n      description: \"Complete binary tree with heap property (max/min heap).\",\n      complexity: \"Insert: O(log n), Extract-max: O(log n), Peek: O(1)\",\n      useCase: \"Priority queues, heap sort, graph algorithms.\"\n    },\n    btree: {\n      title: \"B-Tree\",\n      description: \"Self-balancing tree with multiple keys per node.\",\n      complexity: \"Search/Insert/Delete: O(log n)\",\n      useCase: \"Database indexes, file systems.\"\n    },\n    bplus: {\n      title: \"B+ Tree\",\n      description: \"B-Tree variant where all data is stored in leaf nodes.\",\n      complexity: \"Search/Insert/Delete: O(log n), Range queries: O(log n + k)\",\n      useCase: \"Database indexes, especially for range queries.\"\n    }\n  };\n\n  // Tree rendering functions\n  const renderBinaryTree = () => {\n    if (!root) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center h-64 text-gray-500\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(TreePine, {\n            className: \"w-16 h-16 mx-auto mb-4 opacity-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Tree is empty. Add some nodes to get started!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(BinaryTreeRenderer, {\n      root: root\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 12\n    }, this);\n  };\n  const renderHeap = () => {\n    if (heapArray.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center h-64 text-gray-500\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(Layers, {\n            className: \"w-16 h-16 mx-auto mb-4 opacity-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 771,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Heap is empty. Add some elements to get started!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 772,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(HeapRenderer, {\n      heap: heapArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 778,\n      columnNumber: 12\n    }, this);\n  };\n  const renderBTree = () => {\n    if (!bTreeRoot) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center h-64 text-gray-500\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(Database, {\n            className: \"w-16 h-16 mx-auto mb-4 opacity-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"B-Tree is empty. Add some keys to get started!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(BTreeRenderer, {\n      root: bTreeRoot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-white shadow-sm border-b\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-gradient-to-r from-green-500 to-blue-500 rounded-lg\",\n              children: /*#__PURE__*/_jsxDEV(TreePine, {\n                className: \"w-6 h-6 text-white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 804,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 803,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\",\n                children: \"Advanced Tree Visualizer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 807,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"mt-1 text-gray-600\",\n                children: \"Explore all types of trees with interactive animations\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 810,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 802,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowTutorial(!showTutorial),\n              className: \"flex items-center space-x-2 px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(BookOpen, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 818,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Tutorial\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 819,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 814,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowCode(!showCode),\n              className: \"flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(Code, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Code\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 826,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 800,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8\",\n      children: [showTutorial && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-6 border border-green-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(Lightbulb, {\n            className: \"w-5 h-5 text-green-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 838,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-green-900\",\n            children: tutorialContent[treeType].title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 837,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-green-800 mb-4\",\n          children: tutorialContent[treeType].description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-lg p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(Clock, {\n                className: \"w-4 h-4 text-green-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 845,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-semibold text-green-800\",\n                children: \"Time Complexity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 846,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 844,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-green-700\",\n              children: tutorialContent[treeType].complexity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 848,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 843,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-lg p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(Target, {\n                className: \"w-4 h-4 text-blue-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 852,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-semibold text-blue-800\",\n                children: \"Use Case\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 853,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 851,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-blue-700\",\n              children: tutorialContent[treeType].useCase\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 855,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 842,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 836,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-900 mb-4\",\n          children: \"Choose Tree Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-3\",\n          children: [\"binary\", \"bst\", \"avl\", \"redblack\", \"heap\", \"btree\", \"bplus\"].map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setTreeType(type);\n              clearTree();\n            },\n            className: `p-3 rounded-xl border-2 transition-all duration-200 text-sm ${treeType === type ? \"border-green-500 bg-green-50 text-green-700\" : \"border-gray-200 hover:border-gray-300 hover:bg-gray-50\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"font-semibold capitalize\",\n              children: type === \"bst\" ? \"BST\" : type === \"avl\" ? \"AVL\" : type === \"redblack\" ? \"Red-Black\" : type === \"btree\" ? \"B-Tree\" : type === \"bplus\" ? \"B+ Tree\" : type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 878,\n              columnNumber: 17\n            }, this)\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 862,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 lg:grid-cols-4 gap-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-1\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sticky top-8\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900 mb-6\",\n              children: \"Operations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 900,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4 mb-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-sm font-medium text-gray-700 mb-2\",\n                  children: \"Value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 905,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: inputValue,\n                  onChange: e => setInputValue(e.target.value),\n                  className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\",\n                  placeholder: \"Enter value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 906,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 904,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-sm font-medium text-gray-700 mb-2\",\n                  children: \"Search Value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 915,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: searchTerm,\n                  onChange: e => setSearchTerm(e.target.value),\n                  className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\",\n                  placeholder: \"Search for value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 916,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 914,\n                columnNumber: 17\n              }, this), (treeType === \"btree\" || treeType === \"bplus\") && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-sm font-medium text-gray-700 mb-2\",\n                  children: \"B-Tree Order\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 926,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: bTreeOrder,\n                  onChange: e => setBTreeOrder(Number(e.target.value)),\n                  min: \"2\",\n                  max: \"10\",\n                  className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 927,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 925,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 903,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"font-semibold text-gray-700 mb-2\",\n                  children: \"Basic Operations\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 942,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"grid grid-cols-1 gap-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => {\n                      const val = Number.parseInt(inputValue);\n                      if (!isNaN(val)) {\n                        if (treeType === \"heap\") {\n                          insertHeap(val);\n                        } else if (treeType === \"btree\" || treeType === \"bplus\") {\n                          insertBTree(val);\n                        } else if (treeType === \"avl\") {\n                          insertAVL(val);\n                        } else if (treeType === \"redblack\") {\n                          insertRedBlack(val);\n                        } else {\n                          insertBST(val);\n                        }\n                        setInputValue(\"\");\n                      }\n                    },\n                    disabled: !inputValue,\n                    className: \"flex items-center justify-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\",\n                    children: [/*#__PURE__*/_jsxDEV(Plus, {\n                      className: \"w-4 h-4\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 965,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Insert\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 966,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 944,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => {\n                      const val = Number.parseInt(searchTerm);\n                      if (!isNaN(val)) {\n                        searchTree(val);\n                        setSearchTerm(\"\");\n                      }\n                    },\n                    disabled: !searchTerm || !root && heapArray.length === 0 && !bTreeRoot,\n                    className: \"flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\",\n                    children: [/*#__PURE__*/_jsxDEV(Search, {\n                      className: \"w-4 h-4\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 979,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Search\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 980,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 968,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: clearTree,\n                    className: \"flex items-center justify-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\",\n                    children: [/*#__PURE__*/_jsxDEV(RotateCcw, {\n                      className: \"w-4 h-4\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 986,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Clear Tree\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 987,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 982,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 943,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 941,\n                columnNumber: 17\n              }, this), (treeType === \"binary\" || treeType === \"bst\" || treeType === \"avl\" || treeType === \"redblack\") && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"font-semibold text-gray-700 mb-2\",\n                  children: \"Tree Traversals\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 995,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"grid grid-cols-2 gap-2\",\n                  children: [\"inorder\", \"preorder\", \"postorder\", \"levelorder\"].map(traversal => /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => {\n                      setSelectedTraversal(traversal);\n                      performTraversal(traversal);\n                    },\n                    disabled: !root,\n                    className: \"px-3 py-2 text-xs bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\",\n                    children: traversal.charAt(0).toUpperCase() + traversal.slice(1)\n                  }, traversal, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 998,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 996,\n                  columnNumber: 21\n                }, this), traversalResult.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-2 p-2 bg-purple-50 rounded-lg\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-xs font-semibold text-purple-800 mb-1\",\n                    children: [selectedTraversal.charAt(0).toUpperCase() + selectedTraversal.slice(1), \" Result:\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1013,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-xs text-purple-700\",\n                    children: [\"[\", traversalResult.join(\", \"), \"]\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1016,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1012,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 994,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 940,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 899,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 898,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-3 space-y-8\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-between mb-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"text-xl font-bold text-gray-900\",\n                children: tutorialContent[treeType].title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1030,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center space-x-4 text-sm text-gray-600\",\n                children: [treeType === \"heap\" && /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Heap Size: \", heapArray.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1032,\n                  columnNumber: 43\n                }, this), (treeType === \"binary\" || treeType === \"bst\" || treeType === \"avl\" || treeType === \"redblack\") && root && /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Height: \", getHeight(root)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1034,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1031,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1029,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"min-h-[400px] bg-gradient-to-br from-green-50 to-blue-50 rounded-xl p-6 overflow-auto\",\n              children: treeType === \"heap\" ? renderHeap() : treeType === \"btree\" || treeType === \"bplus\" ? renderBTree() : renderBinaryTree()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1039,\n              columnNumber: 15\n            }, this), currentStep && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-6 p-4 bg-gray-50 rounded-lg\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center space-x-2 mb-2\",\n                children: [/*#__PURE__*/_jsxDEV(Zap, {\n                  className: \"w-4 h-4 text-green-600\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1051,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-semibold text-gray-900\",\n                  children: \"Current Step\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1052,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1050,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-gray-700 mb-3\",\n                children: currentStep.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1054,\n                columnNumber: 19\n              }, this), showCode && /*#__PURE__*/_jsxDEV(\"pre\", {\n                className: \"bg-gray-800 text-green-400 p-3 rounded text-sm overflow-x-auto\",\n                children: /*#__PURE__*/_jsxDEV(\"code\", {\n                  children: currentStep.code\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1057,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1056,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1049,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1028,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900 mb-4\",\n              children: \"Operation History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1066,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"max-h-60 overflow-y-auto space-y-2\",\n              children: operationHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-gray-500 italic\",\n                children: \"No operations performed yet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1069,\n                columnNumber: 19\n              }, this) : operationHistory.map((operation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"p-3 bg-gray-50 rounded-lg text-sm text-gray-700 border-l-4 border-green-400\",\n                children: operation\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1072,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1067,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1065,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1026,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 797,\n    columnNumber: 5\n  }, this);\n}\n\n// Binary Tree Renderer Component\n_s(TreeVisualizerPage, \"4OmeGcQc+6KYrH4Cr4FVUr7Wj/g=\");\n_c = TreeVisualizerPage;\nfunction BinaryTreeRenderer({\n  root\n}) {\n  const renderNode = (node, x, y, level) => {\n    if (!node) return null;\n    const isHighlighted = node.isHighlighted;\n    const isNew = node.isNew;\n    const isDeleting = node.isDeleting;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [node.left && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x,\n        y1: y,\n        x2: x - 80 / (level + 1),\n        y2: y + 80,\n        stroke: \"#94a3b8\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1101,\n        columnNumber: 23\n      }, this), node.right && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x,\n        y1: y,\n        x2: x + 80 / (level + 1),\n        y2: y + 80,\n        stroke: \"#94a3b8\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: x,\n        cy: y,\n        r: \"20\",\n        fill: isHighlighted ? \"#fbbf24\" : isNew ? \"#10b981\" : isDeleting ? \"#ef4444\" : node.color === \"red\" ? \"#ef4444\" : node.color === \"black\" ? \"#374151\" : \"#3b82f6\",\n        stroke: isHighlighted ? \"#f59e0b\" : \"#1f2937\",\n        strokeWidth: \"2\",\n        className: \"transition-all duration-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: x,\n        y: y + 5,\n        textAnchor: \"middle\",\n        fill: node.color === \"black\" || isDeleting ? \"white\" : \"white\",\n        fontSize: \"14\",\n        fontWeight: \"bold\",\n        children: node.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1130,\n        columnNumber: 9\n      }, this), node.left && renderNode(node.left, x - 80 / (level + 1), y + 80, level + 1), node.right && renderNode(node.right, x + 80 / (level + 1), y + 80, level + 1)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1099,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"100%\",\n    height: \"400\",\n    viewBox: \"0 0 800 400\",\n    children: renderNode(root, 400, 50, 0)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1149,\n    columnNumber: 5\n  }, this);\n}\n\n// Heap Renderer Component\n_c2 = BinaryTreeRenderer;\nfunction HeapRenderer({\n  heap\n}) {\n  const renderHeapNode = (index, x, y) => {\n    if (index >= heap.length) return null;\n    const node = heap[index];\n    const isHighlighted = node.isHighlighted;\n    const isNew = node.isNew;\n    const isSwapping = node.isSwapping;\n    const leftChildIndex = 2 * index + 1;\n    const rightChildIndex = 2 * index + 2;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [leftChildIndex < heap.length && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x,\n        y1: y,\n        x2: x - 60,\n        y2: y + 60,\n        stroke: \"#94a3b8\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 11\n      }, this), rightChildIndex < heap.length && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x,\n        y1: y,\n        x2: x + 60,\n        y2: y + 60,\n        stroke: \"#94a3b8\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1177,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: x,\n        cy: y,\n        r: \"20\",\n        fill: isHighlighted ? \"#fbbf24\" : isNew ? \"#10b981\" : isSwapping ? \"#f97316\" : \"#8b5cf6\",\n        stroke: \"#1f2937\",\n        strokeWidth: \"2\",\n        className: \"transition-all duration-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: x,\n        y: y + 5,\n        textAnchor: \"middle\",\n        fill: \"white\",\n        fontSize: \"14\",\n        fontWeight: \"bold\",\n        children: node.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: x,\n        y: y - 30,\n        textAnchor: \"middle\",\n        fill: \"#6b7280\",\n        fontSize: \"10\",\n        children: [\"[\", index, \"]\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1197,\n        columnNumber: 9\n      }, this), leftChildIndex < heap.length && renderHeapNode(leftChildIndex, x - 60, y + 60), rightChildIndex < heap.length && renderHeapNode(rightChildIndex, x + 60, y + 60)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1169,\n      columnNumber: 7\n    }, this);\n  };\n  if (heap.length === 0) return null;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"100%\",\n    height: \"400\",\n    viewBox: \"0 0 800 400\",\n    children: renderHeapNode(0, 400, 50)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1211,\n    columnNumber: 5\n  }, this);\n}\n\n// B-Tree Renderer Component\n_c3 = HeapRenderer;\nfunction BTreeRenderer({\n  root\n}) {\n  const renderBTreeNode = (node, x, y, level) => {\n    const isHighlighted = node.isHighlighted;\n    const isNew = node.isNew;\n    const nodeWidth = Math.max(100, node.keys.length * 30 + 20);\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n        x: x - nodeWidth / 2,\n        y: y - 15,\n        width: nodeWidth,\n        height: \"30\",\n        fill: isHighlighted ? \"#fbbf24\" : isNew ? \"#10b981\" : \"#06b6d4\",\n        stroke: \"#1f2937\",\n        strokeWidth: \"2\",\n        rx: \"5\",\n        className: \"transition-all duration-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1228,\n        columnNumber: 9\n      }, this), node.keys.map((key, index) => /*#__PURE__*/_jsxDEV(\"text\", {\n        x: x - nodeWidth / 2 + 15 + index * 30,\n        y: y + 5,\n        fill: \"white\",\n        fontSize: \"12\",\n        fontWeight: \"bold\",\n        children: key\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1242,\n        columnNumber: 11\n      }, this)), node.children.map((child, index) => {\n        const childX = x - nodeWidth / 2 + (index + 1) * (nodeWidth / (node.children.length + 1));\n        const childY = y + 80;\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"line\", {\n            x1: x - nodeWidth / 2 + 15 + index * 30,\n            y1: y + 15,\n            x2: childX,\n            y2: childY - 15,\n            stroke: \"#94a3b8\",\n            strokeWidth: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1262,\n            columnNumber: 15\n          }, this), renderBTreeNode(child, childX, childY, level + 1)]\n        }, child.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1260,\n          columnNumber: 13\n        }, this);\n      })]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1226,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"100%\",\n    height: \"400\",\n    viewBox: \"0 0 800 400\",\n    children: renderBTreeNode(root, 400, 50, 0)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1280,\n    columnNumber: 5\n  }, this);\n}\n_c4 = BTreeRenderer;\nexport default TreeVisualizerPage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"TreeVisualizerPage\");\n$RefreshReg$(_c2, \"BinaryTreeRenderer\");\n$RefreshReg$(_c3, \"HeapRenderer\");\n$RefreshReg$(_c4, \"BTreeRenderer\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","TreePine","Plus","Search","RotateCcw","Code","BookOpen","Lightbulb","Target","Clock","Zap","Database","Layers","jsxDEV","_jsxDEV","TreeVisualizerPage","treeType","setTreeType","root","setRoot","bTreeRoot","setBTreeRoot","heapArray","setHeapArray","inputValue","setInputValue","searchTerm","setSearchTerm","bTreeOrder","setBTreeOrder","operationHistory","setOperationHistory","showCode","setShowCode","showTutorial","setShowTutorial","nodeCounter","setNodeCounter","traversalResult","setTraversalResult","selectedTraversal","setSelectedTraversal","generateNodeId","prev","createTreeNode","value","id","left","right","height","color","isNew","createBTreeNode","keys","isLeaf","children","createHeapNode","index","insertBST","steps","push","type","description","code","newNode","nodeId","insertBSTRecursive","setAnimationSteps","setCurrentStepIndex","setIsAnimating","addToHistory","node","parent","getHeight","getBalance","_node$left","_node$right","updateHeight","_node$left2","_node$right2","Math","max","rotateRight","y","x","T2","rotateLeft","insertAVL","newRoot","insertAVLRecursive","_node$left$value","_node$left4","_node$right$value","_node$right4","_node$left3","_node$right3","balance","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","insertRedBlack","insertRBRecursive","fixRedBlackViolations","insertHeap","newHeap","length","parentIndex","floor","insertBTree","insertBTreeRecursive","i","splice","performTraversal","result","inorderTraversal","preorderTraversal","postorderTraversal","levelorderTraversal","join","_node$left5","_node$right5","_node$left6","_node$right6","_node$left7","_node$right7","queue","current","shift","searchTree","found","searchRecursive","_node$left8","_node$right8","operation","Date","toLocaleTimeString","slice","clearTree","currentStep","animationSteps","currentStepIndex","tutorialContent","binary","title","complexity","useCase","bst","avl","redblack","heap","btree","bplus","renderBinaryTree","className","fileName","lineNumber","columnNumber","BinaryTreeRenderer","renderHeap","HeapRenderer","renderBTree","BTreeRenderer","onClick","map","onChange","e","target","placeholder","min","val","parseInt","isNaN","disabled","traversal","charAt","toUpperCase","_c","renderNode","level","isHighlighted","isDeleting","x1","y1","x2","y2","stroke","strokeWidth","cx","cy","r","fill","textAnchor","fontSize","fontWeight","width","viewBox","_c2","renderHeapNode","isSwapping","leftChildIndex","rightChildIndex","_c3","renderBTreeNode","nodeWidth","rx","key","child","childX","childY","_c4","$RefreshReg$"],"sources":["D:/DSA Website/src/pages/TreeVisualizerPage.tsx"],"sourcesContent":["\"use client\"\n\nimport { useState } from \"react\"\nimport {\n  TreePine,\n  Plus,\n  Search,\n  RotateCcw,\n  Play,\n  Pause,\n  SkipForward,\n  SkipBack,\n  Code,\n  BookOpen,\n  Lightbulb,\n  Target,\n  Clock,\n  Zap,\n  Database,\n  Layers,\n} from \"lucide-react\"\n\n// Tree Node interfaces for different tree types\ninterface TreeNode {\n  id: string\n  value: number\n  left?: TreeNode | null\n  right?: TreeNode | null\n  parent?: TreeNode | null\n  height?: number\n  color?: \"red\" | \"black\" // For Red-Black trees\n  isHighlighted?: boolean\n  isNew?: boolean\n  isDeleting?: boolean\n  level?: number\n  x?: number\n  y?: number\n}\n\ninterface BTreeNode {\n  id: string\n  keys: number[]\n  children: BTreeNode[]\n  isLeaf: boolean\n  parent?: BTreeNode | null\n  isHighlighted?: boolean\n  isNew?: boolean\n  level?: number\n  x?: number\n  y?: number\n}\n\ninterface HeapNode {\n  id: string\n  value: number\n  index: number\n  isHighlighted?: boolean\n  isNew?: boolean\n  isSwapping?: boolean\n  level?: number\n  x?: number\n  y?: number\n}\n\ntype TreeType = \"binary\" | \"bst\" | \"avl\" | \"redblack\" | \"heap\" | \"btree\" | \"bplus\"\ntype TraversalType = \"inorder\" | \"preorder\" | \"postorder\" | \"levelorder\"\n\nfunction TreeVisualizerPage() {\n  const [treeType, setTreeType] = useState<TreeType>(\"binary\")\n  const [root, setRoot] = useState<TreeNode | null>(null)\n  const [bTreeRoot, setBTreeRoot] = useState<BTreeNode | null>(null)\n  const [heapArray, setHeapArray] = useState<HeapNode[]>([])\n  const [inputValue, setInputValue] = useState(\"\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [bTreeOrder, setBTreeOrder] = useState(3) // Minimum degree for B-tree\n\n  // UI states\n  const [operationHistory, setOperationHistory] = useState<string[]>([])\n  const [showCode, setShowCode] = useState(false)\n  const [showTutorial, setShowTutorial] = useState(false)\n  const [nodeCounter, setNodeCounter] = useState(0)\n  const [traversalResult, setTraversalResult] = useState<number[]>([])\n  const [selectedTraversal, setSelectedTraversal] = useState<TraversalType>(\"inorder\")\n\n  // Helper functions\n  const generateNodeId = () => {\n    setNodeCounter((prev) => prev + 1)\n    return `node-${nodeCounter}`\n  }\n\n  const createTreeNode = (value: number): TreeNode => ({\n    id: generateNodeId(),\n    value,\n    left: null,\n    right: null,\n    height: 1,\n    color: \"red\", // Default for Red-Black trees\n    isNew: true,\n  })\n\n  const createBTreeNode = (keys: number[] = [], isLeaf = true): BTreeNode => ({\n    id: generateNodeId(),\n    keys,\n    children: [],\n    isLeaf,\n    isNew: true,\n  })\n\n  const createHeapNode = (value: number, index: number): HeapNode => ({\n    id: generateNodeId(),\n    value,\n    index,\n    isNew: true,\n  })\n\n  // Binary Search Tree Operations\n  const insertBST = async (value: number) => {\n    const steps: AnimationStep[] = []\n\n    steps.push({\n      type: \"highlight\",\n      description: `Inserting value ${value} into Binary Search Tree`,\n      code: `function insert(root, value) {\\n  if (!root) return new Node(value)`,\n    })\n\n    if (!root) {\n      const newNode = createTreeNode(value)\n      setRoot(newNode)\n      steps.push({\n        type: \"insert\",\n        nodeId: newNode.id,\n        description: \"Tree is empty. Creating root node\",\n        code: \"  root = new Node(value)\\n  return root\",\n      })\n    } else {\n      const newNode = await insertBSTRecursive(root, value, steps)\n      setRoot({ ...root })\n    }\n\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value}`,\n      code: \"// Insertion completed\",\n    })\n\n    setAnimationSteps(steps)\n    setCurrentStepIndex(0)\n    setIsAnimating(true)\n    addToHistory(`Inserted ${value} into BST`)\n  }\n\n  const insertBSTRecursive = async (node: TreeNode, value: number, steps: AnimationStep[]): Promise<TreeNode> => {\n    steps.push({\n      type: \"highlight\",\n      nodeId: node.id,\n      description: `Comparing ${value} with ${node.value}`,\n      code: `  if (value < node.value)`,\n    })\n\n    if (value < node.value) {\n      if (!node.left) {\n        const newNode = createTreeNode(value)\n        node.left = newNode\n        newNode.parent = node\n        steps.push({\n          type: \"insert\",\n          nodeId: newNode.id,\n          description: `${value} < ${node.value}, inserting as left child`,\n          code: \"    node.left = new Node(value)\",\n        })\n        return newNode\n      } else {\n        return await insertBSTRecursive(node.left, value, steps)\n      }\n    } else if (value > node.value) {\n      if (!node.right) {\n        const newNode = createTreeNode(value)\n        node.right = newNode\n        newNode.parent = node\n        steps.push({\n          type: \"insert\",\n          nodeId: newNode.id,\n          description: `${value} > ${node.value}, inserting as right child`,\n          code: \"    node.right = new Node(value)\",\n        })\n        return newNode\n      } else {\n        return await insertBSTRecursive(node.right, value, steps)\n      }\n    } else {\n      steps.push({\n        type: \"highlight\",\n        nodeId: node.id,\n        description: `Value ${value} already exists`,\n        code: \"  // Duplicate value, no insertion\",\n      })\n      return node\n    }\n  }\n\n  // AVL Tree Operations\n  const getHeight = (node: TreeNode | null): number => {\n    return node ? node.height || 1 : 0\n  }\n\n  const getBalance = (node: TreeNode | null): number => {\n    return node ? getHeight(node.left ?? null) - getHeight(node.right ?? null) : 0\n  }\n\n  const updateHeight = (node: TreeNode) => {\n    node.height = Math.max(getHeight(node.left ?? null), getHeight(node.right ?? null)) + 1\n  }\n\n  const rotateRight = (y: TreeNode, steps: AnimationStep[]): TreeNode => {\n    const x = y.left!\n    const T2 = x.right\n\n    steps.push({\n      type: \"rotate\",\n      nodeId: y.id,\n      description: `Performing right rotation on node ${y.value}`,\n      code: `// Right rotation\\nlet x = y.left\\ny.left = x.right\\nx.right = y`,\n    })\n\n    // Perform rotation\n    x.right = y\n    y.left = T2\n\n    // Update heights\n    updateHeight(y)\n    updateHeight(x)\n\n    return x\n  }\n\n  const rotateLeft = (x: TreeNode, steps: AnimationStep[]): TreeNode => {\n    const y = x.right!\n    const T2 = y.left\n\n    steps.push({\n      type: \"rotate\",\n      nodeId: x.id,\n      description: `Performing left rotation on node ${x.value}`,\n      code: `// Left rotation\\nlet y = x.right\\nx.right = y.left\\ny.left = x`,\n    })\n\n    // Perform rotation\n    y.left = x\n    x.right = T2\n\n    // Update heights\n    updateHeight(x)\n    updateHeight(y)\n\n    return y\n  }\n\n  const insertAVL = async (value: number) => {\n    const steps: AnimationStep[] = []\n\n    steps.push({\n      type: \"highlight\",\n      description: `Inserting value ${value} into AVL Tree`,\n      code: `function insertAVL(root, value) {`,\n    })\n\n    const newRoot = await insertAVLRecursive(root, value, steps)\n    setRoot(newRoot)\n\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value} with AVL balancing`,\n      code: \"// AVL insertion completed\",\n    })\n\n    setAnimationSteps(steps)\n    setCurrentStepIndex(0)\n    setIsAnimating(true)\n    addToHistory(`Inserted ${value} into AVL tree`)\n  }\n\n  const insertAVLRecursive = async (\n    node: TreeNode | null,\n    value: number,\n    steps: AnimationStep[],\n  ): Promise<TreeNode> => {\n    // Standard BST insertion\n    if (!node) {\n      const newNode = createTreeNode(value)\n      steps.push({\n        type: \"insert\",\n        nodeId: newNode.id,\n        description: `Creating new node with value ${value}`,\n        code: \"  return new Node(value)\",\n      })\n      return newNode\n    }\n\n    steps.push({\n      type: \"highlight\",\n      nodeId: node.id,\n      description: `Comparing ${value} with ${node.value}`,\n      code: `  if (value < node.value)`,\n    })\n\n    if (value < node.value) {\n      node.left = await insertAVLRecursive(node.left ?? null, value, steps)\n    } else if (value > node.value) {\n      node.right = await insertAVLRecursive(node.right ?? null, value, steps)\n    } else {\n      return node // Duplicate values not allowed\n    }\n\n    // Update height\n    updateHeight(node)\n\n    // Get balance factor\n    const balance = getBalance(node)\n\n    steps.push({\n      type: \"highlight\",\n      nodeId: node.id,\n      description: `Balance factor of node ${node.value}: ${balance}`,\n      code: `  balance = height(left) - height(right) = ${balance}`,\n    })\n\n    // Left Left Case\n    if (balance > 1 && value < node.left!.value) {\n      return rotateRight(node, steps)\n    }\n\n    // Right Right Case\n    if (balance < -1 && value > node.right!.value) {\n      return rotateLeft(node, steps)\n    }\n\n    // Left Right Case\n    if (balance > 1 && value > (node.left?.value ?? Number.POSITIVE_INFINITY)) {\n      if (node.left) {\n        node.left = rotateLeft(node.left, steps)\n        return rotateRight(node, steps)\n      } else {\n        return node\n      }\n    }\n\n    // Right Left Case\n    if (balance < -1 && value < (node.right?.value ?? Number.NEGATIVE_INFINITY)) {\n      if (node.right) {\n        node.right = rotateRight(node.right, steps)\n        return rotateLeft(node, steps)\n      } else {\n        return node\n      }\n    }\n\n    return node\n  }\n\n  // Red-Black Tree Operations\n  const insertRedBlack = async (value: number) => {\n    const steps: AnimationStep[] = []\n\n    steps.push({\n      type: \"highlight\",\n      description: `Inserting value ${value} into Red-Black Tree`,\n      code: `function insertRB(root, value) {`,\n    })\n\n    if (!root) {\n      const newNode = createTreeNode(value)\n      newNode.color = \"black\" // Root is always black\n      setRoot(newNode)\n      steps.push({\n        type: \"insert\",\n        nodeId: newNode.id,\n        description: \"Creating root node (colored black)\",\n        code: \"  root = new Node(value)\\n  root.color = BLACK\",\n      })\n    } else {\n      const newNode = await insertRBRecursive(root, value, steps)\n      // Fix violations\n      await fixRedBlackViolations(newNode, steps)\n      setRoot({ ...root })\n    }\n\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value} into Red-Black tree`,\n      code: \"// Red-Black insertion completed\",\n    })\n\n    setAnimationSteps(steps)\n    setCurrentStepIndex(0)\n    setIsAnimating(true)\n    addToHistory(`Inserted ${value} into Red-Black tree`)\n  }\n\n  const insertRBRecursive = async (node: TreeNode, value: number, steps: AnimationStep[]): Promise<TreeNode> => {\n    if (value < node.value) {\n      if (!node.left) {\n        const newNode = createTreeNode(value)\n        newNode.color = \"red\" // New nodes are red\n        node.left = newNode\n        newNode.parent = node\n        steps.push({\n          type: \"insert\",\n          nodeId: newNode.id,\n          description: `Inserting ${value} as left child (colored red)`,\n          code: \"  node.left = new Node(value)\\n  node.left.color = RED\",\n        })\n        return newNode\n      } else {\n        return await insertRBRecursive(node.left, value, steps)\n      }\n    } else if (value > node.value) {\n      if (!node.right) {\n        const newNode = createTreeNode(value)\n        newNode.color = \"red\" // New nodes are red\n        node.right = newNode\n        newNode.parent = node\n        steps.push({\n          type: \"insert\",\n          nodeId: newNode.id,\n          description: `Inserting ${value} as right child (colored red)`,\n          code: \"  node.right = new Node(value)\\n  node.right.color = RED\",\n        })\n        return newNode\n      } else {\n        return await insertRBRecursive(node.right, value, steps)\n      }\n    }\n    return node\n  }\n\n  const fixRedBlackViolations = async (node: TreeNode, steps: AnimationStep[]) => {\n    // Implementation of Red-Black tree fix-up would go here\n    // This is a simplified version\n    if (node.parent && node.parent.color === \"red\") {\n      steps.push({\n        type: \"recolor\",\n        nodeId: node.id,\n        description: \"Fixing Red-Black tree violations\",\n        code: \"// Fix red-red violation\",\n      })\n    }\n  }\n\n  // Heap Operations\n  const insertHeap = async (value: number) => {\n    const steps: AnimationStep[] = []\n    const newHeap = [...heapArray]\n    const newNode = createHeapNode(value, newHeap.length)\n    newHeap.push(newNode)\n\n    steps.push({\n      type: \"insert\",\n      nodeId: newNode.id,\n      description: `Inserting ${value} at the end of heap`,\n      code: `heap.push(${value})`,\n    })\n\n    // Heapify up\n    let index = newHeap.length - 1\n    while (index > 0) {\n      const parentIndex = Math.floor((index - 1) / 2)\n      if (newHeap[index].value <= newHeap[parentIndex].value) break\n\n      steps.push({\n        type: \"heapify\",\n        nodeId: newHeap[index].id,\n        description: `Swapping ${newHeap[index].value} with parent ${newHeap[parentIndex].value}`,\n        code: `swap(heap[${index}], heap[${parentIndex}])`,\n      })\n\n      // Swap\n      ;[newHeap[index], newHeap[parentIndex]] = [newHeap[parentIndex], newHeap[index]]\n      newHeap[index].index = index\n      newHeap[parentIndex].index = parentIndex\n      index = parentIndex\n    }\n\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value} into max heap`,\n      code: \"// Heap insertion completed\",\n    })\n\n    setHeapArray(newHeap)\n    setAnimationSteps(steps)\n    setCurrentStepIndex(0)\n    setIsAnimating(true)\n    addToHistory(`Inserted ${value} into heap`)\n  }\n\n  // B-Tree Operations\n  const insertBTree = async (value: number) => {\n    const steps: AnimationStep[] = []\n\n    steps.push({\n      type: \"highlight\",\n      description: `Inserting value ${value} into B-Tree (order ${bTreeOrder})`,\n      code: `function insertBTree(root, value) {`,\n    })\n\n    if (!bTreeRoot) {\n      const newNode = createBTreeNode([value], true)\n      setBTreeRoot(newNode)\n      steps.push({\n        type: \"insert\",\n        nodeId: newNode.id,\n        description: \"Creating root node\",\n        code: \"  root = new BTreeNode([value])\",\n      })\n    } else {\n      await insertBTreeRecursive(bTreeRoot, value, steps)\n      setBTreeRoot({ ...bTreeRoot })\n    }\n\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value} into B-Tree`,\n      code: \"// B-Tree insertion completed\",\n    })\n\n    setAnimationSteps(steps)\n    setCurrentStepIndex(0)\n    setIsAnimating(true)\n    addToHistory(`Inserted ${value} into B-Tree`)\n  }\n\n  const insertBTreeRecursive = async (node: BTreeNode, value: number, steps: AnimationStep[]) => {\n    // Find the correct position to insert\n    let i = 0\n    while (i < node.keys.length && value > node.keys[i]) {\n      i++\n    }\n\n    if (node.isLeaf) {\n      // Insert in leaf node\n      node.keys.splice(i, 0, value)\n      steps.push({\n        type: \"insert\",\n        nodeId: node.id,\n        description: `Inserting ${value} into leaf node`,\n        code: `node.keys.insert(${i}, ${value})`,\n      })\n\n      // Check if node is full\n      if (node.keys.length >= 2 * bTreeOrder - 1) {\n        steps.push({\n          type: \"highlight\",\n          nodeId: node.id,\n          description: \"Node is full, splitting required\",\n          code: \"// Node overflow, split needed\",\n        })\n      }\n    } else {\n      // Recursively insert in child\n      await insertBTreeRecursive(node.children[i], value, steps)\n    }\n  }\n\n  // Tree Traversals\n  const performTraversal = (type: TraversalType) => {\n    const result: number[] = []\n\n    switch (type) {\n      case \"inorder\":\n        inorderTraversal(root, result)\n        break\n      case \"preorder\":\n        preorderTraversal(root, result)\n        break\n      case \"postorder\":\n        postorderTraversal(root, result)\n        break\n      case \"levelorder\":\n        levelorderTraversal(root, result)\n        break\n    }\n\n    setTraversalResult(result)\n    addToHistory(`Performed ${type} traversal: [${result.join(\", \")}]`)\n  }\n\n  const inorderTraversal = (node: TreeNode | null, result: number[]) => {\n    if (node) {\n      inorderTraversal(node.left ?? null, result)\n      result.push(node.value)\n      inorderTraversal(node.right ?? null, result)\n    }\n  }\n\n  const preorderTraversal = (node: TreeNode | null, result: number[]) => {\n    if (node) {\n      result.push(node.value)\n      preorderTraversal(node.left ?? null, result)\n      preorderTraversal(node.right ?? null, result)\n    }\n  }\n\n  const postorderTraversal = (node: TreeNode | null, result: number[]) => {\n    if (node) {\n      postorderTraversal(node.left ?? null, result)\n      postorderTraversal(node.right ?? null, result)\n      result.push(node.value)\n    }\n  }\n\n  const levelorderTraversal = (node: TreeNode | null, result: number[]) => {\n    if (!node) return\n    const queue = [node]\n    while (queue.length > 0) {\n      const current = queue.shift()!\n      result.push(current.value)\n      if (current.left) queue.push(current.left)\n      if (current.right) queue.push(current.right)\n    }\n  }\n\n  // Search operation\n  const searchTree = async (value: number) => {\n    if (!root) {\n      addToHistory(\"Cannot search in empty tree\")\n      return\n    }\n\n    const steps: AnimationStep[] = []\n    let found = false\n\n    const searchRecursive = (node: TreeNode | null): boolean => {\n      if (!node) return false\n\n      steps.push({\n        type: \"highlight\",\n        nodeId: node.id,\n        description: `Comparing search value ${value} with node value ${node.value}`,\n        code: `if (value === node.value) return true`,\n      })\n\n      if (node.value === value) {\n        found = true\n        steps.push({\n          type: \"highlight\",\n          nodeId: node.id,\n          description: `Found value ${value}!`,\n          code: `// Value found at node ${node.value}`,\n        })\n        return true\n      } else if (value < node.value) {\n        steps.push({\n          type: \"highlight\",\n          nodeId: node.id,\n          description: `${value} < ${node.value}, searching left subtree`,\n          code: `return search(node.left, value)`,\n        })\n        return searchRecursive(node.left ?? null)\n      } else {\n        steps.push({\n          type: \"highlight\",\n          nodeId: node.id,\n          description: `${value} > ${node.value}, searching right subtree`,\n          code: `return search(node.right, value)`,\n        })\n        return searchRecursive(node.right ?? null)\n      }\n    }\n\n    searchRecursive(root)\n\n    if (!found) {\n      steps.push({\n        type: \"complete\",\n        description: `Value ${value} not found in tree`,\n        code: \"// Search completed - value not found\",\n      })\n    }\n\n    setAnimationSteps(steps)\n    setCurrentStepIndex(0)\n    setIsAnimating(true)\n    addToHistory(`Searched for ${value} - ${found ? \"found\" : \"not found\"}`)\n  }\n\n  const addToHistory = (operation: string) => {\n    setOperationHistory((prev) => [`${new Date().toLocaleTimeString()}: ${operation}`, ...prev.slice(0, 19)])\n  }\n\n  // Clear tree\n  const clearTree = () => {\n    setRoot(null)\n    setBTreeRoot(null)\n    setHeapArray([])\n    setAnimationSteps([])\n    setOperationHistory([])\n    setTraversalResult([])\n    addToHistory(\"Tree cleared\")\n  }\n\n  // Get current step info\n  const currentStep = animationSteps[currentStepIndex]\n\n  // Tutorial content\n  const tutorialContent = {\n    binary: {\n      title: \"Binary Tree\",\n      description: \"A tree where each node has at most two children (left and right).\",\n      complexity: \"Search/Insert/Delete: O(n) worst case, O(log n) average case\",\n      useCase: \"Basic tree structure, foundation for other tree types.\",\n    },\n    bst: {\n      title: \"Binary Search Tree\",\n      description: \"A binary tree where left child < parent < right child for all nodes.\",\n      complexity: \"Search/Insert/Delete: O(log n) average, O(n) worst case\",\n      useCase: \"Efficient searching, sorting, and range queries.\",\n    },\n    avl: {\n      title: \"AVL Tree\",\n      description: \"Self-balancing BST where heights of subtrees differ by at most 1.\",\n      complexity: \"Search/Insert/Delete: O(log n) guaranteed\",\n      useCase: \"When you need guaranteed logarithmic operations.\",\n    },\n    redblack: {\n      title: \"Red-Black Tree\",\n      description: \"Self-balancing BST with color properties ensuring balance.\",\n      complexity: \"Search/Insert/Delete: O(log n) guaranteed\",\n      useCase: \"Used in many standard libraries (C++ STL, Java TreeMap).\",\n    },\n    heap: {\n      title: \"Binary Heap\",\n      description: \"Complete binary tree with heap property (max/min heap).\",\n      complexity: \"Insert: O(log n), Extract-max: O(log n), Peek: O(1)\",\n      useCase: \"Priority queues, heap sort, graph algorithms.\",\n    },\n    btree: {\n      title: \"B-Tree\",\n      description: \"Self-balancing tree with multiple keys per node.\",\n      complexity: \"Search/Insert/Delete: O(log n)\",\n      useCase: \"Database indexes, file systems.\",\n    },\n    bplus: {\n      title: \"B+ Tree\",\n      description: \"B-Tree variant where all data is stored in leaf nodes.\",\n      complexity: \"Search/Insert/Delete: O(log n), Range queries: O(log n + k)\",\n      useCase: \"Database indexes, especially for range queries.\",\n    },\n  }\n\n  // Tree rendering functions\n  const renderBinaryTree = () => {\n    if (!root) {\n      return (\n        <div className=\"flex items-center justify-center h-64 text-gray-500\">\n          <div className=\"text-center\">\n            <TreePine className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n            <p>Tree is empty. Add some nodes to get started!</p>\n          </div>\n        </div>\n      )\n    }\n\n    return <BinaryTreeRenderer root={root} />\n  }\n\n  const renderHeap = () => {\n    if (heapArray.length === 0) {\n      return (\n        <div className=\"flex items-center justify-center h-64 text-gray-500\">\n          <div className=\"text-center\">\n            <Layers className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n            <p>Heap is empty. Add some elements to get started!</p>\n          </div>\n        </div>\n      )\n    }\n\n    return <HeapRenderer heap={heapArray} />\n  }\n\n  const renderBTree = () => {\n    if (!bTreeRoot) {\n      return (\n        <div className=\"flex items-center justify-center h-64 text-gray-500\">\n          <div className=\"text-center\">\n            <Database className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n            <p>B-Tree is empty. Add some keys to get started!</p>\n          </div>\n        </div>\n      )\n    }\n\n    return <BTreeRenderer root={bTreeRoot} />\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-gradient-to-r from-green-500 to-blue-500 rounded-lg\">\n                <TreePine className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n                  Advanced Tree Visualizer\n                </h1>\n                <p className=\"mt-1 text-gray-600\">Explore all types of trees with interactive animations</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={() => setShowTutorial(!showTutorial)}\n                className=\"flex items-center space-x-2 px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors\"\n              >\n                <BookOpen className=\"w-4 h-4\" />\n                <span>Tutorial</span>\n              </button>\n              <button\n                onClick={() => setShowCode(!showCode)}\n                className=\"flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors\"\n              >\n                <Code className=\"w-4 h-4\" />\n                <span>Code</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8\">\n        {/* Tutorial Panel */}\n        {showTutorial && (\n          <div className=\"mb-8 bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-6 border border-green-200\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <Lightbulb className=\"w-5 h-5 text-green-600\" />\n              <h2 className=\"text-xl font-bold text-green-900\">{tutorialContent[treeType].title}</h2>\n            </div>\n            <p className=\"text-green-800 mb-4\">{tutorialContent[treeType].description}</p>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"bg-white rounded-lg p-4\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <Clock className=\"w-4 h-4 text-green-600\" />\n                  <span className=\"font-semibold text-green-800\">Time Complexity</span>\n                </div>\n                <p className=\"text-sm text-green-700\">{tutorialContent[treeType].complexity}</p>\n              </div>\n              <div className=\"bg-white rounded-lg p-4\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <Target className=\"w-4 h-4 text-blue-600\" />\n                  <span className=\"font-semibold text-blue-800\">Use Case</span>\n                </div>\n                <p className=\"text-sm text-blue-700\">{tutorialContent[treeType].useCase}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Tree Type Selector */}\n        <div className=\"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Choose Tree Type</h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-3\">\n            {([\"binary\", \"bst\", \"avl\", \"redblack\", \"heap\", \"btree\", \"bplus\"] as TreeType[]).map((type) => (\n              <button\n                key={type}\n                onClick={() => {\n                  setTreeType(type)\n                  clearTree()\n                }}\n                className={`p-3 rounded-xl border-2 transition-all duration-200 text-sm ${\n                  treeType === type\n                    ? \"border-green-500 bg-green-50 text-green-700\"\n                    : \"border-gray-200 hover:border-gray-300 hover:bg-gray-50\"\n                }`}\n              >\n                <div className=\"font-semibold capitalize\">\n                  {type === \"bst\"\n                    ? \"BST\"\n                    : type === \"avl\"\n                      ? \"AVL\"\n                      : type === \"redblack\"\n                        ? \"Red-Black\"\n                        : type === \"btree\"\n                          ? \"B-Tree\"\n                          : type === \"bplus\"\n                            ? \"B+ Tree\"\n                            : type}\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Controls Panel */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sticky top-8\">\n              <h2 className=\"text-xl font-bold text-gray-900 mb-6\">Operations</h2>\n\n              {/* Input Controls */}\n              <div className=\"space-y-4 mb-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Value</label>\n                  <input\n                    type=\"number\"\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\"\n                    placeholder=\"Enter value\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Search Value</label>\n                  <input\n                    type=\"number\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\"\n                    placeholder=\"Search for value\"\n                  />\n                </div>\n                {(treeType === \"btree\" || treeType === \"bplus\") && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">B-Tree Order</label>\n                    <input\n                      type=\"number\"\n                      value={bTreeOrder}\n                      onChange={(e) => setBTreeOrder(Number(e.target.value))}\n                      min=\"2\"\n                      max=\"10\"\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              {/* Operation Buttons */}\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold text-gray-700 mb-2\">Basic Operations</h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    <button\n                      onClick={() => {\n                        const val = Number.parseInt(inputValue)\n                        if (!isNaN(val)) {\n                          if (treeType === \"heap\") {\n                            insertHeap(val)\n                          } else if (treeType === \"btree\" || treeType === \"bplus\") {\n                            insertBTree(val)\n                          } else if (treeType === \"avl\") {\n                            insertAVL(val)\n                          } else if (treeType === \"redblack\") {\n                            insertRedBlack(val)\n                          } else {\n                            insertBST(val)\n                          }\n                          setInputValue(\"\")\n                        }\n                      }}\n                      disabled={!inputValue}\n                      className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                      <span>Insert</span>\n                    </button>\n                    <button\n                      onClick={() => {\n                        const val = Number.parseInt(searchTerm)\n                        if (!isNaN(val)) {\n                          searchTree(val)\n                          setSearchTerm(\"\")\n                        }\n                      }}\n                      disabled={!searchTerm || (!root && heapArray.length === 0 && !bTreeRoot)}\n                      className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                    >\n                      <Search className=\"w-4 h-4\" />\n                      <span>Search</span>\n                    </button>\n                    <button\n                      onClick={clearTree}\n                      className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n                    >\n                      <RotateCcw className=\"w-4 h-4\" />\n                      <span>Clear Tree</span>\n                    </button>\n                  </div>\n                </div>\n\n                {/* Traversal Operations (only for binary trees) */}\n                {(treeType === \"binary\" || treeType === \"bst\" || treeType === \"avl\" || treeType === \"redblack\") && (\n                  <div>\n                    <h3 className=\"font-semibold text-gray-700 mb-2\">Tree Traversals</h3>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      {([\"inorder\", \"preorder\", \"postorder\", \"levelorder\"] as TraversalType[]).map((traversal) => (\n                        <button\n                          key={traversal}\n                          onClick={() => {\n                            setSelectedTraversal(traversal)\n                            performTraversal(traversal)\n                          }}\n                          disabled={!root}\n                          className=\"px-3 py-2 text-xs bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                        >\n                          {traversal.charAt(0).toUpperCase() + traversal.slice(1)}\n                        </button>\n                      ))}\n                    </div>\n                    {traversalResult.length > 0 && (\n                      <div className=\"mt-2 p-2 bg-purple-50 rounded-lg\">\n                        <div className=\"text-xs font-semibold text-purple-800 mb-1\">\n                          {selectedTraversal.charAt(0).toUpperCase() + selectedTraversal.slice(1)} Result:\n                        </div>\n                        <div className=\"text-xs text-purple-700\">[{traversalResult.join(\", \")}]</div>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Visualization Panel */}\n          <div className=\"lg:col-span-3 space-y-8\">\n            {/* Main Visualization */}\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-bold text-gray-900\">{tutorialContent[treeType].title}</h2>\n                <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                  {treeType === \"heap\" && <span>Heap Size: {heapArray.length}</span>}\n                  {(treeType === \"binary\" || treeType === \"bst\" || treeType === \"avl\" || treeType === \"redblack\") &&\n                    root && <span>Height: {getHeight(root)}</span>}\n                </div>\n              </div>\n\n              {/* Tree Visualization */}\n              <div className=\"min-h-[400px] bg-gradient-to-br from-green-50 to-blue-50 rounded-xl p-6 overflow-auto\">\n                {treeType === \"heap\"\n                  ? renderHeap()\n                  : treeType === \"btree\" || treeType === \"bplus\"\n                    ? renderBTree()\n                    : renderBinaryTree()}\n              </div>\n\n              {/* Current Step Information */}\n              {currentStep && (\n                <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Zap className=\"w-4 h-4 text-green-600\" />\n                    <span className=\"font-semibold text-gray-900\">Current Step</span>\n                  </div>\n                  <p className=\"text-gray-700 mb-3\">{currentStep.description}</p>\n                  {showCode && (\n                    <pre className=\"bg-gray-800 text-green-400 p-3 rounded text-sm overflow-x-auto\">\n                      <code>{currentStep.code}</code>\n                    </pre>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Operation History */}\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Operation History</h2>\n              <div className=\"max-h-60 overflow-y-auto space-y-2\">\n                {operationHistory.length === 0 ? (\n                  <p className=\"text-gray-500 italic\">No operations performed yet</p>\n                ) : (\n                  operationHistory.map((operation, index) => (\n                    <div\n                      key={index}\n                      className=\"p-3 bg-gray-50 rounded-lg text-sm text-gray-700 border-l-4 border-green-400\"\n                    >\n                      {operation}\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n\n// Binary Tree Renderer Component\nfunction BinaryTreeRenderer({ root }: { root: TreeNode }) {\n  const renderNode = (node: TreeNode | null, x: number, y: number, level: number): JSX.Element | null => {\n    if (!node) return null\n\n    const isHighlighted = node.isHighlighted\n    const isNew = node.isNew\n    const isDeleting = node.isDeleting\n\n    return (\n      <g key={node.id}>\n        {/* Left child connection */}\n        {node.left && <line x1={x} y1={y} x2={x - 80 / (level + 1)} y2={y + 80} stroke=\"#94a3b8\" strokeWidth=\"2\" />}\n\n        {/* Right child connection */}\n        {node.right && <line x1={x} y1={y} x2={x + 80 / (level + 1)} y2={y + 80} stroke=\"#94a3b8\" strokeWidth=\"2\" />}\n\n        {/* Node circle */}\n        <circle\n          cx={x}\n          cy={y}\n          r=\"20\"\n          fill={\n            isHighlighted\n              ? \"#fbbf24\"\n              : isNew\n                ? \"#10b981\"\n                : isDeleting\n                  ? \"#ef4444\"\n                  : node.color === \"red\"\n                    ? \"#ef4444\"\n                    : node.color === \"black\"\n                      ? \"#374151\"\n                      : \"#3b82f6\"\n          }\n          stroke={isHighlighted ? \"#f59e0b\" : \"#1f2937\"}\n          strokeWidth=\"2\"\n          className=\"transition-all duration-300\"\n        />\n\n        {/* Node value */}\n        <text\n          x={x}\n          y={y + 5}\n          textAnchor=\"middle\"\n          fill={node.color === \"black\" || isDeleting ? \"white\" : \"white\"}\n          fontSize=\"14\"\n          fontWeight=\"bold\"\n        >\n          {node.value}\n        </text>\n\n        {/* Recursively render children */}\n        {node.left && renderNode(node.left, x - 80 / (level + 1), y + 80, level + 1)}\n        {node.right && renderNode(node.right, x + 80 / (level + 1), y + 80, level + 1)}\n      </g>\n    )\n  }\n\n  return (\n    <svg width=\"100%\" height=\"400\" viewBox=\"0 0 800 400\">\n      {renderNode(root, 400, 50, 0)}\n    </svg>\n  )\n}\n\n// Heap Renderer Component\nfunction HeapRenderer({ heap }: { heap: HeapNode[] }) {\n  const renderHeapNode = (index: number, x: number, y: number): JSX.Element | null => {\n    if (index >= heap.length) return null\n\n    const node = heap[index]\n    const isHighlighted = node.isHighlighted\n    const isNew = node.isNew\n    const isSwapping = node.isSwapping\n\n    const leftChildIndex = 2 * index + 1\n    const rightChildIndex = 2 * index + 2\n\n    return (\n      <g key={node.id}>\n        {/* Left child connection */}\n        {leftChildIndex < heap.length && (\n          <line x1={x} y1={y} x2={x - 60} y2={y + 60} stroke=\"#94a3b8\" strokeWidth=\"2\" />\n        )}\n\n        {/* Right child connection */}\n        {rightChildIndex < heap.length && (\n          <line x1={x} y1={y} x2={x + 60} y2={y + 60} stroke=\"#94a3b8\" strokeWidth=\"2\" />\n        )}\n\n        {/* Node circle */}\n        <circle\n          cx={x}\n          cy={y}\n          r=\"20\"\n          fill={isHighlighted ? \"#fbbf24\" : isNew ? \"#10b981\" : isSwapping ? \"#f97316\" : \"#8b5cf6\"}\n          stroke=\"#1f2937\"\n          strokeWidth=\"2\"\n          className=\"transition-all duration-300\"\n        />\n\n        {/* Node value */}\n        <text x={x} y={y + 5} textAnchor=\"middle\" fill=\"white\" fontSize=\"14\" fontWeight=\"bold\">\n          {node.value}\n        </text>\n\n        {/* Array index */}\n        <text x={x} y={y - 30} textAnchor=\"middle\" fill=\"#6b7280\" fontSize=\"10\">\n          [{index}]\n        </text>\n\n        {/* Recursively render children */}\n        {leftChildIndex < heap.length && renderHeapNode(leftChildIndex, x - 60, y + 60)}\n        {rightChildIndex < heap.length && renderHeapNode(rightChildIndex, x + 60, y + 60)}\n      </g>\n    )\n  }\n\n  if (heap.length === 0) return null\n\n  return (\n    <svg width=\"100%\" height=\"400\" viewBox=\"0 0 800 400\">\n      {renderHeapNode(0, 400, 50)}\n    </svg>\n  )\n}\n\n// B-Tree Renderer Component\nfunction BTreeRenderer({ root }: { root: BTreeNode }) {\n  const renderBTreeNode = (node: BTreeNode, x: number, y: number, level: number): JSX.Element => {\n    const isHighlighted = node.isHighlighted\n    const isNew = node.isNew\n\n    const nodeWidth = Math.max(100, node.keys.length * 30 + 20)\n\n    return (\n      <g key={node.id}>\n        {/* Node rectangle */}\n        <rect\n          x={x - nodeWidth / 2}\n          y={y - 15}\n          width={nodeWidth}\n          height=\"30\"\n          fill={isHighlighted ? \"#fbbf24\" : isNew ? \"#10b981\" : \"#06b6d4\"}\n          stroke=\"#1f2937\"\n          strokeWidth=\"2\"\n          rx=\"5\"\n          className=\"transition-all duration-300\"\n        />\n\n        {/* Keys */}\n        {node.keys.map((key, index) => (\n          <text\n            key={index}\n            x={x - nodeWidth / 2 + 15 + index * 30}\n            y={y + 5}\n            fill=\"white\"\n            fontSize=\"12\"\n            fontWeight=\"bold\"\n          >\n            {key}\n          </text>\n        ))}\n\n        {/* Children connections and rendering */}\n        {node.children.map((child, index) => {\n          const childX = x - nodeWidth / 2 + (index + 1) * (nodeWidth / (node.children.length + 1))\n          const childY = y + 80\n\n          return (\n            <g key={child.id}>\n              {/* Connection line */}\n              <line\n                x1={x - nodeWidth / 2 + 15 + index * 30}\n                y1={y + 15}\n                x2={childX}\n                y2={childY - 15}\n                stroke=\"#94a3b8\"\n                strokeWidth=\"2\"\n              />\n              {/* Recursive child rendering */}\n              {renderBTreeNode(child, childX, childY, level + 1)}\n            </g>\n          )\n        })}\n      </g>\n    )\n  }\n\n  return (\n    <svg width=\"100%\" height=\"400\" viewBox=\"0 0 800 400\">\n      {renderBTreeNode(root, 400, 50, 0)}\n    </svg>\n  )\n}\n\nexport default TreeVisualizerPage\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}