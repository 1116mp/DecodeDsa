{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\DSA Website\\\\src\\\\pages\\\\TreeVisualizerPage.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { TreePine, Plus, Search, RotateCcw, Play, Pause, SkipForward, SkipBack, Code, BookOpen, Lightbulb, Target, Clock, Zap, Database, Layers } from \"lucide-react\";\n\n// Tree Node interfaces for different tree types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TreeVisualizerPage() {\n  _s();\n  const [treeType, setTreeType] = useState(\"binary\");\n  const [root, setRoot] = useState(null);\n  const [bTreeRoot, setBTreeRoot] = useState(null);\n  const [heapArray, setHeapArray] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [bTreeOrder, setBTreeOrder] = useState(3); // Minimum degree for B-tree\n\n  // Animation states\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [animationSteps, setAnimationSteps] = useState([]);\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n  const [animationSpeed, setAnimationSpeed] = useState(1000);\n  const [autoPlay, setAutoPlay] = useState(false);\n\n  // UI states\n  const [operationHistory, setOperationHistory] = useState([]);\n  const [showCode, setShowCode] = useState(false);\n  const [showTutorial, setShowTutorial] = useState(false);\n  const [nodeCounter, setNodeCounter] = useState(0);\n  const [traversalResult, setTraversalResult] = useState([]);\n  const [selectedTraversal, setSelectedTraversal] = useState(\"inorder\");\n\n  // Auto-play animation\n  useEffect(() => {\n    if (autoPlay && isAnimating && currentStepIndex < animationSteps.length - 1) {\n      const timer = setTimeout(() => {\n        setCurrentStepIndex(prev => prev + 1);\n      }, animationSpeed);\n      return () => clearTimeout(timer);\n    } else if (currentStepIndex >= animationSteps.length - 1) {\n      setAutoPlay(false);\n      setIsAnimating(false);\n    }\n  }, [autoPlay, isAnimating, currentStepIndex, animationSteps.length, animationSpeed]);\n\n  // Helper functions\n  const generateNodeId = () => {\n    setNodeCounter(prev => prev + 1);\n    return `node-${nodeCounter}`;\n  };\n  const createTreeNode = value => ({\n    id: generateNodeId(),\n    value,\n    left: null,\n    right: null,\n    height: 1,\n    color: \"red\",\n    // Default for Red-Black trees\n    isNew: true\n  });\n  const createBTreeNode = (keys = [], isLeaf = true) => ({\n    id: generateNodeId(),\n    keys,\n    children: [],\n    isLeaf,\n    isNew: true\n  });\n  const createHeapNode = (value, index) => ({\n    id: generateNodeId(),\n    value,\n    index,\n    isNew: true\n  });\n\n  // Binary Search Tree Operations\n  const insertBST = async value => {\n    const steps = [];\n    steps.push({\n      type: \"highlight\",\n      description: `Inserting value ${value} into Binary Search Tree`,\n      code: `function insert(root, value) {\\n  if (!root) return new Node(value)`\n    });\n    if (!root) {\n      const newNode = createTreeNode(value);\n      setRoot(newNode);\n      steps.push({\n        type: \"insert\",\n        nodeId: newNode.id,\n        description: \"Tree is empty. Creating root node\",\n        code: \"  root = new Node(value)\\n  return root\"\n      });\n    } else {\n      const newNode = await insertBSTRecursive(root, value, steps);\n      setRoot({\n        ...root\n      });\n    }\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value}`,\n      code: \"// Insertion completed\"\n    });\n    setAnimationSteps(steps);\n    setCurrentStepIndex(0);\n    setIsAnimating(true);\n    addToHistory(`Inserted ${value} into BST`);\n  };\n  const insertBSTRecursive = async (node, value, steps) => {\n    steps.push({\n      type: \"highlight\",\n      nodeId: node.id,\n      description: `Comparing ${value} with ${node.value}`,\n      code: `  if (value < node.value)`\n    });\n    if (value < node.value) {\n      if (!node.left) {\n        const newNode = createTreeNode(value);\n        node.left = newNode;\n        newNode.parent = node;\n        steps.push({\n          type: \"insert\",\n          nodeId: newNode.id,\n          description: `${value} < ${node.value}, inserting as left child`,\n          code: \"    node.left = new Node(value)\"\n        });\n        return newNode;\n      } else {\n        return await insertBSTRecursive(node.left, value, steps);\n      }\n    } else if (value > node.value) {\n      if (!node.right) {\n        const newNode = createTreeNode(value);\n        node.right = newNode;\n        newNode.parent = node;\n        steps.push({\n          type: \"insert\",\n          nodeId: newNode.id,\n          description: `${value} > ${node.value}, inserting as right child`,\n          code: \"    node.right = new Node(value)\"\n        });\n        return newNode;\n      } else {\n        return await insertBSTRecursive(node.right, value, steps);\n      }\n    } else {\n      steps.push({\n        type: \"highlight\",\n        nodeId: node.id,\n        description: `Value ${value} already exists`,\n        code: \"  // Duplicate value, no insertion\"\n      });\n      return node;\n    }\n  };\n\n  // AVL Tree Operations\n  const getHeight = node => {\n    return node ? node.height || 1 : 0;\n  };\n  const getBalance = node => {\n    var _node$left, _node$right;\n    return node ? getHeight((_node$left = node.left) !== null && _node$left !== void 0 ? _node$left : null) - getHeight((_node$right = node.right) !== null && _node$right !== void 0 ? _node$right : null) : 0;\n  };\n  const updateHeight = node => {\n    var _node$left2, _node$right2;\n    node.height = Math.max(getHeight((_node$left2 = node.left) !== null && _node$left2 !== void 0 ? _node$left2 : null), getHeight((_node$right2 = node.right) !== null && _node$right2 !== void 0 ? _node$right2 : null)) + 1;\n  };\n  const rotateRight = (y, steps) => {\n    const x = y.left;\n    const T2 = x.right;\n    steps.push({\n      type: \"rotate\",\n      nodeId: y.id,\n      description: `Performing right rotation on node ${y.value}`,\n      code: `// Right rotation\\nlet x = y.left\\ny.left = x.right\\nx.right = y`\n    });\n\n    // Perform rotation\n    x.right = y;\n    y.left = T2;\n\n    // Update heights\n    updateHeight(y);\n    updateHeight(x);\n    return x;\n  };\n  const rotateLeft = (x, steps) => {\n    const y = x.right;\n    const T2 = y.left;\n    steps.push({\n      type: \"rotate\",\n      nodeId: x.id,\n      description: `Performing left rotation on node ${x.value}`,\n      code: `// Left rotation\\nlet y = x.right\\nx.right = y.left\\ny.left = x`\n    });\n\n    // Perform rotation\n    y.left = x;\n    x.right = T2;\n\n    // Update heights\n    updateHeight(x);\n    updateHeight(y);\n    return y;\n  };\n  const insertAVL = async value => {\n    const steps = [];\n    steps.push({\n      type: \"highlight\",\n      description: `Inserting value ${value} into AVL Tree`,\n      code: `function insertAVL(root, value) {`\n    });\n    const newRoot = await insertAVLRecursive(root, value, steps);\n    setRoot(newRoot);\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value} with AVL balancing`,\n      code: \"// AVL insertion completed\"\n    });\n    setAnimationSteps(steps);\n    setCurrentStepIndex(0);\n    setIsAnimating(true);\n    addToHistory(`Inserted ${value} into AVL tree`);\n  };\n  const insertAVLRecursive = async (node, value, steps) => {\n    var _node$left$value, _node$left4, _node$right$value, _node$right4;\n    // Standard BST insertion\n    if (!node) {\n      const newNode = createTreeNode(value);\n      steps.push({\n        type: \"insert\",\n        nodeId: newNode.id,\n        description: `Creating new node with value ${value}`,\n        code: \"  return new Node(value)\"\n      });\n      return newNode;\n    }\n    steps.push({\n      type: \"highlight\",\n      nodeId: node.id,\n      description: `Comparing ${value} with ${node.value}`,\n      code: `  if (value < node.value)`\n    });\n    if (value < node.value) {\n      var _node$left3;\n      node.left = await insertAVLRecursive((_node$left3 = node.left) !== null && _node$left3 !== void 0 ? _node$left3 : null, value, steps);\n    } else if (value > node.value) {\n      var _node$right3;\n      node.right = await insertAVLRecursive((_node$right3 = node.right) !== null && _node$right3 !== void 0 ? _node$right3 : null, value, steps);\n    } else {\n      return node; // Duplicate values not allowed\n    }\n\n    // Update height\n    updateHeight(node);\n\n    // Get balance factor\n    const balance = getBalance(node);\n    steps.push({\n      type: \"highlight\",\n      nodeId: node.id,\n      description: `Balance factor of node ${node.value}: ${balance}`,\n      code: `  balance = height(left) - height(right) = ${balance}`\n    });\n\n    // Left Left Case\n    if (balance > 1 && value < node.left.value) {\n      return rotateRight(node, steps);\n    }\n\n    // Right Right Case\n    if (balance < -1 && value > node.right.value) {\n      return rotateLeft(node, steps);\n    }\n\n    // Left Right Case\n    if (balance > 1 && value > ((_node$left$value = (_node$left4 = node.left) === null || _node$left4 === void 0 ? void 0 : _node$left4.value) !== null && _node$left$value !== void 0 ? _node$left$value : Number.POSITIVE_INFINITY)) {\n      if (node.left) {\n        node.left = rotateLeft(node.left, steps);\n        return rotateRight(node, steps);\n      } else {\n        return node;\n      }\n    }\n\n    // Right Left Case\n    if (balance < -1 && value < ((_node$right$value = (_node$right4 = node.right) === null || _node$right4 === void 0 ? void 0 : _node$right4.value) !== null && _node$right$value !== void 0 ? _node$right$value : Number.NEGATIVE_INFINITY)) {\n      if (node.right) {\n        node.right = rotateRight(node.right, steps);\n        return rotateLeft(node, steps);\n      } else {\n        return node;\n      }\n    }\n    return node;\n  };\n\n  // Red-Black Tree Operations\n  const insertRedBlack = async value => {\n    const steps = [];\n    steps.push({\n      type: \"highlight\",\n      description: `Inserting value ${value} into Red-Black Tree`,\n      code: `function insertRB(root, value) {`\n    });\n    if (!root) {\n      const newNode = createTreeNode(value);\n      newNode.color = \"black\"; // Root is always black\n      setRoot(newNode);\n      steps.push({\n        type: \"insert\",\n        nodeId: newNode.id,\n        description: \"Creating root node (colored black)\",\n        code: \"  root = new Node(value)\\n  root.color = BLACK\"\n      });\n    } else {\n      const newNode = await insertRBRecursive(root, value, steps);\n      // Fix violations\n      await fixRedBlackViolations(newNode, steps);\n      setRoot({\n        ...root\n      });\n    }\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value} into Red-Black tree`,\n      code: \"// Red-Black insertion completed\"\n    });\n    setAnimationSteps(steps);\n    setCurrentStepIndex(0);\n    setIsAnimating(true);\n    addToHistory(`Inserted ${value} into Red-Black tree`);\n  };\n  const insertRBRecursive = async (node, value, steps) => {\n    if (value < node.value) {\n      if (!node.left) {\n        const newNode = createTreeNode(value);\n        newNode.color = \"red\"; // New nodes are red\n        node.left = newNode;\n        newNode.parent = node;\n        steps.push({\n          type: \"insert\",\n          nodeId: newNode.id,\n          description: `Inserting ${value} as left child (colored red)`,\n          code: \"  node.left = new Node(value)\\n  node.left.color = RED\"\n        });\n        return newNode;\n      } else {\n        return await insertRBRecursive(node.left, value, steps);\n      }\n    } else if (value > node.value) {\n      if (!node.right) {\n        const newNode = createTreeNode(value);\n        newNode.color = \"red\"; // New nodes are red\n        node.right = newNode;\n        newNode.parent = node;\n        steps.push({\n          type: \"insert\",\n          nodeId: newNode.id,\n          description: `Inserting ${value} as right child (colored red)`,\n          code: \"  node.right = new Node(value)\\n  node.right.color = RED\"\n        });\n        return newNode;\n      } else {\n        return await insertRBRecursive(node.right, value, steps);\n      }\n    }\n    return node;\n  };\n  const fixRedBlackViolations = async (node, steps) => {\n    // Implementation of Red-Black tree fix-up would go here\n    // This is a simplified version\n    if (node.parent && node.parent.color === \"red\") {\n      steps.push({\n        type: \"recolor\",\n        nodeId: node.id,\n        description: \"Fixing Red-Black tree violations\",\n        code: \"// Fix red-red violation\"\n      });\n    }\n  };\n\n  // Heap Operations\n  const insertHeap = async value => {\n    const steps = [];\n    const newHeap = [...heapArray];\n    const newNode = createHeapNode(value, newHeap.length);\n    newHeap.push(newNode);\n    steps.push({\n      type: \"insert\",\n      nodeId: newNode.id,\n      description: `Inserting ${value} at the end of heap`,\n      code: `heap.push(${value})`\n    });\n\n    // Heapify up\n    let index = newHeap.length - 1;\n    while (index > 0) {\n      const parentIndex = Math.floor((index - 1) / 2);\n      if (newHeap[index].value <= newHeap[parentIndex].value) break;\n      steps.push({\n        type: \"heapify\",\n        nodeId: newHeap[index].id,\n        description: `Swapping ${newHeap[index].value} with parent ${newHeap[parentIndex].value}`,\n        code: `swap(heap[${index}], heap[${parentIndex}])`\n      })\n\n      // Swap\n      ;\n      [newHeap[index], newHeap[parentIndex]] = [newHeap[parentIndex], newHeap[index]];\n      newHeap[index].index = index;\n      newHeap[parentIndex].index = parentIndex;\n      index = parentIndex;\n    }\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value} into max heap`,\n      code: \"// Heap insertion completed\"\n    });\n    setHeapArray(newHeap);\n    setAnimationSteps(steps);\n    setCurrentStepIndex(0);\n    setIsAnimating(true);\n    addToHistory(`Inserted ${value} into heap`);\n  };\n\n  // B-Tree Operations\n  const insertBTree = async value => {\n    const steps = [];\n    steps.push({\n      type: \"highlight\",\n      description: `Inserting value ${value} into B-Tree (order ${bTreeOrder})`,\n      code: `function insertBTree(root, value) {`\n    });\n    if (!bTreeRoot) {\n      const newNode = createBTreeNode([value], true);\n      setBTreeRoot(newNode);\n      steps.push({\n        type: \"insert\",\n        nodeId: newNode.id,\n        description: \"Creating root node\",\n        code: \"  root = new BTreeNode([value])\"\n      });\n    } else {\n      await insertBTreeRecursive(bTreeRoot, value, steps);\n      setBTreeRoot({\n        ...bTreeRoot\n      });\n    }\n    steps.push({\n      type: \"complete\",\n      description: `Successfully inserted ${value} into B-Tree`,\n      code: \"// B-Tree insertion completed\"\n    });\n    setAnimationSteps(steps);\n    setCurrentStepIndex(0);\n    setIsAnimating(true);\n    addToHistory(`Inserted ${value} into B-Tree`);\n  };\n  const insertBTreeRecursive = async (node, value, steps) => {\n    // Find the correct position to insert\n    let i = 0;\n    while (i < node.keys.length && value > node.keys[i]) {\n      i++;\n    }\n    if (node.isLeaf) {\n      // Insert in leaf node\n      node.keys.splice(i, 0, value);\n      steps.push({\n        type: \"insert\",\n        nodeId: node.id,\n        description: `Inserting ${value} into leaf node`,\n        code: `node.keys.insert(${i}, ${value})`\n      });\n\n      // Check if node is full\n      if (node.keys.length >= 2 * bTreeOrder - 1) {\n        steps.push({\n          type: \"highlight\",\n          nodeId: node.id,\n          description: \"Node is full, splitting required\",\n          code: \"// Node overflow, split needed\"\n        });\n      }\n    } else {\n      // Recursively insert in child\n      await insertBTreeRecursive(node.children[i], value, steps);\n    }\n  };\n\n  // Tree Traversals\n  const performTraversal = type => {\n    const result = [];\n    switch (type) {\n      case \"inorder\":\n        inorderTraversal(root, result);\n        break;\n      case \"preorder\":\n        preorderTraversal(root, result);\n        break;\n      case \"postorder\":\n        postorderTraversal(root, result);\n        break;\n      case \"levelorder\":\n        levelorderTraversal(root, result);\n        break;\n    }\n    setTraversalResult(result);\n    addToHistory(`Performed ${type} traversal: [${result.join(\", \")}]`);\n  };\n  const inorderTraversal = (node, result) => {\n    if (node) {\n      var _node$left5, _node$right5;\n      inorderTraversal((_node$left5 = node.left) !== null && _node$left5 !== void 0 ? _node$left5 : null, result);\n      result.push(node.value);\n      inorderTraversal((_node$right5 = node.right) !== null && _node$right5 !== void 0 ? _node$right5 : null, result);\n    }\n  };\n  const preorderTraversal = (node, result) => {\n    if (node) {\n      var _node$left6, _node$right6;\n      result.push(node.value);\n      preorderTraversal((_node$left6 = node.left) !== null && _node$left6 !== void 0 ? _node$left6 : null, result);\n      preorderTraversal((_node$right6 = node.right) !== null && _node$right6 !== void 0 ? _node$right6 : null, result);\n    }\n  };\n  const postorderTraversal = (node, result) => {\n    if (node) {\n      var _node$left7, _node$right7;\n      postorderTraversal((_node$left7 = node.left) !== null && _node$left7 !== void 0 ? _node$left7 : null, result);\n      postorderTraversal((_node$right7 = node.right) !== null && _node$right7 !== void 0 ? _node$right7 : null, result);\n      result.push(node.value);\n    }\n  };\n  const levelorderTraversal = (node, result) => {\n    if (!node) return;\n    const queue = [node];\n    while (queue.length > 0) {\n      const current = queue.shift();\n      result.push(current.value);\n      if (current.left) queue.push(current.left);\n      if (current.right) queue.push(current.right);\n    }\n  };\n\n  // Search operation\n  const searchTree = async value => {\n    if (!root) {\n      addToHistory(\"Cannot search in empty tree\");\n      return;\n    }\n    const steps = [];\n    let found = false;\n    const searchRecursive = node => {\n      if (!node) return false;\n      steps.push({\n        type: \"highlight\",\n        nodeId: node.id,\n        description: `Comparing search value ${value} with node value ${node.value}`,\n        code: `if (value === node.value) return true`\n      });\n      if (node.value === value) {\n        found = true;\n        steps.push({\n          type: \"highlight\",\n          nodeId: node.id,\n          description: `Found value ${value}!`,\n          code: `// Value found at node ${node.value}`\n        });\n        return true;\n      } else if (value < node.value) {\n        var _node$left8;\n        steps.push({\n          type: \"highlight\",\n          nodeId: node.id,\n          description: `${value} < ${node.value}, searching left subtree`,\n          code: `return search(node.left, value)`\n        });\n        return searchRecursive((_node$left8 = node.left) !== null && _node$left8 !== void 0 ? _node$left8 : null);\n      } else {\n        var _node$right8;\n        steps.push({\n          type: \"highlight\",\n          nodeId: node.id,\n          description: `${value} > ${node.value}, searching right subtree`,\n          code: `return search(node.right, value)`\n        });\n        return searchRecursive((_node$right8 = node.right) !== null && _node$right8 !== void 0 ? _node$right8 : null);\n      }\n    };\n    searchRecursive(root);\n    if (!found) {\n      steps.push({\n        type: \"complete\",\n        description: `Value ${value} not found in tree`,\n        code: \"// Search completed - value not found\"\n      });\n    }\n    setAnimationSteps(steps);\n    setCurrentStepIndex(0);\n    setIsAnimating(true);\n    addToHistory(`Searched for ${value} - ${found ? \"found\" : \"not found\"}`);\n  };\n  const addToHistory = operation => {\n    setOperationHistory(prev => [`${new Date().toLocaleTimeString()}: ${operation}`, ...prev.slice(0, 19)]);\n  };\n\n  // Animation controls\n  const playAnimation = () => setAutoPlay(true);\n  const pauseAnimation = () => setAutoPlay(false);\n  const nextStep = () => {\n    if (currentStepIndex < animationSteps.length - 1) {\n      setCurrentStepIndex(prev => prev + 1);\n    }\n  };\n  const prevStep = () => {\n    if (currentStepIndex > 0) {\n      setCurrentStepIndex(prev => prev - 1);\n    }\n  };\n  const resetAnimation = () => {\n    setCurrentStepIndex(0);\n    setAutoPlay(false);\n  };\n\n  // Clear tree\n  const clearTree = () => {\n    setRoot(null);\n    setBTreeRoot(null);\n    setHeapArray([]);\n    setAnimationSteps([]);\n    setOperationHistory([]);\n    setTraversalResult([]);\n    addToHistory(\"Tree cleared\");\n  };\n\n  // Get current step info\n  const currentStep = animationSteps[currentStepIndex];\n\n  // Tutorial content\n  const tutorialContent = {\n    binary: {\n      title: \"Binary Tree\",\n      description: \"A tree where each node has at most two children (left and right).\",\n      complexity: \"Search/Insert/Delete: O(n) worst case, O(log n) average case\",\n      useCase: \"Basic tree structure, foundation for other tree types.\"\n    },\n    bst: {\n      title: \"Binary Search Tree\",\n      description: \"A binary tree where left child < parent < right child for all nodes.\",\n      complexity: \"Search/Insert/Delete: O(log n) average, O(n) worst case\",\n      useCase: \"Efficient searching, sorting, and range queries.\"\n    },\n    avl: {\n      title: \"AVL Tree\",\n      description: \"Self-balancing BST where heights of subtrees differ by at most 1.\",\n      complexity: \"Search/Insert/Delete: O(log n) guaranteed\",\n      useCase: \"When you need guaranteed logarithmic operations.\"\n    },\n    redblack: {\n      title: \"Red-Black Tree\",\n      description: \"Self-balancing BST with color properties ensuring balance.\",\n      complexity: \"Search/Insert/Delete: O(log n) guaranteed\",\n      useCase: \"Used in many standard libraries (C++ STL, Java TreeMap).\"\n    },\n    heap: {\n      title: \"Binary Heap\",\n      description: \"Complete binary tree with heap property (max/min heap).\",\n      complexity: \"Insert: O(log n), Extract-max: O(log n), Peek: O(1)\",\n      useCase: \"Priority queues, heap sort, graph algorithms.\"\n    },\n    btree: {\n      title: \"B-Tree\",\n      description: \"Self-balancing tree with multiple keys per node.\",\n      complexity: \"Search/Insert/Delete: O(log n)\",\n      useCase: \"Database indexes, file systems.\"\n    },\n    bplus: {\n      title: \"B+ Tree\",\n      description: \"B-Tree variant where all data is stored in leaf nodes.\",\n      complexity: \"Search/Insert/Delete: O(log n), Range queries: O(log n + k)\",\n      useCase: \"Database indexes, especially for range queries.\"\n    }\n  };\n\n  // Tree rendering functions\n  const renderBinaryTree = () => {\n    if (!root) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center h-64 text-gray-500\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(TreePine, {\n            className: \"w-16 h-16 mx-auto mb-4 opacity-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 802,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Tree is empty. Add some nodes to get started!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 803,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 800,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(BinaryTreeRenderer, {\n      root: root,\n      currentStep: currentStep\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 12\n    }, this);\n  };\n  const renderHeap = () => {\n    if (heapArray.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center h-64 text-gray-500\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(Layers, {\n            className: \"w-16 h-16 mx-auto mb-4 opacity-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 817,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Heap is empty. Add some elements to get started!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 818,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 815,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(HeapRenderer, {\n      heap: heapArray,\n      currentStep: currentStep\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 824,\n      columnNumber: 12\n    }, this);\n  };\n  const renderBTree = () => {\n    if (!bTreeRoot) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center h-64 text-gray-500\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(Database, {\n            className: \"w-16 h-16 mx-auto mb-4 opacity-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 832,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"B-Tree is empty. Add some keys to get started!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 833,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(BTreeRenderer, {\n      root: bTreeRoot,\n      currentStep: currentStep\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 839,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-white shadow-sm border-b\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-gradient-to-r from-green-500 to-blue-500 rounded-lg\",\n              children: /*#__PURE__*/_jsxDEV(TreePine, {\n                className: \"w-6 h-6 text-white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 850,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 849,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\",\n                children: \"Advanced Tree Visualizer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 853,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"mt-1 text-gray-600\",\n                children: \"Explore all types of trees with interactive animations\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 856,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 852,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 848,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowTutorial(!showTutorial),\n              className: \"flex items-center space-x-2 px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(BookOpen, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 864,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Tutorial\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 865,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 860,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowCode(!showCode),\n              className: \"flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(Code, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 871,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Code\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 872,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 867,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 859,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 847,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 846,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 845,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8\",\n      children: [showTutorial && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-6 border border-green-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(Lightbulb, {\n            className: \"w-5 h-5 text-green-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 884,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-green-900\",\n            children: tutorialContent[treeType].title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 885,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 883,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-green-800 mb-4\",\n          children: tutorialContent[treeType].description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-lg p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(Clock, {\n                className: \"w-4 h-4 text-green-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 891,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-semibold text-green-800\",\n                children: \"Time Complexity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 892,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 890,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-green-700\",\n              children: tutorialContent[treeType].complexity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 894,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-lg p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(Target, {\n                className: \"w-4 h-4 text-blue-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 898,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-semibold text-blue-800\",\n                children: \"Use Case\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 899,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 897,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-blue-700\",\n              children: tutorialContent[treeType].useCase\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 896,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 882,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-900 mb-4\",\n          children: \"Choose Tree Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-3\",\n          children: [\"binary\", \"bst\", \"avl\", \"redblack\", \"heap\", \"btree\", \"bplus\"].map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setTreeType(type);\n              clearTree();\n            },\n            className: `p-3 rounded-xl border-2 transition-all duration-200 text-sm ${treeType === type ? \"border-green-500 bg-green-50 text-green-700\" : \"border-gray-200 hover:border-gray-300 hover:bg-gray-50\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"font-semibold capitalize\",\n              children: type === \"bst\" ? \"BST\" : type === \"avl\" ? \"AVL\" : type === \"redblack\" ? \"Red-Black\" : type === \"btree\" ? \"B-Tree\" : type === \"bplus\" ? \"B+ Tree\" : type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 924,\n              columnNumber: 17\n            }, this)\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 912,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 908,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 lg:grid-cols-4 gap-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-1\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sticky top-8\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900 mb-6\",\n              children: \"Operations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 946,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4 mb-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-sm font-medium text-gray-700 mb-2\",\n                  children: \"Value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 951,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: inputValue,\n                  onChange: e => setInputValue(e.target.value),\n                  className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\",\n                  placeholder: \"Enter value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 952,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 950,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-sm font-medium text-gray-700 mb-2\",\n                  children: \"Search Value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 961,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: searchTerm,\n                  onChange: e => setSearchTerm(e.target.value),\n                  className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\",\n                  placeholder: \"Search for value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 962,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 960,\n                columnNumber: 17\n              }, this), (treeType === \"btree\" || treeType === \"bplus\") && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-sm font-medium text-gray-700 mb-2\",\n                  children: \"B-Tree Order\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 972,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: bTreeOrder,\n                  onChange: e => setBTreeOrder(Number(e.target.value)),\n                  min: \"2\",\n                  max: \"10\",\n                  className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 973,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 971,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 949,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"font-semibold text-gray-700 mb-2\",\n                  children: \"Basic Operations\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 988,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"grid grid-cols-1 gap-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => {\n                      const val = Number.parseInt(inputValue);\n                      if (!isNaN(val)) {\n                        if (treeType === \"heap\") {\n                          insertHeap(val);\n                        } else if (treeType === \"btree\" || treeType === \"bplus\") {\n                          insertBTree(val);\n                        } else if (treeType === \"avl\") {\n                          insertAVL(val);\n                        } else if (treeType === \"redblack\") {\n                          insertRedBlack(val);\n                        } else {\n                          insertBST(val);\n                        }\n                        setInputValue(\"\");\n                      }\n                    },\n                    disabled: isAnimating || !inputValue,\n                    className: \"flex items-center justify-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\",\n                    children: [/*#__PURE__*/_jsxDEV(Plus, {\n                      className: \"w-4 h-4\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1011,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Insert\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1012,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 990,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => {\n                      const val = Number.parseInt(searchTerm);\n                      if (!isNaN(val)) {\n                        searchTree(val);\n                        setSearchTerm(\"\");\n                      }\n                    },\n                    disabled: isAnimating || !searchTerm || !root && heapArray.length === 0 && !bTreeRoot,\n                    className: \"flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\",\n                    children: [/*#__PURE__*/_jsxDEV(Search, {\n                      className: \"w-4 h-4\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1025,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Search\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1026,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1014,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: clearTree,\n                    className: \"flex items-center justify-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\",\n                    children: [/*#__PURE__*/_jsxDEV(RotateCcw, {\n                      className: \"w-4 h-4\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1032,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Clear Tree\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1033,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1028,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 989,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 987,\n                columnNumber: 17\n              }, this), (treeType === \"binary\" || treeType === \"bst\" || treeType === \"avl\" || treeType === \"redblack\") && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"font-semibold text-gray-700 mb-2\",\n                  children: \"Tree Traversals\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1041,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"grid grid-cols-2 gap-2\",\n                  children: [\"inorder\", \"preorder\", \"postorder\", \"levelorder\"].map(traversal => /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => {\n                      setSelectedTraversal(traversal);\n                      performTraversal(traversal);\n                    },\n                    disabled: !root,\n                    className: \"px-3 py-2 text-xs bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\",\n                    children: traversal.charAt(0).toUpperCase() + traversal.slice(1)\n                  }, traversal, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1044,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1042,\n                  columnNumber: 21\n                }, this), traversalResult.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-2 p-2 bg-purple-50 rounded-lg\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-xs font-semibold text-purple-800 mb-1\",\n                    children: [selectedTraversal.charAt(0).toUpperCase() + selectedTraversal.slice(1), \" Result:\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1059,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-xs text-purple-700\",\n                    children: [\"[\", traversalResult.join(\", \"), \"]\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1062,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1058,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1040,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 986,\n              columnNumber: 15\n            }, this), animationSteps.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-6 pt-6 border-t border-gray-200\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"font-semibold text-gray-700 mb-4\",\n                children: \"Animation Controls\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1072,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center justify-between mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: prevStep,\n                  disabled: currentStepIndex === 0,\n                  className: \"p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed\",\n                  children: /*#__PURE__*/_jsxDEV(SkipBack, {\n                    className: \"w-4 h-4\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1079,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1074,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: autoPlay ? pauseAnimation : playAnimation,\n                  disabled: currentStepIndex >= animationSteps.length - 1,\n                  className: \"p-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed\",\n                  children: autoPlay ? /*#__PURE__*/_jsxDEV(Pause, {\n                    className: \"w-4 h-4\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1086,\n                    columnNumber: 35\n                  }, this) : /*#__PURE__*/_jsxDEV(Play, {\n                    className: \"w-4 h-4\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1086,\n                    columnNumber: 67\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1081,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: nextStep,\n                  disabled: currentStepIndex >= animationSteps.length - 1,\n                  className: \"p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed\",\n                  children: /*#__PURE__*/_jsxDEV(SkipForward, {\n                    className: \"w-4 h-4\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1093,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1088,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1073,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center text-sm text-gray-600 mb-2\",\n                children: [\"Step \", currentStepIndex + 1, \" of \", animationSteps.length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1096,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-sm font-medium text-gray-700 mb-2\",\n                  children: \"Animation Speed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1100,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"range\",\n                  min: \"200\",\n                  max: \"2000\",\n                  step: \"200\",\n                  value: animationSpeed,\n                  onChange: e => setAnimationSpeed(Number(e.target.value)),\n                  className: \"w-full\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1101,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-between text-xs text-gray-500 mt-1\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Fast\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1111,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Slow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1112,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1110,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1099,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: resetAnimation,\n                className: \"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\",\n                children: [/*#__PURE__*/_jsxDEV(RotateCcw, {\n                  className: \"w-4 h-4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1119,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Reset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1120,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1115,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1071,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 945,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 944,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-3 space-y-8\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-between mb-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"text-xl font-bold text-gray-900\",\n                children: tutorialContent[treeType].title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1132,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center space-x-4 text-sm text-gray-600\",\n                children: [treeType === \"heap\" && /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Heap Size: \", heapArray.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1134,\n                  columnNumber: 43\n                }, this), (treeType === \"binary\" || treeType === \"bst\" || treeType === \"avl\" || treeType === \"redblack\") && root && /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Height: \", getHeight(root)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1136,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1133,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"min-h-[400px] bg-gradient-to-br from-green-50 to-blue-50 rounded-xl p-6 overflow-auto\",\n              children: treeType === \"heap\" ? renderHeap() : treeType === \"btree\" || treeType === \"bplus\" ? renderBTree() : renderBinaryTree()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1141,\n              columnNumber: 15\n            }, this), currentStep && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-6 p-4 bg-gray-50 rounded-lg\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center space-x-2 mb-2\",\n                children: [/*#__PURE__*/_jsxDEV(Zap, {\n                  className: \"w-4 h-4 text-green-600\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1153,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-semibold text-gray-900\",\n                  children: \"Current Step\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1154,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1152,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-gray-700 mb-3\",\n                children: currentStep.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1156,\n                columnNumber: 19\n              }, this), showCode && /*#__PURE__*/_jsxDEV(\"pre\", {\n                className: \"bg-gray-800 text-green-400 p-3 rounded text-sm overflow-x-auto\",\n                children: /*#__PURE__*/_jsxDEV(\"code\", {\n                  children: currentStep.code\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1159,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1158,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1151,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900 mb-4\",\n              children: \"Operation History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1168,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"max-h-60 overflow-y-auto space-y-2\",\n              children: operationHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-gray-500 italic\",\n                children: \"No operations performed yet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1171,\n                columnNumber: 19\n              }, this) : operationHistory.map((operation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"p-3 bg-gray-50 rounded-lg text-sm text-gray-700 border-l-4 border-green-400\",\n                children: operation\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1174,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1169,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 942,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 843,\n    columnNumber: 5\n  }, this);\n}\n\n// Binary Tree Renderer Component\n_s(TreeVisualizerPage, \"n0cyhOEpHHFuzyMz17pNTVWnF9c=\");\n_c = TreeVisualizerPage;\nfunction BinaryTreeRenderer({\n  root,\n  currentStep\n}) {\n  const renderNode = (node, x, y, level) => {\n    if (!node) return null;\n    const isHighlighted = (currentStep === null || currentStep === void 0 ? void 0 : currentStep.nodeId) === node.id || node.isHighlighted;\n    const isNew = node.isNew;\n    const isDeleting = node.isDeleting;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [node.left && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x,\n        y1: y,\n        x2: x - 80 / (level + 1),\n        y2: y + 80,\n        stroke: \"#94a3b8\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1203,\n        columnNumber: 23\n      }, this), node.right && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x,\n        y1: y,\n        x2: x + 80 / (level + 1),\n        y2: y + 80,\n        stroke: \"#94a3b8\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1206,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: x,\n        cy: y,\n        r: \"20\",\n        fill: isHighlighted ? \"#fbbf24\" : isNew ? \"#10b981\" : isDeleting ? \"#ef4444\" : node.color === \"red\" ? \"#ef4444\" : node.color === \"black\" ? \"#374151\" : \"#3b82f6\",\n        stroke: isHighlighted ? \"#f59e0b\" : \"#1f2937\",\n        strokeWidth: \"2\",\n        className: \"transition-all duration-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: x,\n        y: y + 5,\n        textAnchor: \"middle\",\n        fill: node.color === \"black\" || isDeleting ? \"white\" : \"white\",\n        fontSize: \"14\",\n        fontWeight: \"bold\",\n        children: node.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1232,\n        columnNumber: 9\n      }, this), node.left && renderNode(node.left, x - 80 / (level + 1), y + 80, level + 1), node.right && renderNode(node.right, x + 80 / (level + 1), y + 80, level + 1)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1201,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"100%\",\n    height: \"400\",\n    viewBox: \"0 0 800 400\",\n    children: renderNode(root, 400, 50, 0)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1251,\n    columnNumber: 5\n  }, this);\n}\n\n// Heap Renderer Component\n_c2 = BinaryTreeRenderer;\nfunction HeapRenderer({\n  heap,\n  currentStep\n}) {\n  const renderHeapNode = (index, x, y) => {\n    if (index >= heap.length) return null;\n    const node = heap[index];\n    const isHighlighted = (currentStep === null || currentStep === void 0 ? void 0 : currentStep.nodeId) === node.id || node.isHighlighted;\n    const isNew = node.isNew;\n    const isSwapping = node.isSwapping;\n    const leftChildIndex = 2 * index + 1;\n    const rightChildIndex = 2 * index + 2;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [leftChildIndex < heap.length && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x,\n        y1: y,\n        x2: x - 60,\n        y2: y + 60,\n        stroke: \"#94a3b8\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1274,\n        columnNumber: 11\n      }, this), rightChildIndex < heap.length && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x,\n        y1: y,\n        x2: x + 60,\n        y2: y + 60,\n        stroke: \"#94a3b8\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: x,\n        cy: y,\n        r: \"20\",\n        fill: isHighlighted ? \"#fbbf24\" : isNew ? \"#10b981\" : isSwapping ? \"#f97316\" : \"#8b5cf6\",\n        stroke: \"#1f2937\",\n        strokeWidth: \"2\",\n        className: \"transition-all duration-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: x,\n        y: y + 5,\n        textAnchor: \"middle\",\n        fill: \"white\",\n        fontSize: \"14\",\n        fontWeight: \"bold\",\n        children: node.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: x,\n        y: y - 30,\n        textAnchor: \"middle\",\n        fill: \"#6b7280\",\n        fontSize: \"10\",\n        children: [\"[\", index, \"]\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1299,\n        columnNumber: 9\n      }, this), leftChildIndex < heap.length && renderHeapNode(leftChildIndex, x - 60, y + 60), rightChildIndex < heap.length && renderHeapNode(rightChildIndex, x + 60, y + 60)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1271,\n      columnNumber: 7\n    }, this);\n  };\n  if (heap.length === 0) return null;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"100%\",\n    height: \"400\",\n    viewBox: \"0 0 800 400\",\n    children: renderHeapNode(0, 400, 50)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1313,\n    columnNumber: 5\n  }, this);\n}\n\n// B-Tree Renderer Component\n_c3 = HeapRenderer;\nfunction BTreeRenderer({\n  root,\n  currentStep\n}) {\n  const renderBTreeNode = (node, x, y, level) => {\n    const isHighlighted = (currentStep === null || currentStep === void 0 ? void 0 : currentStep.nodeId) === node.id || node.isHighlighted;\n    const isNew = node.isNew;\n    const nodeWidth = Math.max(100, node.keys.length * 30 + 20);\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n        x: x - nodeWidth / 2,\n        y: y - 15,\n        width: nodeWidth,\n        height: \"30\",\n        fill: isHighlighted ? \"#fbbf24\" : isNew ? \"#10b981\" : \"#06b6d4\",\n        stroke: \"#1f2937\",\n        strokeWidth: \"2\",\n        rx: \"5\",\n        className: \"transition-all duration-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1330,\n        columnNumber: 9\n      }, this), node.keys.map((key, index) => /*#__PURE__*/_jsxDEV(\"text\", {\n        x: x - nodeWidth / 2 + 15 + index * 30,\n        y: y + 5,\n        fill: \"white\",\n        fontSize: \"12\",\n        fontWeight: \"bold\",\n        children: key\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1344,\n        columnNumber: 11\n      }, this)), node.children.map((child, index) => {\n        const childX = x - nodeWidth / 2 + (index + 1) * (nodeWidth / (node.children.length + 1));\n        const childY = y + 80;\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"line\", {\n            x1: x - nodeWidth / 2 + 15 + index * 30,\n            y1: y + 15,\n            x2: childX,\n            y2: childY - 15,\n            stroke: \"#94a3b8\",\n            strokeWidth: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1364,\n            columnNumber: 15\n          }, this), renderBTreeNode(child, childX, childY, level + 1)]\n        }, child.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1362,\n          columnNumber: 13\n        }, this);\n      })]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1328,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"100%\",\n    height: \"400\",\n    viewBox: \"0 0 800 400\",\n    children: renderBTreeNode(root, 400, 50, 0)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1382,\n    columnNumber: 5\n  }, this);\n}\n_c4 = BTreeRenderer;\nexport default TreeVisualizerPage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"TreeVisualizerPage\");\n$RefreshReg$(_c2, \"BinaryTreeRenderer\");\n$RefreshReg$(_c3, \"HeapRenderer\");\n$RefreshReg$(_c4, \"BTreeRenderer\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","TreePine","Plus","Search","RotateCcw","Play","Pause","SkipForward","SkipBack","Code","BookOpen","Lightbulb","Target","Clock","Zap","Database","Layers","jsxDEV","_jsxDEV","TreeVisualizerPage","treeType","setTreeType","root","setRoot","bTreeRoot","setBTreeRoot","heapArray","setHeapArray","inputValue","setInputValue","searchTerm","setSearchTerm","bTreeOrder","setBTreeOrder","isAnimating","setIsAnimating","animationSteps","setAnimationSteps","currentStepIndex","setCurrentStepIndex","animationSpeed","setAnimationSpeed","autoPlay","setAutoPlay","operationHistory","setOperationHistory","showCode","setShowCode","showTutorial","setShowTutorial","nodeCounter","setNodeCounter","traversalResult","setTraversalResult","selectedTraversal","setSelectedTraversal","length","timer","setTimeout","prev","clearTimeout","generateNodeId","createTreeNode","value","id","left","right","height","color","isNew","createBTreeNode","keys","isLeaf","children","createHeapNode","index","insertBST","steps","push","type","description","code","newNode","nodeId","insertBSTRecursive","addToHistory","node","parent","getHeight","getBalance","_node$left","_node$right","updateHeight","_node$left2","_node$right2","Math","max","rotateRight","y","x","T2","rotateLeft","insertAVL","newRoot","insertAVLRecursive","_node$left$value","_node$left4","_node$right$value","_node$right4","_node$left3","_node$right3","balance","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","insertRedBlack","insertRBRecursive","fixRedBlackViolations","insertHeap","newHeap","parentIndex","floor","insertBTree","insertBTreeRecursive","i","splice","performTraversal","result","inorderTraversal","preorderTraversal","postorderTraversal","levelorderTraversal","join","_node$left5","_node$right5","_node$left6","_node$right6","_node$left7","_node$right7","queue","current","shift","searchTree","found","searchRecursive","_node$left8","_node$right8","operation","Date","toLocaleTimeString","slice","playAnimation","pauseAnimation","nextStep","prevStep","resetAnimation","clearTree","currentStep","tutorialContent","binary","title","complexity","useCase","bst","avl","redblack","heap","btree","bplus","renderBinaryTree","className","fileName","lineNumber","columnNumber","BinaryTreeRenderer","renderHeap","HeapRenderer","renderBTree","BTreeRenderer","onClick","map","onChange","e","target","placeholder","min","val","parseInt","isNaN","disabled","traversal","charAt","toUpperCase","step","_c","renderNode","level","isHighlighted","isDeleting","x1","y1","x2","y2","stroke","strokeWidth","cx","cy","r","fill","textAnchor","fontSize","fontWeight","width","viewBox","_c2","renderHeapNode","isSwapping","leftChildIndex","rightChildIndex","_c3","renderBTreeNode","nodeWidth","rx","key","child","childX","childY","_c4","$RefreshReg$"],"sources":["D:/DSA Website/src/pages/TreeVisualizerPage.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport {\r\n  TreePine,\r\n  Plus,\r\n  Search,\r\n  RotateCcw,\r\n  Play,\r\n  Pause,\r\n  SkipForward,\r\n  SkipBack,\r\n  Code,\r\n  BookOpen,\r\n  Lightbulb,\r\n  Target,\r\n  Clock,\r\n  Zap,\r\n  Database,\r\n  Layers,\r\n} from \"lucide-react\"\r\n\r\n// Tree Node interfaces for different tree types\r\ninterface TreeNode {\r\n  id: string\r\n  value: number\r\n  left?: TreeNode | null\r\n  right?: TreeNode | null\r\n  parent?: TreeNode | null\r\n  height?: number\r\n  color?: \"red\" | \"black\" // For Red-Black trees\r\n  isHighlighted?: boolean\r\n  isNew?: boolean\r\n  isDeleting?: boolean\r\n  level?: number\r\n  x?: number\r\n  y?: number\r\n}\r\n\r\ninterface BTreeNode {\r\n  id: string\r\n  keys: number[]\r\n  children: BTreeNode[]\r\n  isLeaf: boolean\r\n  parent?: BTreeNode | null\r\n  isHighlighted?: boolean\r\n  isNew?: boolean\r\n  level?: number\r\n  x?: number\r\n  y?: number\r\n}\r\n\r\ninterface HeapNode {\r\n  id: string\r\n  value: number\r\n  index: number\r\n  isHighlighted?: boolean\r\n  isNew?: boolean\r\n  isSwapping?: boolean\r\n  level?: number\r\n  x?: number\r\n  y?: number\r\n}\r\n\r\ninterface AnimationStep {\r\n  type: \"highlight\" | \"insert\" | \"delete\" | \"rotate\" | \"recolor\" | \"heapify\" | \"complete\"\r\n  nodeId?: string\r\n  description: string\r\n  code: string\r\n  newNode?: TreeNode | BTreeNode | HeapNode\r\n}\r\n\r\ntype TreeType = \"binary\" | \"bst\" | \"avl\" | \"redblack\" | \"heap\" | \"btree\" | \"bplus\"\r\ntype TraversalType = \"inorder\" | \"preorder\" | \"postorder\" | \"levelorder\"\r\n\r\nfunction TreeVisualizerPage() {\r\n  const [treeType, setTreeType] = useState<TreeType>(\"binary\")\r\n  const [root, setRoot] = useState<TreeNode | null>(null)\r\n  const [bTreeRoot, setBTreeRoot] = useState<BTreeNode | null>(null)\r\n  const [heapArray, setHeapArray] = useState<HeapNode[]>([])\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [bTreeOrder, setBTreeOrder] = useState(3) // Minimum degree for B-tree\r\n\r\n  // Animation states\r\n  const [isAnimating, setIsAnimating] = useState(false)\r\n  const [animationSteps, setAnimationSteps] = useState<AnimationStep[]>([])\r\n  const [currentStepIndex, setCurrentStepIndex] = useState(0)\r\n  const [animationSpeed, setAnimationSpeed] = useState(1000)\r\n  const [autoPlay, setAutoPlay] = useState(false)\r\n\r\n  // UI states\r\n  const [operationHistory, setOperationHistory] = useState<string[]>([])\r\n  const [showCode, setShowCode] = useState(false)\r\n  const [showTutorial, setShowTutorial] = useState(false)\r\n  const [nodeCounter, setNodeCounter] = useState(0)\r\n  const [traversalResult, setTraversalResult] = useState<number[]>([])\r\n  const [selectedTraversal, setSelectedTraversal] = useState<TraversalType>(\"inorder\")\r\n\r\n  // Auto-play animation\r\n  useEffect(() => {\r\n    if (autoPlay && isAnimating && currentStepIndex < animationSteps.length - 1) {\r\n      const timer = setTimeout(() => {\r\n        setCurrentStepIndex((prev) => prev + 1)\r\n      }, animationSpeed)\r\n      return () => clearTimeout(timer)\r\n    } else if (currentStepIndex >= animationSteps.length - 1) {\r\n      setAutoPlay(false)\r\n      setIsAnimating(false)\r\n    }\r\n  }, [autoPlay, isAnimating, currentStepIndex, animationSteps.length, animationSpeed])\r\n\r\n  // Helper functions\r\n  const generateNodeId = () => {\r\n    setNodeCounter((prev) => prev + 1)\r\n    return `node-${nodeCounter}`\r\n  }\r\n\r\n  const createTreeNode = (value: number): TreeNode => ({\r\n    id: generateNodeId(),\r\n    value,\r\n    left: null,\r\n    right: null,\r\n    height: 1,\r\n    color: \"red\", // Default for Red-Black trees\r\n    isNew: true,\r\n  })\r\n\r\n  const createBTreeNode = (keys: number[] = [], isLeaf = true): BTreeNode => ({\r\n    id: generateNodeId(),\r\n    keys,\r\n    children: [],\r\n    isLeaf,\r\n    isNew: true,\r\n  })\r\n\r\n  const createHeapNode = (value: number, index: number): HeapNode => ({\r\n    id: generateNodeId(),\r\n    value,\r\n    index,\r\n    isNew: true,\r\n  })\r\n\r\n  // Binary Search Tree Operations\r\n  const insertBST = async (value: number) => {\r\n    const steps: AnimationStep[] = []\r\n\r\n    steps.push({\r\n      type: \"highlight\",\r\n      description: `Inserting value ${value} into Binary Search Tree`,\r\n      code: `function insert(root, value) {\\n  if (!root) return new Node(value)`,\r\n    })\r\n\r\n    if (!root) {\r\n      const newNode = createTreeNode(value)\r\n      setRoot(newNode)\r\n      steps.push({\r\n        type: \"insert\",\r\n        nodeId: newNode.id,\r\n        description: \"Tree is empty. Creating root node\",\r\n        code: \"  root = new Node(value)\\n  return root\",\r\n      })\r\n    } else {\r\n      const newNode = await insertBSTRecursive(root, value, steps)\r\n      setRoot({ ...root })\r\n    }\r\n\r\n    steps.push({\r\n      type: \"complete\",\r\n      description: `Successfully inserted ${value}`,\r\n      code: \"// Insertion completed\",\r\n    })\r\n\r\n    setAnimationSteps(steps)\r\n    setCurrentStepIndex(0)\r\n    setIsAnimating(true)\r\n    addToHistory(`Inserted ${value} into BST`)\r\n  }\r\n\r\n  const insertBSTRecursive = async (node: TreeNode, value: number, steps: AnimationStep[]): Promise<TreeNode> => {\r\n    steps.push({\r\n      type: \"highlight\",\r\n      nodeId: node.id,\r\n      description: `Comparing ${value} with ${node.value}`,\r\n      code: `  if (value < node.value)`,\r\n    })\r\n\r\n    if (value < node.value) {\r\n      if (!node.left) {\r\n        const newNode = createTreeNode(value)\r\n        node.left = newNode\r\n        newNode.parent = node\r\n        steps.push({\r\n          type: \"insert\",\r\n          nodeId: newNode.id,\r\n          description: `${value} < ${node.value}, inserting as left child`,\r\n          code: \"    node.left = new Node(value)\",\r\n        })\r\n        return newNode\r\n      } else {\r\n        return await insertBSTRecursive(node.left, value, steps)\r\n      }\r\n    } else if (value > node.value) {\r\n      if (!node.right) {\r\n        const newNode = createTreeNode(value)\r\n        node.right = newNode\r\n        newNode.parent = node\r\n        steps.push({\r\n          type: \"insert\",\r\n          nodeId: newNode.id,\r\n          description: `${value} > ${node.value}, inserting as right child`,\r\n          code: \"    node.right = new Node(value)\",\r\n        })\r\n        return newNode\r\n      } else {\r\n        return await insertBSTRecursive(node.right, value, steps)\r\n      }\r\n    } else {\r\n      steps.push({\r\n        type: \"highlight\",\r\n        nodeId: node.id,\r\n        description: `Value ${value} already exists`,\r\n        code: \"  // Duplicate value, no insertion\",\r\n      })\r\n      return node\r\n    }\r\n  }\r\n\r\n  // AVL Tree Operations\r\n  const getHeight = (node: TreeNode | null): number => {\r\n    return node ? node.height || 1 : 0\r\n  }\r\n\r\n  const getBalance = (node: TreeNode | null): number => {\r\n    return node ? getHeight(node.left ?? null) - getHeight(node.right ?? null) : 0\r\n  }\r\n\r\n  const updateHeight = (node: TreeNode) => {\r\n    node.height = Math.max(getHeight(node.left ?? null), getHeight(node.right ?? null)) + 1\r\n  }\r\n\r\n  const rotateRight = (y: TreeNode, steps: AnimationStep[]): TreeNode => {\r\n    const x = y.left!\r\n    const T2 = x.right\r\n\r\n    steps.push({\r\n      type: \"rotate\",\r\n      nodeId: y.id,\r\n      description: `Performing right rotation on node ${y.value}`,\r\n      code: `// Right rotation\\nlet x = y.left\\ny.left = x.right\\nx.right = y`,\r\n    })\r\n\r\n    // Perform rotation\r\n    x.right = y\r\n    y.left = T2\r\n\r\n    // Update heights\r\n    updateHeight(y)\r\n    updateHeight(x)\r\n\r\n    return x\r\n  }\r\n\r\n  const rotateLeft = (x: TreeNode, steps: AnimationStep[]): TreeNode => {\r\n    const y = x.right!\r\n    const T2 = y.left\r\n\r\n    steps.push({\r\n      type: \"rotate\",\r\n      nodeId: x.id,\r\n      description: `Performing left rotation on node ${x.value}`,\r\n      code: `// Left rotation\\nlet y = x.right\\nx.right = y.left\\ny.left = x`,\r\n    })\r\n\r\n    // Perform rotation\r\n    y.left = x\r\n    x.right = T2\r\n\r\n    // Update heights\r\n    updateHeight(x)\r\n    updateHeight(y)\r\n\r\n    return y\r\n  }\r\n\r\n  const insertAVL = async (value: number) => {\r\n    const steps: AnimationStep[] = []\r\n\r\n    steps.push({\r\n      type: \"highlight\",\r\n      description: `Inserting value ${value} into AVL Tree`,\r\n      code: `function insertAVL(root, value) {`,\r\n    })\r\n\r\n    const newRoot = await insertAVLRecursive(root, value, steps)\r\n    setRoot(newRoot)\r\n\r\n    steps.push({\r\n      type: \"complete\",\r\n      description: `Successfully inserted ${value} with AVL balancing`,\r\n      code: \"// AVL insertion completed\",\r\n    })\r\n\r\n    setAnimationSteps(steps)\r\n    setCurrentStepIndex(0)\r\n    setIsAnimating(true)\r\n    addToHistory(`Inserted ${value} into AVL tree`)\r\n  }\r\n\r\n  const insertAVLRecursive = async (\r\n    node: TreeNode | null,\r\n    value: number,\r\n    steps: AnimationStep[],\r\n  ): Promise<TreeNode> => {\r\n    // Standard BST insertion\r\n    if (!node) {\r\n      const newNode = createTreeNode(value)\r\n      steps.push({\r\n        type: \"insert\",\r\n        nodeId: newNode.id,\r\n        description: `Creating new node with value ${value}`,\r\n        code: \"  return new Node(value)\",\r\n      })\r\n      return newNode\r\n    }\r\n\r\n    steps.push({\r\n      type: \"highlight\",\r\n      nodeId: node.id,\r\n      description: `Comparing ${value} with ${node.value}`,\r\n      code: `  if (value < node.value)`,\r\n    })\r\n\r\n    if (value < node.value) {\r\n      node.left = await insertAVLRecursive(node.left ?? null, value, steps)\r\n    } else if (value > node.value) {\r\n      node.right = await insertAVLRecursive(node.right ?? null, value, steps)\r\n    } else {\r\n      return node // Duplicate values not allowed\r\n    }\r\n\r\n    // Update height\r\n    updateHeight(node)\r\n\r\n    // Get balance factor\r\n    const balance = getBalance(node)\r\n\r\n    steps.push({\r\n      type: \"highlight\",\r\n      nodeId: node.id,\r\n      description: `Balance factor of node ${node.value}: ${balance}`,\r\n      code: `  balance = height(left) - height(right) = ${balance}`,\r\n    })\r\n\r\n    // Left Left Case\r\n    if (balance > 1 && value < node.left!.value) {\r\n      return rotateRight(node, steps)\r\n    }\r\n\r\n    // Right Right Case\r\n    if (balance < -1 && value > node.right!.value) {\r\n      return rotateLeft(node, steps)\r\n    }\r\n\r\n    // Left Right Case\r\n    if (balance > 1 && value > (node.left?.value ?? Number.POSITIVE_INFINITY)) {\r\n      if (node.left) {\r\n        node.left = rotateLeft(node.left, steps)\r\n        return rotateRight(node, steps)\r\n      } else {\r\n        return node\r\n      }\r\n    }\r\n\r\n    // Right Left Case\r\n    if (balance < -1 && value < (node.right?.value ?? Number.NEGATIVE_INFINITY)) {\r\n      if (node.right) {\r\n        node.right = rotateRight(node.right, steps)\r\n        return rotateLeft(node, steps)\r\n      } else {\r\n        return node\r\n      }\r\n    }\r\n\r\n    return node\r\n  }\r\n\r\n  // Red-Black Tree Operations\r\n  const insertRedBlack = async (value: number) => {\r\n    const steps: AnimationStep[] = []\r\n\r\n    steps.push({\r\n      type: \"highlight\",\r\n      description: `Inserting value ${value} into Red-Black Tree`,\r\n      code: `function insertRB(root, value) {`,\r\n    })\r\n\r\n    if (!root) {\r\n      const newNode = createTreeNode(value)\r\n      newNode.color = \"black\" // Root is always black\r\n      setRoot(newNode)\r\n      steps.push({\r\n        type: \"insert\",\r\n        nodeId: newNode.id,\r\n        description: \"Creating root node (colored black)\",\r\n        code: \"  root = new Node(value)\\n  root.color = BLACK\",\r\n      })\r\n    } else {\r\n      const newNode = await insertRBRecursive(root, value, steps)\r\n      // Fix violations\r\n      await fixRedBlackViolations(newNode, steps)\r\n      setRoot({ ...root })\r\n    }\r\n\r\n    steps.push({\r\n      type: \"complete\",\r\n      description: `Successfully inserted ${value} into Red-Black tree`,\r\n      code: \"// Red-Black insertion completed\",\r\n    })\r\n\r\n    setAnimationSteps(steps)\r\n    setCurrentStepIndex(0)\r\n    setIsAnimating(true)\r\n    addToHistory(`Inserted ${value} into Red-Black tree`)\r\n  }\r\n\r\n  const insertRBRecursive = async (node: TreeNode, value: number, steps: AnimationStep[]): Promise<TreeNode> => {\r\n    if (value < node.value) {\r\n      if (!node.left) {\r\n        const newNode = createTreeNode(value)\r\n        newNode.color = \"red\" // New nodes are red\r\n        node.left = newNode\r\n        newNode.parent = node\r\n        steps.push({\r\n          type: \"insert\",\r\n          nodeId: newNode.id,\r\n          description: `Inserting ${value} as left child (colored red)`,\r\n          code: \"  node.left = new Node(value)\\n  node.left.color = RED\",\r\n        })\r\n        return newNode\r\n      } else {\r\n        return await insertRBRecursive(node.left, value, steps)\r\n      }\r\n    } else if (value > node.value) {\r\n      if (!node.right) {\r\n        const newNode = createTreeNode(value)\r\n        newNode.color = \"red\" // New nodes are red\r\n        node.right = newNode\r\n        newNode.parent = node\r\n        steps.push({\r\n          type: \"insert\",\r\n          nodeId: newNode.id,\r\n          description: `Inserting ${value} as right child (colored red)`,\r\n          code: \"  node.right = new Node(value)\\n  node.right.color = RED\",\r\n        })\r\n        return newNode\r\n      } else {\r\n        return await insertRBRecursive(node.right, value, steps)\r\n      }\r\n    }\r\n    return node\r\n  }\r\n\r\n  const fixRedBlackViolations = async (node: TreeNode, steps: AnimationStep[]) => {\r\n    // Implementation of Red-Black tree fix-up would go here\r\n    // This is a simplified version\r\n    if (node.parent && node.parent.color === \"red\") {\r\n      steps.push({\r\n        type: \"recolor\",\r\n        nodeId: node.id,\r\n        description: \"Fixing Red-Black tree violations\",\r\n        code: \"// Fix red-red violation\",\r\n      })\r\n    }\r\n  }\r\n\r\n  // Heap Operations\r\n  const insertHeap = async (value: number) => {\r\n    const steps: AnimationStep[] = []\r\n    const newHeap = [...heapArray]\r\n    const newNode = createHeapNode(value, newHeap.length)\r\n    newHeap.push(newNode)\r\n\r\n    steps.push({\r\n      type: \"insert\",\r\n      nodeId: newNode.id,\r\n      description: `Inserting ${value} at the end of heap`,\r\n      code: `heap.push(${value})`,\r\n    })\r\n\r\n    // Heapify up\r\n    let index = newHeap.length - 1\r\n    while (index > 0) {\r\n      const parentIndex = Math.floor((index - 1) / 2)\r\n      if (newHeap[index].value <= newHeap[parentIndex].value) break\r\n\r\n      steps.push({\r\n        type: \"heapify\",\r\n        nodeId: newHeap[index].id,\r\n        description: `Swapping ${newHeap[index].value} with parent ${newHeap[parentIndex].value}`,\r\n        code: `swap(heap[${index}], heap[${parentIndex}])`,\r\n      })\r\n\r\n      // Swap\r\n      ;[newHeap[index], newHeap[parentIndex]] = [newHeap[parentIndex], newHeap[index]]\r\n      newHeap[index].index = index\r\n      newHeap[parentIndex].index = parentIndex\r\n      index = parentIndex\r\n    }\r\n\r\n    steps.push({\r\n      type: \"complete\",\r\n      description: `Successfully inserted ${value} into max heap`,\r\n      code: \"// Heap insertion completed\",\r\n    })\r\n\r\n    setHeapArray(newHeap)\r\n    setAnimationSteps(steps)\r\n    setCurrentStepIndex(0)\r\n    setIsAnimating(true)\r\n    addToHistory(`Inserted ${value} into heap`)\r\n  }\r\n\r\n  // B-Tree Operations\r\n  const insertBTree = async (value: number) => {\r\n    const steps: AnimationStep[] = []\r\n\r\n    steps.push({\r\n      type: \"highlight\",\r\n      description: `Inserting value ${value} into B-Tree (order ${bTreeOrder})`,\r\n      code: `function insertBTree(root, value) {`,\r\n    })\r\n\r\n    if (!bTreeRoot) {\r\n      const newNode = createBTreeNode([value], true)\r\n      setBTreeRoot(newNode)\r\n      steps.push({\r\n        type: \"insert\",\r\n        nodeId: newNode.id,\r\n        description: \"Creating root node\",\r\n        code: \"  root = new BTreeNode([value])\",\r\n      })\r\n    } else {\r\n      await insertBTreeRecursive(bTreeRoot, value, steps)\r\n      setBTreeRoot({ ...bTreeRoot })\r\n    }\r\n\r\n    steps.push({\r\n      type: \"complete\",\r\n      description: `Successfully inserted ${value} into B-Tree`,\r\n      code: \"// B-Tree insertion completed\",\r\n    })\r\n\r\n    setAnimationSteps(steps)\r\n    setCurrentStepIndex(0)\r\n    setIsAnimating(true)\r\n    addToHistory(`Inserted ${value} into B-Tree`)\r\n  }\r\n\r\n  const insertBTreeRecursive = async (node: BTreeNode, value: number, steps: AnimationStep[]) => {\r\n    // Find the correct position to insert\r\n    let i = 0\r\n    while (i < node.keys.length && value > node.keys[i]) {\r\n      i++\r\n    }\r\n\r\n    if (node.isLeaf) {\r\n      // Insert in leaf node\r\n      node.keys.splice(i, 0, value)\r\n      steps.push({\r\n        type: \"insert\",\r\n        nodeId: node.id,\r\n        description: `Inserting ${value} into leaf node`,\r\n        code: `node.keys.insert(${i}, ${value})`,\r\n      })\r\n\r\n      // Check if node is full\r\n      if (node.keys.length >= 2 * bTreeOrder - 1) {\r\n        steps.push({\r\n          type: \"highlight\",\r\n          nodeId: node.id,\r\n          description: \"Node is full, splitting required\",\r\n          code: \"// Node overflow, split needed\",\r\n        })\r\n      }\r\n    } else {\r\n      // Recursively insert in child\r\n      await insertBTreeRecursive(node.children[i], value, steps)\r\n    }\r\n  }\r\n\r\n  // Tree Traversals\r\n  const performTraversal = (type: TraversalType) => {\r\n    const result: number[] = []\r\n\r\n    switch (type) {\r\n      case \"inorder\":\r\n        inorderTraversal(root, result)\r\n        break\r\n      case \"preorder\":\r\n        preorderTraversal(root, result)\r\n        break\r\n      case \"postorder\":\r\n        postorderTraversal(root, result)\r\n        break\r\n      case \"levelorder\":\r\n        levelorderTraversal(root, result)\r\n        break\r\n    }\r\n\r\n    setTraversalResult(result)\r\n    addToHistory(`Performed ${type} traversal: [${result.join(\", \")}]`)\r\n  }\r\n\r\n  const inorderTraversal = (node: TreeNode | null, result: number[]) => {\r\n    if (node) {\r\n      inorderTraversal(node.left ?? null, result)\r\n      result.push(node.value)\r\n      inorderTraversal(node.right ?? null, result)\r\n    }\r\n  }\r\n\r\n  const preorderTraversal = (node: TreeNode | null, result: number[]) => {\r\n    if (node) {\r\n      result.push(node.value)\r\n      preorderTraversal(node.left ?? null, result)\r\n      preorderTraversal(node.right ?? null, result)\r\n    }\r\n  }\r\n\r\n  const postorderTraversal = (node: TreeNode | null, result: number[]) => {\r\n    if (node) {\r\n      postorderTraversal(node.left ?? null, result)\r\n      postorderTraversal(node.right ?? null, result)\r\n      result.push(node.value)\r\n    }\r\n  }\r\n\r\n  const levelorderTraversal = (node: TreeNode | null, result: number[]) => {\r\n    if (!node) return\r\n    const queue = [node]\r\n    while (queue.length > 0) {\r\n      const current = queue.shift()!\r\n      result.push(current.value)\r\n      if (current.left) queue.push(current.left)\r\n      if (current.right) queue.push(current.right)\r\n    }\r\n  }\r\n\r\n  // Search operation\r\n  const searchTree = async (value: number) => {\r\n    if (!root) {\r\n      addToHistory(\"Cannot search in empty tree\")\r\n      return\r\n    }\r\n\r\n    const steps: AnimationStep[] = []\r\n    let found = false\r\n\r\n    const searchRecursive = (node: TreeNode | null): boolean => {\r\n      if (!node) return false\r\n\r\n      steps.push({\r\n        type: \"highlight\",\r\n        nodeId: node.id,\r\n        description: `Comparing search value ${value} with node value ${node.value}`,\r\n        code: `if (value === node.value) return true`,\r\n      })\r\n\r\n      if (node.value === value) {\r\n        found = true\r\n        steps.push({\r\n          type: \"highlight\",\r\n          nodeId: node.id,\r\n          description: `Found value ${value}!`,\r\n          code: `// Value found at node ${node.value}`,\r\n        })\r\n        return true\r\n      } else if (value < node.value) {\r\n        steps.push({\r\n          type: \"highlight\",\r\n          nodeId: node.id,\r\n          description: `${value} < ${node.value}, searching left subtree`,\r\n          code: `return search(node.left, value)`,\r\n        })\r\n        return searchRecursive(node.left ?? null)\r\n      } else {\r\n        steps.push({\r\n          type: \"highlight\",\r\n          nodeId: node.id,\r\n          description: `${value} > ${node.value}, searching right subtree`,\r\n          code: `return search(node.right, value)`,\r\n        })\r\n        return searchRecursive(node.right ?? null)\r\n      }\r\n    }\r\n\r\n    searchRecursive(root)\r\n\r\n    if (!found) {\r\n      steps.push({\r\n        type: \"complete\",\r\n        description: `Value ${value} not found in tree`,\r\n        code: \"// Search completed - value not found\",\r\n      })\r\n    }\r\n\r\n    setAnimationSteps(steps)\r\n    setCurrentStepIndex(0)\r\n    setIsAnimating(true)\r\n    addToHistory(`Searched for ${value} - ${found ? \"found\" : \"not found\"}`)\r\n  }\r\n\r\n  const addToHistory = (operation: string) => {\r\n    setOperationHistory((prev) => [`${new Date().toLocaleTimeString()}: ${operation}`, ...prev.slice(0, 19)])\r\n  }\r\n\r\n  // Animation controls\r\n  const playAnimation = () => setAutoPlay(true)\r\n  const pauseAnimation = () => setAutoPlay(false)\r\n  const nextStep = () => {\r\n    if (currentStepIndex < animationSteps.length - 1) {\r\n      setCurrentStepIndex((prev) => prev + 1)\r\n    }\r\n  }\r\n  const prevStep = () => {\r\n    if (currentStepIndex > 0) {\r\n      setCurrentStepIndex((prev) => prev - 1)\r\n    }\r\n  }\r\n  const resetAnimation = () => {\r\n    setCurrentStepIndex(0)\r\n    setAutoPlay(false)\r\n  }\r\n\r\n  // Clear tree\r\n  const clearTree = () => {\r\n    setRoot(null)\r\n    setBTreeRoot(null)\r\n    setHeapArray([])\r\n    setAnimationSteps([])\r\n    setOperationHistory([])\r\n    setTraversalResult([])\r\n    addToHistory(\"Tree cleared\")\r\n  }\r\n\r\n  // Get current step info\r\n  const currentStep = animationSteps[currentStepIndex]\r\n\r\n  // Tutorial content\r\n  const tutorialContent = {\r\n    binary: {\r\n      title: \"Binary Tree\",\r\n      description: \"A tree where each node has at most two children (left and right).\",\r\n      complexity: \"Search/Insert/Delete: O(n) worst case, O(log n) average case\",\r\n      useCase: \"Basic tree structure, foundation for other tree types.\",\r\n    },\r\n    bst: {\r\n      title: \"Binary Search Tree\",\r\n      description: \"A binary tree where left child < parent < right child for all nodes.\",\r\n      complexity: \"Search/Insert/Delete: O(log n) average, O(n) worst case\",\r\n      useCase: \"Efficient searching, sorting, and range queries.\",\r\n    },\r\n    avl: {\r\n      title: \"AVL Tree\",\r\n      description: \"Self-balancing BST where heights of subtrees differ by at most 1.\",\r\n      complexity: \"Search/Insert/Delete: O(log n) guaranteed\",\r\n      useCase: \"When you need guaranteed logarithmic operations.\",\r\n    },\r\n    redblack: {\r\n      title: \"Red-Black Tree\",\r\n      description: \"Self-balancing BST with color properties ensuring balance.\",\r\n      complexity: \"Search/Insert/Delete: O(log n) guaranteed\",\r\n      useCase: \"Used in many standard libraries (C++ STL, Java TreeMap).\",\r\n    },\r\n    heap: {\r\n      title: \"Binary Heap\",\r\n      description: \"Complete binary tree with heap property (max/min heap).\",\r\n      complexity: \"Insert: O(log n), Extract-max: O(log n), Peek: O(1)\",\r\n      useCase: \"Priority queues, heap sort, graph algorithms.\",\r\n    },\r\n    btree: {\r\n      title: \"B-Tree\",\r\n      description: \"Self-balancing tree with multiple keys per node.\",\r\n      complexity: \"Search/Insert/Delete: O(log n)\",\r\n      useCase: \"Database indexes, file systems.\",\r\n    },\r\n    bplus: {\r\n      title: \"B+ Tree\",\r\n      description: \"B-Tree variant where all data is stored in leaf nodes.\",\r\n      complexity: \"Search/Insert/Delete: O(log n), Range queries: O(log n + k)\",\r\n      useCase: \"Database indexes, especially for range queries.\",\r\n    },\r\n  }\r\n\r\n  // Tree rendering functions\r\n  const renderBinaryTree = () => {\r\n    if (!root) {\r\n      return (\r\n        <div className=\"flex items-center justify-center h-64 text-gray-500\">\r\n          <div className=\"text-center\">\r\n            <TreePine className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\r\n            <p>Tree is empty. Add some nodes to get started!</p>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return <BinaryTreeRenderer root={root} currentStep={currentStep} />\r\n  }\r\n\r\n  const renderHeap = () => {\r\n    if (heapArray.length === 0) {\r\n      return (\r\n        <div className=\"flex items-center justify-center h-64 text-gray-500\">\r\n          <div className=\"text-center\">\r\n            <Layers className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\r\n            <p>Heap is empty. Add some elements to get started!</p>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return <HeapRenderer heap={heapArray} currentStep={currentStep} />\r\n  }\r\n\r\n  const renderBTree = () => {\r\n    if (!bTreeRoot) {\r\n      return (\r\n        <div className=\"flex items-center justify-center h-64 text-gray-500\">\r\n          <div className=\"text-center\">\r\n            <Database className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\r\n            <p>B-Tree is empty. Add some keys to get started!</p>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return <BTreeRenderer root={bTreeRoot} currentStep={currentStep} />\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100\">\r\n      {/* Header */}\r\n      <header className=\"bg-white shadow-sm border-b\">\r\n        <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className=\"p-2 bg-gradient-to-r from-green-500 to-blue-500 rounded-lg\">\r\n                <TreePine className=\"w-6 h-6 text-white\" />\r\n              </div>\r\n              <div>\r\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\r\n                  Advanced Tree Visualizer\r\n                </h1>\r\n                <p className=\"mt-1 text-gray-600\">Explore all types of trees with interactive animations</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <button\r\n                onClick={() => setShowTutorial(!showTutorial)}\r\n                className=\"flex items-center space-x-2 px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors\"\r\n              >\r\n                <BookOpen className=\"w-4 h-4\" />\r\n                <span>Tutorial</span>\r\n              </button>\r\n              <button\r\n                onClick={() => setShowCode(!showCode)}\r\n                className=\"flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors\"\r\n              >\r\n                <Code className=\"w-4 h-4\" />\r\n                <span>Code</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8\">\r\n        {/* Tutorial Panel */}\r\n        {showTutorial && (\r\n          <div className=\"mb-8 bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-6 border border-green-200\">\r\n            <div className=\"flex items-center space-x-2 mb-4\">\r\n              <Lightbulb className=\"w-5 h-5 text-green-600\" />\r\n              <h2 className=\"text-xl font-bold text-green-900\">{tutorialContent[treeType].title}</h2>\r\n            </div>\r\n            <p className=\"text-green-800 mb-4\">{tutorialContent[treeType].description}</p>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div className=\"bg-white rounded-lg p-4\">\r\n                <div className=\"flex items-center space-x-2 mb-2\">\r\n                  <Clock className=\"w-4 h-4 text-green-600\" />\r\n                  <span className=\"font-semibold text-green-800\">Time Complexity</span>\r\n                </div>\r\n                <p className=\"text-sm text-green-700\">{tutorialContent[treeType].complexity}</p>\r\n              </div>\r\n              <div className=\"bg-white rounded-lg p-4\">\r\n                <div className=\"flex items-center space-x-2 mb-2\">\r\n                  <Target className=\"w-4 h-4 text-blue-600\" />\r\n                  <span className=\"font-semibold text-blue-800\">Use Case</span>\r\n                </div>\r\n                <p className=\"text-sm text-blue-700\">{tutorialContent[treeType].useCase}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Tree Type Selector */}\r\n        <div className=\"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Choose Tree Type</h2>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-3\">\r\n            {([\"binary\", \"bst\", \"avl\", \"redblack\", \"heap\", \"btree\", \"bplus\"] as TreeType[]).map((type) => (\r\n              <button\r\n                key={type}\r\n                onClick={() => {\r\n                  setTreeType(type)\r\n                  clearTree()\r\n                }}\r\n                className={`p-3 rounded-xl border-2 transition-all duration-200 text-sm ${\r\n                  treeType === type\r\n                    ? \"border-green-500 bg-green-50 text-green-700\"\r\n                    : \"border-gray-200 hover:border-gray-300 hover:bg-gray-50\"\r\n                }`}\r\n              >\r\n                <div className=\"font-semibold capitalize\">\r\n                  {type === \"bst\"\r\n                    ? \"BST\"\r\n                    : type === \"avl\"\r\n                      ? \"AVL\"\r\n                      : type === \"redblack\"\r\n                        ? \"Red-Black\"\r\n                        : type === \"btree\"\r\n                          ? \"B-Tree\"\r\n                          : type === \"bplus\"\r\n                            ? \"B+ Tree\"\r\n                            : type}\r\n                </div>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\r\n          {/* Controls Panel */}\r\n          <div className=\"lg:col-span-1\">\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sticky top-8\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-6\">Operations</h2>\r\n\r\n              {/* Input Controls */}\r\n              <div className=\"space-y-4 mb-6\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Value</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={inputValue}\r\n                    onChange={(e) => setInputValue(e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\"\r\n                    placeholder=\"Enter value\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Search Value</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\"\r\n                    placeholder=\"Search for value\"\r\n                  />\r\n                </div>\r\n                {(treeType === \"btree\" || treeType === \"bplus\") && (\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">B-Tree Order</label>\r\n                    <input\r\n                      type=\"number\"\r\n                      value={bTreeOrder}\r\n                      onChange={(e) => setBTreeOrder(Number(e.target.value))}\r\n                      min=\"2\"\r\n                      max=\"10\"\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\"\r\n                    />\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Operation Buttons */}\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <h3 className=\"font-semibold text-gray-700 mb-2\">Basic Operations</h3>\r\n                  <div className=\"grid grid-cols-1 gap-2\">\r\n                    <button\r\n                      onClick={() => {\r\n                        const val = Number.parseInt(inputValue)\r\n                        if (!isNaN(val)) {\r\n                          if (treeType === \"heap\") {\r\n                            insertHeap(val)\r\n                          } else if (treeType === \"btree\" || treeType === \"bplus\") {\r\n                            insertBTree(val)\r\n                          } else if (treeType === \"avl\") {\r\n                            insertAVL(val)\r\n                          } else if (treeType === \"redblack\") {\r\n                            insertRedBlack(val)\r\n                          } else {\r\n                            insertBST(val)\r\n                          }\r\n                          setInputValue(\"\")\r\n                        }\r\n                      }}\r\n                      disabled={isAnimating || !inputValue}\r\n                      className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                    >\r\n                      <Plus className=\"w-4 h-4\" />\r\n                      <span>Insert</span>\r\n                    </button>\r\n                    <button\r\n                      onClick={() => {\r\n                        const val = Number.parseInt(searchTerm)\r\n                        if (!isNaN(val)) {\r\n                          searchTree(val)\r\n                          setSearchTerm(\"\")\r\n                        }\r\n                      }}\r\n                      disabled={isAnimating || !searchTerm || (!root && heapArray.length === 0 && !bTreeRoot)}\r\n                      className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                    >\r\n                      <Search className=\"w-4 h-4\" />\r\n                      <span>Search</span>\r\n                    </button>\r\n                    <button\r\n                      onClick={clearTree}\r\n                      className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\r\n                    >\r\n                      <RotateCcw className=\"w-4 h-4\" />\r\n                      <span>Clear Tree</span>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Traversal Operations (only for binary trees) */}\r\n                {(treeType === \"binary\" || treeType === \"bst\" || treeType === \"avl\" || treeType === \"redblack\") && (\r\n                  <div>\r\n                    <h3 className=\"font-semibold text-gray-700 mb-2\">Tree Traversals</h3>\r\n                    <div className=\"grid grid-cols-2 gap-2\">\r\n                      {([\"inorder\", \"preorder\", \"postorder\", \"levelorder\"] as TraversalType[]).map((traversal) => (\r\n                        <button\r\n                          key={traversal}\r\n                          onClick={() => {\r\n                            setSelectedTraversal(traversal)\r\n                            performTraversal(traversal)\r\n                          }}\r\n                          disabled={!root}\r\n                          className=\"px-3 py-2 text-xs bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                        >\r\n                          {traversal.charAt(0).toUpperCase() + traversal.slice(1)}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                    {traversalResult.length > 0 && (\r\n                      <div className=\"mt-2 p-2 bg-purple-50 rounded-lg\">\r\n                        <div className=\"text-xs font-semibold text-purple-800 mb-1\">\r\n                          {selectedTraversal.charAt(0).toUpperCase() + selectedTraversal.slice(1)} Result:\r\n                        </div>\r\n                        <div className=\"text-xs text-purple-700\">[{traversalResult.join(\", \")}]</div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Animation Controls */}\r\n              {animationSteps.length > 0 && (\r\n                <div className=\"mt-6 pt-6 border-t border-gray-200\">\r\n                  <h3 className=\"font-semibold text-gray-700 mb-4\">Animation Controls</h3>\r\n                  <div className=\"flex items-center justify-between mb-4\">\r\n                    <button\r\n                      onClick={prevStep}\r\n                      disabled={currentStepIndex === 0}\r\n                      className=\"p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    >\r\n                      <SkipBack className=\"w-4 h-4\" />\r\n                    </button>\r\n                    <button\r\n                      onClick={autoPlay ? pauseAnimation : playAnimation}\r\n                      disabled={currentStepIndex >= animationSteps.length - 1}\r\n                      className=\"p-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    >\r\n                      {autoPlay ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\r\n                    </button>\r\n                    <button\r\n                      onClick={nextStep}\r\n                      disabled={currentStepIndex >= animationSteps.length - 1}\r\n                      className=\"p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    >\r\n                      <SkipForward className=\"w-4 h-4\" />\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"text-center text-sm text-gray-600 mb-2\">\r\n                    Step {currentStepIndex + 1} of {animationSteps.length}\r\n                  </div>\r\n                  <div className=\"mb-4\">\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Animation Speed</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"200\"\r\n                      max=\"2000\"\r\n                      step=\"200\"\r\n                      value={animationSpeed}\r\n                      onChange={(e) => setAnimationSpeed(Number(e.target.value))}\r\n                      className=\"w-full\"\r\n                    />\r\n                    <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\r\n                      <span>Fast</span>\r\n                      <span>Slow</span>\r\n                    </div>\r\n                  </div>\r\n                  <button\r\n                    onClick={resetAnimation}\r\n                    className=\"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\r\n                  >\r\n                    <RotateCcw className=\"w-4 h-4\" />\r\n                    <span>Reset</span>\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Visualization Panel */}\r\n          <div className=\"lg:col-span-3 space-y-8\">\r\n            {/* Main Visualization */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <div className=\"flex items-center justify-between mb-6\">\r\n                <h2 className=\"text-xl font-bold text-gray-900\">{tutorialContent[treeType].title}</h2>\r\n                <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\r\n                  {treeType === \"heap\" && <span>Heap Size: {heapArray.length}</span>}\r\n                  {(treeType === \"binary\" || treeType === \"bst\" || treeType === \"avl\" || treeType === \"redblack\") &&\r\n                    root && <span>Height: {getHeight(root)}</span>}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Tree Visualization */}\r\n              <div className=\"min-h-[400px] bg-gradient-to-br from-green-50 to-blue-50 rounded-xl p-6 overflow-auto\">\r\n                {treeType === \"heap\"\r\n                  ? renderHeap()\r\n                  : treeType === \"btree\" || treeType === \"bplus\"\r\n                    ? renderBTree()\r\n                    : renderBinaryTree()}\r\n              </div>\r\n\r\n              {/* Current Step Information */}\r\n              {currentStep && (\r\n                <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\r\n                  <div className=\"flex items-center space-x-2 mb-2\">\r\n                    <Zap className=\"w-4 h-4 text-green-600\" />\r\n                    <span className=\"font-semibold text-gray-900\">Current Step</span>\r\n                  </div>\r\n                  <p className=\"text-gray-700 mb-3\">{currentStep.description}</p>\r\n                  {showCode && (\r\n                    <pre className=\"bg-gray-800 text-green-400 p-3 rounded text-sm overflow-x-auto\">\r\n                      <code>{currentStep.code}</code>\r\n                    </pre>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Operation History */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Operation History</h2>\r\n              <div className=\"max-h-60 overflow-y-auto space-y-2\">\r\n                {operationHistory.length === 0 ? (\r\n                  <p className=\"text-gray-500 italic\">No operations performed yet</p>\r\n                ) : (\r\n                  operationHistory.map((operation, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className=\"p-3 bg-gray-50 rounded-lg text-sm text-gray-700 border-l-4 border-green-400\"\r\n                    >\r\n                      {operation}\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Binary Tree Renderer Component\r\nfunction BinaryTreeRenderer({ root, currentStep }: { root: TreeNode; currentStep?: AnimationStep }) {\r\n  const renderNode = (node: TreeNode | null, x: number, y: number, level: number): JSX.Element | null => {\r\n    if (!node) return null\r\n\r\n    const isHighlighted = currentStep?.nodeId === node.id || node.isHighlighted\r\n    const isNew = node.isNew\r\n    const isDeleting = node.isDeleting\r\n\r\n    return (\r\n      <g key={node.id}>\r\n        {/* Left child connection */}\r\n        {node.left && <line x1={x} y1={y} x2={x - 80 / (level + 1)} y2={y + 80} stroke=\"#94a3b8\" strokeWidth=\"2\" />}\r\n\r\n        {/* Right child connection */}\r\n        {node.right && <line x1={x} y1={y} x2={x + 80 / (level + 1)} y2={y + 80} stroke=\"#94a3b8\" strokeWidth=\"2\" />}\r\n\r\n        {/* Node circle */}\r\n        <circle\r\n          cx={x}\r\n          cy={y}\r\n          r=\"20\"\r\n          fill={\r\n            isHighlighted\r\n              ? \"#fbbf24\"\r\n              : isNew\r\n                ? \"#10b981\"\r\n                : isDeleting\r\n                  ? \"#ef4444\"\r\n                  : node.color === \"red\"\r\n                    ? \"#ef4444\"\r\n                    : node.color === \"black\"\r\n                      ? \"#374151\"\r\n                      : \"#3b82f6\"\r\n          }\r\n          stroke={isHighlighted ? \"#f59e0b\" : \"#1f2937\"}\r\n          strokeWidth=\"2\"\r\n          className=\"transition-all duration-300\"\r\n        />\r\n\r\n        {/* Node value */}\r\n        <text\r\n          x={x}\r\n          y={y + 5}\r\n          textAnchor=\"middle\"\r\n          fill={node.color === \"black\" || isDeleting ? \"white\" : \"white\"}\r\n          fontSize=\"14\"\r\n          fontWeight=\"bold\"\r\n        >\r\n          {node.value}\r\n        </text>\r\n\r\n        {/* Recursively render children */}\r\n        {node.left && renderNode(node.left, x - 80 / (level + 1), y + 80, level + 1)}\r\n        {node.right && renderNode(node.right, x + 80 / (level + 1), y + 80, level + 1)}\r\n      </g>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <svg width=\"100%\" height=\"400\" viewBox=\"0 0 800 400\">\r\n      {renderNode(root, 400, 50, 0)}\r\n    </svg>\r\n  )\r\n}\r\n\r\n// Heap Renderer Component\r\nfunction HeapRenderer({ heap, currentStep }: { heap: HeapNode[]; currentStep?: AnimationStep }) {\r\n  const renderHeapNode = (index: number, x: number, y: number): JSX.Element | null => {\r\n    if (index >= heap.length) return null\r\n\r\n    const node = heap[index]\r\n    const isHighlighted = currentStep?.nodeId === node.id || node.isHighlighted\r\n    const isNew = node.isNew\r\n    const isSwapping = node.isSwapping\r\n\r\n    const leftChildIndex = 2 * index + 1\r\n    const rightChildIndex = 2 * index + 2\r\n\r\n    return (\r\n      <g key={node.id}>\r\n        {/* Left child connection */}\r\n        {leftChildIndex < heap.length && (\r\n          <line x1={x} y1={y} x2={x - 60} y2={y + 60} stroke=\"#94a3b8\" strokeWidth=\"2\" />\r\n        )}\r\n\r\n        {/* Right child connection */}\r\n        {rightChildIndex < heap.length && (\r\n          <line x1={x} y1={y} x2={x + 60} y2={y + 60} stroke=\"#94a3b8\" strokeWidth=\"2\" />\r\n        )}\r\n\r\n        {/* Node circle */}\r\n        <circle\r\n          cx={x}\r\n          cy={y}\r\n          r=\"20\"\r\n          fill={isHighlighted ? \"#fbbf24\" : isNew ? \"#10b981\" : isSwapping ? \"#f97316\" : \"#8b5cf6\"}\r\n          stroke=\"#1f2937\"\r\n          strokeWidth=\"2\"\r\n          className=\"transition-all duration-300\"\r\n        />\r\n\r\n        {/* Node value */}\r\n        <text x={x} y={y + 5} textAnchor=\"middle\" fill=\"white\" fontSize=\"14\" fontWeight=\"bold\">\r\n          {node.value}\r\n        </text>\r\n\r\n        {/* Array index */}\r\n        <text x={x} y={y - 30} textAnchor=\"middle\" fill=\"#6b7280\" fontSize=\"10\">\r\n          [{index}]\r\n        </text>\r\n\r\n        {/* Recursively render children */}\r\n        {leftChildIndex < heap.length && renderHeapNode(leftChildIndex, x - 60, y + 60)}\r\n        {rightChildIndex < heap.length && renderHeapNode(rightChildIndex, x + 60, y + 60)}\r\n      </g>\r\n    )\r\n  }\r\n\r\n  if (heap.length === 0) return null\r\n\r\n  return (\r\n    <svg width=\"100%\" height=\"400\" viewBox=\"0 0 800 400\">\r\n      {renderHeapNode(0, 400, 50)}\r\n    </svg>\r\n  )\r\n}\r\n\r\n// B-Tree Renderer Component\r\nfunction BTreeRenderer({ root, currentStep }: { root: BTreeNode; currentStep?: AnimationStep }) {\r\n  const renderBTreeNode = (node: BTreeNode, x: number, y: number, level: number): JSX.Element => {\r\n    const isHighlighted = currentStep?.nodeId === node.id || node.isHighlighted\r\n    const isNew = node.isNew\r\n\r\n    const nodeWidth = Math.max(100, node.keys.length * 30 + 20)\r\n\r\n    return (\r\n      <g key={node.id}>\r\n        {/* Node rectangle */}\r\n        <rect\r\n          x={x - nodeWidth / 2}\r\n          y={y - 15}\r\n          width={nodeWidth}\r\n          height=\"30\"\r\n          fill={isHighlighted ? \"#fbbf24\" : isNew ? \"#10b981\" : \"#06b6d4\"}\r\n          stroke=\"#1f2937\"\r\n          strokeWidth=\"2\"\r\n          rx=\"5\"\r\n          className=\"transition-all duration-300\"\r\n        />\r\n\r\n        {/* Keys */}\r\n        {node.keys.map((key, index) => (\r\n          <text\r\n            key={index}\r\n            x={x - nodeWidth / 2 + 15 + index * 30}\r\n            y={y + 5}\r\n            fill=\"white\"\r\n            fontSize=\"12\"\r\n            fontWeight=\"bold\"\r\n          >\r\n            {key}\r\n          </text>\r\n        ))}\r\n\r\n        {/* Children connections and rendering */}\r\n        {node.children.map((child, index) => {\r\n          const childX = x - nodeWidth / 2 + (index + 1) * (nodeWidth / (node.children.length + 1))\r\n          const childY = y + 80\r\n\r\n          return (\r\n            <g key={child.id}>\r\n              {/* Connection line */}\r\n              <line\r\n                x1={x - nodeWidth / 2 + 15 + index * 30}\r\n                y1={y + 15}\r\n                x2={childX}\r\n                y2={childY - 15}\r\n                stroke=\"#94a3b8\"\r\n                strokeWidth=\"2\"\r\n              />\r\n              {/* Recursive child rendering */}\r\n              {renderBTreeNode(child, childX, childY, level + 1)}\r\n            </g>\r\n          )\r\n        })}\r\n      </g>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <svg width=\"100%\" height=\"400\" viewBox=\"0 0 800 400\">\r\n      {renderBTreeNode(root, 400, 50, 0)}\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default TreeVisualizerPage\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}