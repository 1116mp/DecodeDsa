{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\Hacktober\\\\DecodeDsa\\\\src\\\\components\\\\SortingVisualizer.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from \"react\";\nimport { Button } from \"./ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Badge } from \"./ui/badge\";\nimport { ArrowUpDown, Code } from \"lucide-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Move sorting functions outside the component\nconst bubbleSort = (arr, steps) => {\n  const n = arr.length;\n  for (let i = 0; i < n - 1; i++) {\n    let swapped = false;\n    steps.push({\n      array: [...arr],\n      description: `Pass ${i + 1}: Starting bubble sort pass`,\n      code: `// Pass ${i + 1}\\nfor (let j = 0; j < ${n - i - 1}; j++) {`\n    });\n    for (let j = 0; j < n - i - 1; j++) {\n      steps.push({\n        array: [...arr],\n        description: `Comparing elements at positions ${j} and ${j + 1}: ${arr[j]} and ${arr[j + 1]}`,\n        code: `if (arr[${j}] > arr[${j + 1}]) {\\n  // ${arr[j]} > ${arr[j + 1]} is ${arr[j] > arr[j + 1]}\\n}`,\n        comparing: [j, j + 1]\n      });\n      if (arr[j] > arr[j + 1]) {\n        ;\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        swapped = true;\n        steps.push({\n          array: [...arr],\n          description: `Swapped ${arr[j]} and ${arr[j + 1]} because ${arr[j + 1]} < ${arr[j]}`,\n          code: `// Swap elements\\n[arr[${j}], arr[${j + 1}]] = [arr[${j + 1}], arr[${j}]];`,\n          swapping: [j, j + 1]\n        });\n      }\n    }\n    if (!swapped) {\n      steps.push({\n        array: [...arr],\n        description: `No swaps in this pass - array is sorted!`,\n        code: `// No swaps occurred, array is sorted\\nbreak;`\n      });\n      break;\n    }\n  }\n  steps.push({\n    array: [...arr],\n    description: `Sorting complete! Final sorted array: [${arr.join(\", \")}]`,\n    code: `// Bubble sort completed\\n// Final array: [${arr.join(\", \")}]`,\n    sorted: Array.from({\n      length: arr.length\n    }, (_, i) => i)\n  });\n  return steps;\n};\nconst selectionSort = (arr, steps) => {\n  const n = arr.length;\n  for (let i = 0; i < n - 1; i++) {\n    let minIdx = i;\n    steps.push({\n      array: [...arr],\n      description: `Pass ${i + 1}: Finding minimum element in unsorted portion`,\n      code: `// Pass ${i + 1}\\nlet minIdx = ${i};\\nlet minValue = arr[${i}]; // ${arr[i]}`\n    });\n    for (let j = i + 1; j < n; j++) {\n      steps.push({\n        array: [...arr],\n        description: `Comparing arr[${minIdx}] = ${arr[minIdx]} with arr[${j}] = ${arr[j]}`,\n        code: `if (arr[${j}] < arr[${minIdx}]) {\\n  // ${arr[j]} < ${arr[minIdx]} is ${arr[j] < arr[minIdx]}\\n}`,\n        comparing: [minIdx, j]\n      });\n      if (arr[j] < arr[minIdx]) {\n        minIdx = j;\n        steps.push({\n          array: [...arr],\n          description: `New minimum found: ${arr[j]} at position ${j}`,\n          code: `minIdx = ${j}; // New minimum: ${arr[j]}`\n        });\n      }\n    }\n    if (minIdx !== i) {\n      steps.push({\n        array: [...arr],\n        description: `Swapping arr[${i}] = ${arr[i]} with arr[${minIdx}] = ${arr[minIdx]}`,\n        code: `// Swap minimum with first unsorted element\\n[arr[${i}], arr[${minIdx}]] = [arr[${minIdx}], arr[${i}]];`,\n        swapping: [i, minIdx]\n      });\n      [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n    }\n    steps.push({\n      array: [...arr],\n      description: `Position ${i} is now sorted with value ${arr[i]}`,\n      code: `// Position ${i} is now in correct place`,\n      sorted: Array.from({\n        length: i + 1\n      }, (_, idx) => idx)\n    });\n  }\n  steps.push({\n    array: [...arr],\n    description: `Selection sort complete! Final array: [${arr.join(\", \")}]`,\n    code: `// Selection sort completed\\n// Final array: [${arr.join(\", \")}]`,\n    sorted: Array.from({\n      length: arr.length\n    }, (_, i) => i)\n  });\n  return steps;\n};\nconst insertionSort = (arr, steps) => {\n  for (let i = 1; i < arr.length; i++) {\n    const key = arr[i];\n    let j = i - 1;\n    steps.push({\n      array: [...arr],\n      description: `Pass ${i}: Inserting ${key} into sorted portion`,\n      code: `// Pass ${i}\\nlet key = arr[${i}]; // ${key}\\nlet j = ${i - 1};`,\n      comparing: [i]\n    });\n    while (j >= 0 && arr[j] > key) {\n      steps.push({\n        array: [...arr],\n        description: `Comparing ${arr[j]} with ${key}. Since ${arr[j]} > ${key}, shift ${arr[j]} right`,\n        code: `while (j >= 0 && arr[j] > key) {\\n  arr[j + 1] = arr[j]; // Shift ${arr[j]} right\\n  j--;\\n}`,\n        comparing: [j, j + 1]\n      });\n      arr[j + 1] = arr[j];\n      j--;\n      steps.push({\n        array: [...arr],\n        description: `Shifted element right, continue checking position ${j >= 0 ? j : \"none\"}`,\n        code: `// Element shifted, j = ${j}`\n      });\n    }\n    arr[j + 1] = key;\n    steps.push({\n      array: [...arr],\n      description: `Inserted ${key} at position ${j + 1}`,\n      code: `arr[${j + 1}] = key; // Insert ${key}`,\n      sorted: Array.from({\n        length: i + 1\n      }, (_, idx) => idx)\n    });\n  }\n  steps.push({\n    array: [...arr],\n    description: `Insertion sort complete! Final array: [${arr.join(\", \")}]`,\n    code: `// Insertion sort completed\\n// Final array: [${arr.join(\", \")}]`,\n    sorted: Array.from({\n      length: arr.length\n    }, (_, i) => i)\n  });\n  return steps;\n};\nconst mergeSort = (arr, steps) => {\n  const mergeSortHelper = (arr, left, right, depth = 0) => {\n    if (left >= right) return;\n    const mid = Math.floor((left + right) / 2);\n    steps.push({\n      array: [...arr],\n      description: `Divide: Splitting array from index ${left} to ${right} at middle ${mid}`,\n      code: `// Divide phase (depth ${depth})\\nlet mid = Math.floor((${left} + ${right}) / 2); // ${mid}`\n    });\n    mergeSortHelper(arr, left, mid, depth + 1);\n    mergeSortHelper(arr, mid + 1, right, depth + 1);\n\n    // Merge phase\n    const leftArr = arr.slice(left, mid + 1);\n    const rightArr = arr.slice(mid + 1, right + 1);\n    steps.push({\n      array: [...arr],\n      description: `Merge: Combining [${leftArr.join(\", \")}] and [${rightArr.join(\", \")}]`,\n      code: `// Merge phase\\nleft = [${leftArr.join(\", \")}]\\nright = [${rightArr.join(\", \")}]`\n    });\n    let i = 0,\n      j = 0,\n      k = left;\n    while (i < leftArr.length && j < rightArr.length) {\n      if (leftArr[i] <= rightArr[j]) {\n        arr[k] = leftArr[i];\n        steps.push({\n          array: [...arr],\n          description: `${leftArr[i]} ≤ ${rightArr[j]}, so place ${leftArr[i]} at position ${k}`,\n          code: `arr[${k}] = ${leftArr[i]}; // ${leftArr[i]} ≤ ${rightArr[j]}`\n        });\n        i++;\n      } else {\n        arr[k] = rightArr[j];\n        steps.push({\n          array: [...arr],\n          description: `${rightArr[j]} < ${leftArr[i]}, so place ${rightArr[j]} at position ${k}`,\n          code: `arr[${k}] = ${rightArr[j]}; // ${rightArr[j]} < ${leftArr[i]}`\n        });\n        j++;\n      }\n      k++;\n    }\n    while (i < leftArr.length) {\n      arr[k] = leftArr[i];\n      steps.push({\n        array: [...arr],\n        description: `Copy remaining element ${leftArr[i]} to position ${k}`,\n        code: `arr[${k}] = ${leftArr[i]}; // Copy remaining`\n      });\n      i++;\n      k++;\n    }\n    while (j < rightArr.length) {\n      arr[k] = rightArr[j];\n      steps.push({\n        array: [...arr],\n        description: `Copy remaining element ${rightArr[j]} to position ${k}`,\n        code: `arr[${k}] = ${rightArr[j]}; // Copy remaining`\n      });\n      j++;\n      k++;\n    }\n  };\n  mergeSortHelper(arr, 0, arr.length - 1);\n  steps.push({\n    array: [...arr],\n    description: `Merge sort complete! Final array: [${arr.join(\", \")}]`,\n    code: `// Merge sort completed\\n// Final array: [${arr.join(\", \")}]`,\n    sorted: Array.from({\n      length: arr.length\n    }, (_, i) => i)\n  });\n  return steps;\n};\nconst quickSort = (arr, steps) => {\n  const quickSortHelper = (arr, low, high, depth = 0) => {\n    if (low < high) {\n      steps.push({\n        array: [...arr],\n        description: `Partitioning array from index ${low} to ${high}`,\n        code: `// Quick sort (depth ${depth})\\n// Partition from ${low} to ${high}`\n      });\n      const pi = partition(arr, low, high);\n      steps.push({\n        array: [...arr],\n        description: `Pivot ${arr[pi]} is now in correct position ${pi}`,\n        code: `// Pivot ${arr[pi]} placed at position ${pi}`,\n        pivot: pi\n      });\n      quickSortHelper(arr, low, pi - 1, depth + 1);\n      quickSortHelper(arr, pi + 1, high, depth + 1);\n    }\n  };\n  const partition = (arr, low, high) => {\n    const pivot = arr[high];\n    let i = low - 1;\n    steps.push({\n      array: [...arr],\n      description: `Choosing pivot: ${pivot} (last element)`,\n      code: `let pivot = arr[${high}]; // ${pivot}\\nlet i = ${low - 1};`,\n      pivot: high\n    });\n    for (let j = low; j < high; j++) {\n      steps.push({\n        array: [...arr],\n        description: `Comparing ${arr[j]} with pivot ${pivot}`,\n        code: `if (arr[${j}] <= pivot) {\\n  // ${arr[j]} <= ${pivot} is ${arr[j] <= pivot}\\n}`,\n        comparing: [j, high]\n      });\n      if (arr[j] <= pivot) {\n        i++;\n        if (i !== j) {\n          steps.push({\n            array: [...arr],\n            description: `${arr[j]} ≤ ${pivot}, so swap arr[${i}] and arr[${j}]`,\n            code: `i++; // i = ${i}\\n[arr[${i}], arr[${j}]] = [arr[${j}], arr[${i}]];`,\n            swapping: [i, j]\n          });\n          [arr[i], arr[j]] = [arr[j], arr[i]];\n        } else {\n          steps.push({\n            array: [...arr],\n            description: `${arr[j]} ≤ ${pivot}, no swap needed`,\n            code: `i++; // i = ${i}`\n          });\n        }\n      }\n    }\n    steps.push({\n      array: [...arr],\n      description: `Place pivot ${pivot} in correct position by swapping with arr[${i + 1}]`,\n      code: `[arr[${i + 1}], arr[${high}]] = [arr[${high}], arr[${i + 1}]];`,\n      swapping: [i + 1, high]\n    });\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n    return i + 1;\n  };\n  quickSortHelper(arr, 0, arr.length - 1);\n  steps.push({\n    array: [...arr],\n    description: `Quick sort complete! Final array: [${arr.join(\", \")}]`,\n    code: `// Quick sort completed\\n// Final array: [${arr.join(\", \")}]`,\n    sorted: Array.from({\n      length: arr.length\n    }, (_, i) => i)\n  });\n  return steps;\n};\nconst heapSort = (arr, steps) => {\n  const n = arr.length;\n\n  // Build max heap\n  steps.push({\n    array: [...arr],\n    description: `Building max heap from array`,\n    code: `// Build max heap\\n// Start from last non-leaf node`\n  });\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(arr, n, i, steps);\n  }\n  steps.push({\n    array: [...arr],\n    description: `Max heap built: [${arr.join(\", \")}]`,\n    code: `// Max heap construction complete`\n  });\n\n  // Extract elements from heap one by one\n  for (let i = n - 1; i > 0; i--) {\n    steps.push({\n      array: [...arr],\n      description: `Move current root ${arr[0]} to end (position ${i})`,\n      code: `// Move root to end\\n[arr[0], arr[${i}]] = [arr[${i}], arr[0]];`,\n      swapping: [0, i]\n    });\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    steps.push({\n      array: [...arr],\n      description: `Heapify remaining ${i} elements`,\n      code: `// Heapify reduced heap of size ${i}`,\n      sorted: Array.from({\n        length: n - i\n      }, (_, idx) => n - 1 - idx)\n    });\n    heapify(arr, i, 0, steps);\n  }\n  steps.push({\n    array: [...arr],\n    description: `Heap sort complete! Final array: [${arr.join(\", \")}]`,\n    code: `// Heap sort completed\\n// Final array: [${arr.join(\", \")}]`,\n    sorted: Array.from({\n      length: arr.length\n    }, (_, i) => i)\n  });\n  return steps;\n};\nconst heapify = (arr, n, i, steps) => {\n  let largest = i;\n  const left = 2 * i + 1;\n  const right = 2 * i + 2;\n  if (left < n && arr[left] > arr[largest]) {\n    largest = left;\n  }\n  if (right < n && arr[right] > arr[largest]) {\n    largest = right;\n  }\n  if (largest !== i) {\n    steps.push({\n      array: [...arr],\n      description: `Swap ${arr[i]} with ${arr[largest]} to maintain heap property`,\n      code: `// Heapify: swap parent with larger child\\n[arr[${i}], arr[${largest}]] = [arr[${largest}], arr[${i}]];`,\n      swapping: [i, largest]\n    });\n    const temp = arr[i];\n    arr[i] = arr[largest];\n    arr[largest] = temp;\n    heapify(arr, n, largest, steps);\n  }\n};\nconst SortingVisualizer = ({\n  algorithm,\n  inputArray\n}) => {\n  _s();\n  var _steps$currentStep, _steps$currentStep2, _steps$currentStep3;\n  const [steps, setSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [sortResult, setSortResult] = useState(null);\n  const generateSteps = useCallback((algorithm, array) => {\n    const steps = [];\n    const arr = [...array];\n    steps.push({\n      array: [...arr],\n      description: `Initial array: [${arr.join(\", \")}]`,\n      code: `// Initial array\\nlet arr = [${arr.join(\", \")}];`\n    });\n    switch (algorithm) {\n      case \"Bubble Sort\":\n        return bubbleSort(arr, steps);\n      case \"Selection Sort\":\n        return selectionSort(arr, steps);\n      case \"Insertion Sort\":\n        return insertionSort(arr, steps);\n      case \"Merge Sort\":\n        return mergeSort(arr, steps);\n      case \"Quick Sort\":\n        return quickSort(arr, steps);\n      case \"Heap Sort\":\n        return heapSort(arr, steps);\n      default:\n        return steps;\n    }\n  }, []);\n  useEffect(() => {\n    const array = inputArray.split(\" \").map(Number).filter(n => !isNaN(n));\n    const newSteps = generateSteps(algorithm, array);\n    setSteps(newSteps);\n    setCurrentStep(0);\n\n    // Calculate sort metrics\n    const comparisons = newSteps.filter(step => {\n      var _step$comparing;\n      return (_step$comparing = step.comparing) === null || _step$comparing === void 0 ? void 0 : _step$comparing.length;\n    }).length;\n    const swaps = newSteps.filter(step => {\n      var _step$swapping;\n      return (_step$swapping = step.swapping) === null || _step$swapping === void 0 ? void 0 : _step$swapping.length;\n    }).length;\n    setSortResult({\n      comparisons,\n      swaps,\n      steps: newSteps.length\n    });\n  }, [algorithm, inputArray, generateSteps]);\n  const handleNext = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n  const handleReset = () => {\n    setCurrentStep(0);\n  };\n  const getElementColor = index => {\n    var _step$sorted, _step$swapping2, _step$comparing2;\n    const step = steps[currentStep];\n    if (!step) return \"bg-blue-500\";\n    if ((_step$sorted = step.sorted) !== null && _step$sorted !== void 0 && _step$sorted.includes(index)) return \"bg-green-500\";\n    if ((_step$swapping2 = step.swapping) !== null && _step$swapping2 !== void 0 && _step$swapping2.includes(index)) return \"bg-red-500\";\n    if ((_step$comparing2 = step.comparing) !== null && _step$comparing2 !== void 0 && _step$comparing2.includes(index)) return \"bg-yellow-500\";\n    if (step.pivot === index) return \"bg-purple-500\";\n    return \"bg-blue-500\";\n  };\n  const getCompleteAlgorithmCode = algorithm => {\n    switch (algorithm) {\n      case \"Bubble Sort\":\n        return `function bubbleSort(arr) {\n  const n = arr.length;\n  \n  for (let i = 0; i < n - 1; i++) {\n    let swapped = false;\n    \n    for (let j = 0; j < n - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        // Swap elements\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        swapped = true;\n      }\n    }\n    \n    // If no swapping occurred, array is sorted\n    if (!swapped) break;\n  }\n  \n  return arr;\n}`;\n      case \"Selection Sort\":\n        return `function selectionSort(arr) {\n  const n = arr.length;\n  \n  for (let i = 0; i < n - 1; i++) {\n    let minIdx = i;\n    \n    // Find minimum element in remaining array\n    for (let j = i + 1; j < n; j++) {\n      if (arr[j] < arr[minIdx]) {\n        minIdx = j;\n      }\n    }\n    \n    // Swap minimum element with first element\n    if (minIdx !== i) {\n      [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n    }\n  }\n  \n  return arr;\n}`;\n      case \"Insertion Sort\":\n        return `function insertionSort(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    let key = arr[i];\n    let j = i - 1;\n    \n    // Move elements greater than key one position ahead\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      j--;\n    }\n    \n    // Insert key at correct position\n    arr[j + 1] = key;\n  }\n  \n  return arr;\n}`;\n      case \"Merge Sort\":\n        return `function mergeSort(arr) {\n  if (arr.length <= 1) return arr;\n  \n  const mid = Math.floor(arr.length / 2);\n  const left = mergeSort(arr.slice(0, mid));\n  const right = mergeSort(arr.slice(mid));\n  \n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n  let result = [];\n  let i = 0, j = 0;\n  \n  while (i < left.length && j < right.length) {\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i++;\n    } else {\n      result.push(right[j]);\n      j++;\n    }\n  }\n  \n  // Add remaining elements\n  while (i < left.length) {\n    result.push(left[i]);\n    i++;\n  }\n  \n  while (j < right.length) {\n    result.push(right[j]);\n    j++;\n  }\n  \n  return result;\n}`;\n      case \"Quick Sort\":\n        return `function quickSort(arr, low = 0, high = arr.length - 1) {\n  if (low < high) {\n    const pi = partition(arr, low, high);\n    \n    quickSort(arr, low, pi - 1);\n    quickSort(arr, pi + 1, high);\n  }\n  \n  return arr;\n}\n\nfunction partition(arr, low, high) {\n  const pivot = arr[high];\n  let i = low - 1;\n  \n  for (let j = low; j < high; j++) {\n    if (arr[j] <= pivot) {\n      i++;\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n  }\n  \n  [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n  return i + 1;\n}`;\n      case \"Heap Sort\":\n        return `function heapSort(arr) {\n  const n = arr.length;\n  \n  // Build max heap\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(arr, n, i);\n  }\n  \n  // Extract elements from heap one by one\n  for (let i = n - 1; i > 0; i--) {\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    heapify(arr, i, 0);\n  }\n  \n  return arr;\n}\n\nfunction heapify(arr, n, i) {\n  let largest = i;\n  const left = 2 * i + 1;\n  const right = 2 * i + 2;\n  \n  if (left < n && arr[left] > arr[largest]) {\n    largest = left;\n  }\n  \n  if (right < n && arr[right] > arr[largest]) {\n    largest = right;\n  }\n  \n  if (largest !== i) {\n    [arr[i], arr[largest]] = [arr[largest], arr[i]];\n    heapify(arr, n, largest);\n  }\n}`;\n      default:\n        return \"// Algorithm implementation not available\";\n    }\n  };\n  if (steps.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center p-8\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-gray-500\",\n        children: \"Loading visualization...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [sortResult && /*#__PURE__*/_jsxDEV(Card, {\n      className: \"border-2 border-dashed border-gray-300\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        className: \"p-6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-blue-100 rounded-full\",\n              children: /*#__PURE__*/_jsxDEV(ArrowUpDown, {\n                className: \"w-6 h-6 text-blue-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 710,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 709,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"text-lg font-semibold\",\n                children: [algorithm, \" Statistics\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 713,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-gray-600\",\n                children: \"Step-by-step visualization of the sorting process\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 714,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 712,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-3 gap-4 text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-2xl font-bold text-blue-600\",\n                children: sortResult.comparisons\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 719,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm text-gray-500\",\n                children: \"Comparisons\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 720,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-2xl font-bold text-red-600\",\n                children: sortResult.swaps\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 723,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm text-gray-500\",\n                children: \"Swaps\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 724,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 722,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-2xl font-bold text-purple-600\",\n                children: sortResult.steps\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 727,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm text-gray-500\",\n                children: \"Total Steps\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 728,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 726,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 705,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg p-6 shadow-sm border\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(ArrowUpDown, {\n            className: \"w-5 h-5 mr-2 text-blue-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 13\n          }, this), \"Array Visualization\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-600\",\n          children: [\"Algorithm: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-semibold text-blue-600\",\n            children: algorithm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 744,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap items-center justify-center gap-2 p-4 bg-gray-50 rounded-lg min-h-[80px]\",\n        children: (_steps$currentStep = steps[currentStep]) === null || _steps$currentStep === void 0 ? void 0 : _steps$currentStep.array.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-12 h-12 flex items-center justify-center text-white rounded-md font-semibold transition-all duration-300 ${getElementColor(index)}`,\n            children: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xs text-gray-500 text-center mt-1\",\n            children: index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 748,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 737,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap items-center justify-center gap-4 text-sm bg-white rounded-lg p-4 shadow-sm border\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-4 h-4 bg-blue-500 rounded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Unsorted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 766,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-4 h-4 bg-yellow-500 rounded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Comparing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-4 h-4 bg-red-500 rounded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 773,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Swapping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 774,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 772,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-4 h-4 bg-purple-500 rounded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Pivot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 776,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-4 h-4 bg-green-500 rounded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Sorted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between bg-white rounded-lg p-4 shadow-sm border\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleReset,\n          variant: \"secondary\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handlePrevious,\n          disabled: currentStep === 0,\n          variant: \"secondary\",\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleNext,\n          disabled: currentStep === steps.length - 1,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 788,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Badge, {\n        variant: \"default\",\n        className: \"text-sm\",\n        children: [\"Step \", currentStep + 1, \" of \", steps.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 799,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CardTitle, {\n          className: \"text-lg flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Code, {\n            className: \"w-5 h-5 mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 808,\n            columnNumber: 13\n          }, this), \"Step Description\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-700 leading-relaxed\",\n          children: (_steps$currentStep2 = steps[currentStep]) === null || _steps$currentStep2 === void 0 ? void 0 : _steps$currentStep2.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 805,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CardTitle, {\n          className: \"text-lg\",\n          children: \"Code Execution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"bg-gray-900 text-green-400 p-4 rounded-md overflow-x-auto text-sm font-mono\",\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            children: (_steps$currentStep3 = steps[currentStep]) === null || _steps$currentStep3 === void 0 ? void 0 : _steps$currentStep3.code\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 824,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 818,\n      columnNumber: 7\n    }, this), currentStep === steps.length - 1 && /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(CardTitle, {\n          className: \"text-lg\",\n          children: [\"Complete \", algorithm, \" Implementation\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"bg-gray-900 text-green-400 p-4 rounded-md overflow-x-auto text-sm font-mono max-h-96 overflow-y-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            children: getCompleteAlgorithmCode(algorithm)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 p-3 bg-blue-50 rounded-md\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-blue-800\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\uD83D\\uDCA1 Complete Implementation:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 841,\n              columnNumber: 17\n            }, this), \" This is the full \", algorithm, \" algorithm that you just visualized step by step. You can copy this code and use it in your own projects!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 839,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 835,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 831,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 702,\n    columnNumber: 5\n  }, this);\n};\n_s(SortingVisualizer, \"uynEFigKsAZbTb3CooiKRx8Qlmc=\");\n_c = SortingVisualizer;\nexport default SortingVisualizer;\nvar _c;\n$RefreshReg$(_c, \"SortingVisualizer\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useEffect","useState","useCallback","Button","Card","CardContent","CardHeader","CardTitle","Badge","ArrowUpDown","Code","jsxDEV","_jsxDEV","bubbleSort","arr","steps","n","length","i","swapped","push","array","description","code","j","comparing","swapping","join","sorted","Array","from","_","selectionSort","minIdx","idx","insertionSort","key","mergeSort","mergeSortHelper","left","right","depth","mid","Math","floor","leftArr","slice","rightArr","k","quickSort","quickSortHelper","low","high","pi","partition","pivot","heapSort","heapify","largest","temp","SortingVisualizer","algorithm","inputArray","_steps$currentStep","_steps$currentStep2","_steps$currentStep3","setSteps","currentStep","setCurrentStep","sortResult","setSortResult","generateSteps","split","map","Number","filter","isNaN","newSteps","comparisons","step","_step$comparing","swaps","_step$swapping","handleNext","handlePrevious","handleReset","getElementColor","index","_step$sorted","_step$swapping2","_step$comparing2","includes","getCompleteAlgorithmCode","className","children","fileName","lineNumber","columnNumber","value","onClick","variant","disabled","_c","$RefreshReg$"],"sources":["D:/Hacktober/DecodeDsa/src/components/SortingVisualizer.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { useEffect, useState, useCallback } from \"react\"\r\nimport { Button } from \"./ui/button\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\"\r\nimport { Badge } from \"./ui/badge\"\r\nimport { ArrowUpDown, Code } from \"lucide-react\"\r\n\r\ninterface SortingVisualizerProps {\r\n  algorithm: string\r\n  inputArray: string\r\n}\r\n\r\ninterface Step {\r\n  array: number[]\r\n  description: string\r\n  code: string\r\n  comparing?: number[]\r\n  swapping?: number[]\r\n  sorted?: number[]\r\n  pivot?: number\r\n}\r\n\r\ninterface SortResult {\r\n  comparisons: number\r\n  swaps: number\r\n  steps: number\r\n}\r\n\r\n// Move sorting functions outside the component\r\nconst bubbleSort = (arr: number[], steps: Step[]): Step[] => {\r\n  const n = arr.length\r\n\r\n  for (let i = 0; i < n - 1; i++) {\r\n    let swapped = false\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Pass ${i + 1}: Starting bubble sort pass`,\r\n      code: `// Pass ${i + 1}\\nfor (let j = 0; j < ${n - i - 1}; j++) {`,\r\n    })\r\n\r\n    for (let j = 0; j < n - i - 1; j++) {\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Comparing elements at positions ${j} and ${j + 1}: ${arr[j]} and ${arr[j + 1]}`,\r\n        code: `if (arr[${j}] > arr[${j + 1}]) {\\n  // ${arr[j]} > ${arr[j + 1]} is ${arr[j] > arr[j + 1]}\\n}`,\r\n        comparing: [j, j + 1],\r\n      })\r\n\r\n      if (arr[j] > arr[j + 1]) {\r\n        ;[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]\r\n        swapped = true\r\n\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `Swapped ${arr[j]} and ${arr[j + 1]} because ${arr[j + 1]} < ${arr[j]}`,\r\n          code: `// Swap elements\\n[arr[${j}], arr[${j + 1}]] = [arr[${j + 1}], arr[${j}]];`,\r\n          swapping: [j, j + 1],\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!swapped) {\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `No swaps in this pass - array is sorted!`,\r\n        code: `// No swaps occurred, array is sorted\\nbreak;`,\r\n      })\r\n      break\r\n    }\r\n  }\r\n\r\n  steps.push({\r\n    array: [...arr],\r\n    description: `Sorting complete! Final sorted array: [${arr.join(\", \")}]`,\r\n    code: `// Bubble sort completed\\n// Final array: [${arr.join(\", \")}]`,\r\n    sorted: Array.from({ length: arr.length }, (_, i) => i),\r\n  })\r\n\r\n  return steps\r\n}\r\n\r\nconst selectionSort = (arr: number[], steps: Step[]): Step[] => {\r\n  const n = arr.length\r\n\r\n  for (let i = 0; i < n - 1; i++) {\r\n    let minIdx = i\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Pass ${i + 1}: Finding minimum element in unsorted portion`,\r\n      code: `// Pass ${i + 1}\\nlet minIdx = ${i};\\nlet minValue = arr[${i}]; // ${arr[i]}`,\r\n    })\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Comparing arr[${minIdx}] = ${arr[minIdx]} with arr[${j}] = ${arr[j]}`,\r\n        code: `if (arr[${j}] < arr[${minIdx}]) {\\n  // ${arr[j]} < ${arr[minIdx]} is ${arr[j] < arr[minIdx]}\\n}`,\r\n        comparing: [minIdx, j],\r\n      })\r\n\r\n      if (arr[j] < arr[minIdx]) {\r\n        minIdx = j\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `New minimum found: ${arr[j]} at position ${j}`,\r\n          code: `minIdx = ${j}; // New minimum: ${arr[j]}`,\r\n        })\r\n      }\r\n    }\r\n\r\n    if (minIdx !== i) {\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Swapping arr[${i}] = ${arr[i]} with arr[${minIdx}] = ${arr[minIdx]}`,\r\n        code: `// Swap minimum with first unsorted element\\n[arr[${i}], arr[${minIdx}]] = [arr[${minIdx}], arr[${i}]];`,\r\n        swapping: [i, minIdx],\r\n      })\r\n      ;[arr[i], arr[minIdx]] = [arr[minIdx], arr[i]]\r\n    }\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Position ${i} is now sorted with value ${arr[i]}`,\r\n      code: `// Position ${i} is now in correct place`,\r\n      sorted: Array.from({ length: i + 1 }, (_, idx) => idx),\r\n    })\r\n  }\r\n\r\n  steps.push({\r\n    array: [...arr],\r\n    description: `Selection sort complete! Final array: [${arr.join(\", \")}]`,\r\n    code: `// Selection sort completed\\n// Final array: [${arr.join(\", \")}]`,\r\n    sorted: Array.from({ length: arr.length }, (_, i) => i),\r\n  })\r\n\r\n  return steps\r\n}\r\n\r\nconst insertionSort = (arr: number[], steps: Step[]): Step[] => {\r\n  for (let i = 1; i < arr.length; i++) {\r\n    const key = arr[i]\r\n    let j = i - 1\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Pass ${i}: Inserting ${key} into sorted portion`,\r\n      code: `// Pass ${i}\\nlet key = arr[${i}]; // ${key}\\nlet j = ${i - 1};`,\r\n      comparing: [i],\r\n    })\r\n\r\n    while (j >= 0 && arr[j] > key) {\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Comparing ${arr[j]} with ${key}. Since ${arr[j]} > ${key}, shift ${arr[j]} right`,\r\n        code: `while (j >= 0 && arr[j] > key) {\\n  arr[j + 1] = arr[j]; // Shift ${arr[j]} right\\n  j--;\\n}`,\r\n        comparing: [j, j + 1],\r\n      })\r\n\r\n      arr[j + 1] = arr[j]\r\n      j--\r\n\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Shifted element right, continue checking position ${j >= 0 ? j : \"none\"}`,\r\n        code: `// Element shifted, j = ${j}`,\r\n      })\r\n    }\r\n\r\n    arr[j + 1] = key\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Inserted ${key} at position ${j + 1}`,\r\n      code: `arr[${j + 1}] = key; // Insert ${key}`,\r\n      sorted: Array.from({ length: i + 1 }, (_, idx) => idx),\r\n    })\r\n  }\r\n\r\n  steps.push({\r\n    array: [...arr],\r\n    description: `Insertion sort complete! Final array: [${arr.join(\", \")}]`,\r\n    code: `// Insertion sort completed\\n// Final array: [${arr.join(\", \")}]`,\r\n    sorted: Array.from({ length: arr.length }, (_, i) => i),\r\n  })\r\n\r\n  return steps\r\n}\r\n\r\nconst mergeSort = (arr: number[], steps: Step[]): Step[] => {\r\n  const mergeSortHelper = (arr: number[], left: number, right: number, depth = 0): void => {\r\n    if (left >= right) return\r\n\r\n    const mid = Math.floor((left + right) / 2)\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Divide: Splitting array from index ${left} to ${right} at middle ${mid}`,\r\n      code: `// Divide phase (depth ${depth})\\nlet mid = Math.floor((${left} + ${right}) / 2); // ${mid}`,\r\n    })\r\n\r\n    mergeSortHelper(arr, left, mid, depth + 1)\r\n    mergeSortHelper(arr, mid + 1, right, depth + 1)\r\n\r\n    // Merge phase\r\n    const leftArr = arr.slice(left, mid + 1)\r\n    const rightArr = arr.slice(mid + 1, right + 1)\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Merge: Combining [${leftArr.join(\", \")}] and [${rightArr.join(\", \")}]`,\r\n      code: `// Merge phase\\nleft = [${leftArr.join(\", \")}]\\nright = [${rightArr.join(\", \")}]`,\r\n    })\r\n\r\n    let i = 0,\r\n      j = 0,\r\n      k = left\r\n\r\n    while (i < leftArr.length && j < rightArr.length) {\r\n      if (leftArr[i] <= rightArr[j]) {\r\n        arr[k] = leftArr[i]\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `${leftArr[i]} ≤ ${rightArr[j]}, so place ${leftArr[i]} at position ${k}`,\r\n          code: `arr[${k}] = ${leftArr[i]}; // ${leftArr[i]} ≤ ${rightArr[j]}`,\r\n        })\r\n        i++\r\n      } else {\r\n        arr[k] = rightArr[j]\r\n        steps.push({\r\n          array: [...arr],\r\n          description: `${rightArr[j]} < ${leftArr[i]}, so place ${rightArr[j]} at position ${k}`,\r\n          code: `arr[${k}] = ${rightArr[j]}; // ${rightArr[j]} < ${leftArr[i]}`,\r\n        })\r\n        j++\r\n      }\r\n      k++\r\n    }\r\n\r\n    while (i < leftArr.length) {\r\n      arr[k] = leftArr[i]\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Copy remaining element ${leftArr[i]} to position ${k}`,\r\n        code: `arr[${k}] = ${leftArr[i]}; // Copy remaining`,\r\n      })\r\n      i++\r\n      k++\r\n    }\r\n\r\n    while (j < rightArr.length) {\r\n      arr[k] = rightArr[j]\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Copy remaining element ${rightArr[j]} to position ${k}`,\r\n        code: `arr[${k}] = ${rightArr[j]}; // Copy remaining`,\r\n      })\r\n      j++\r\n      k++\r\n    }\r\n  }\r\n\r\n  mergeSortHelper(arr, 0, arr.length - 1)\r\n\r\n  steps.push({\r\n    array: [...arr],\r\n    description: `Merge sort complete! Final array: [${arr.join(\", \")}]`,\r\n    code: `// Merge sort completed\\n// Final array: [${arr.join(\", \")}]`,\r\n    sorted: Array.from({ length: arr.length }, (_, i) => i),\r\n  })\r\n\r\n  return steps\r\n}\r\n\r\nconst quickSort = (arr: number[], steps: Step[]): Step[] => {\r\n  const quickSortHelper = (arr: number[], low: number, high: number, depth = 0): void => {\r\n    if (low < high) {\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Partitioning array from index ${low} to ${high}`,\r\n        code: `// Quick sort (depth ${depth})\\n// Partition from ${low} to ${high}`,\r\n      })\r\n\r\n      const pi = partition(arr, low, high)\r\n\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Pivot ${arr[pi]} is now in correct position ${pi}`,\r\n        code: `// Pivot ${arr[pi]} placed at position ${pi}`,\r\n        pivot: pi,\r\n      })\r\n\r\n      quickSortHelper(arr, low, pi - 1, depth + 1)\r\n      quickSortHelper(arr, pi + 1, high, depth + 1)\r\n    }\r\n  }\r\n\r\n  const partition = (arr: number[], low: number, high: number): number => {\r\n    const pivot = arr[high]\r\n    let i = low - 1\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Choosing pivot: ${pivot} (last element)`,\r\n      code: `let pivot = arr[${high}]; // ${pivot}\\nlet i = ${low - 1};`,\r\n      pivot: high,\r\n    })\r\n\r\n    for (let j = low; j < high; j++) {\r\n      steps.push({\r\n        array: [...arr],\r\n        description: `Comparing ${arr[j]} with pivot ${pivot}`,\r\n        code: `if (arr[${j}] <= pivot) {\\n  // ${arr[j]} <= ${pivot} is ${arr[j] <= pivot}\\n}`,\r\n        comparing: [j, high],\r\n      })\r\n\r\n      if (arr[j] <= pivot) {\r\n        i++\r\n        if (i !== j) {\r\n          steps.push({\r\n            array: [...arr],\r\n            description: `${arr[j]} ≤ ${pivot}, so swap arr[${i}] and arr[${j}]`,\r\n            code: `i++; // i = ${i}\\n[arr[${i}], arr[${j}]] = [arr[${j}], arr[${i}]];`,\r\n            swapping: [i, j],\r\n          })\r\n          ;[arr[i], arr[j]] = [arr[j], arr[i]]\r\n        } else {\r\n          steps.push({\r\n            array: [...arr],\r\n            description: `${arr[j]} ≤ ${pivot}, no swap needed`,\r\n            code: `i++; // i = ${i}`,\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Place pivot ${pivot} in correct position by swapping with arr[${i + 1}]`,\r\n      code: `[arr[${i + 1}], arr[${high}]] = [arr[${high}], arr[${i + 1}]];`,\r\n      swapping: [i + 1, high],\r\n    })\r\n    ;[arr[i + 1], arr[high]] = [arr[high], arr[i + 1]]\r\n    return i + 1\r\n  }\r\n\r\n  quickSortHelper(arr, 0, arr.length - 1)\r\n\r\n  steps.push({\r\n    array: [...arr],\r\n    description: `Quick sort complete! Final array: [${arr.join(\", \")}]`,\r\n    code: `// Quick sort completed\\n// Final array: [${arr.join(\", \")}]`,\r\n    sorted: Array.from({ length: arr.length }, (_, i) => i),\r\n  })\r\n\r\n  return steps\r\n}\r\n\r\nconst heapSort = (arr: number[], steps: Step[]): Step[] => {\r\n  const n = arr.length\r\n\r\n  // Build max heap\r\n  steps.push({\r\n    array: [...arr],\r\n    description: `Building max heap from array`,\r\n    code: `// Build max heap\\n// Start from last non-leaf node`,\r\n  })\r\n\r\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n    heapify(arr, n, i, steps)\r\n  }\r\n\r\n  steps.push({\r\n    array: [...arr],\r\n    description: `Max heap built: [${arr.join(\", \")}]`,\r\n    code: `// Max heap construction complete`,\r\n  })\r\n\r\n  // Extract elements from heap one by one\r\n  for (let i = n - 1; i > 0; i--) {\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Move current root ${arr[0]} to end (position ${i})`,\r\n      code: `// Move root to end\\n[arr[0], arr[${i}]] = [arr[${i}], arr[0]];`,\r\n      swapping: [0, i],\r\n    })\r\n    ;[arr[0], arr[i]] = [arr[i], arr[0]]\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Heapify remaining ${i} elements`,\r\n      code: `// Heapify reduced heap of size ${i}`,\r\n      sorted: Array.from({ length: n - i }, (_, idx) => n - 1 - idx),\r\n    })\r\n\r\n    heapify(arr, i, 0, steps)\r\n  }\r\n\r\n  steps.push({\r\n    array: [...arr],\r\n    description: `Heap sort complete! Final array: [${arr.join(\", \")}]`,\r\n    code: `// Heap sort completed\\n// Final array: [${arr.join(\", \")}]`,\r\n    sorted: Array.from({ length: arr.length }, (_, i) => i),\r\n  })\r\n\r\n  return steps\r\n}\r\n\r\nconst heapify = (arr: number[], n: number, i: number, steps: Step[]): void => {\r\n  let largest = i\r\n  const left = 2 * i + 1\r\n  const right = 2 * i + 2\r\n\r\n  if (left < n && arr[left] > arr[largest]) {\r\n    largest = left\r\n  }\r\n\r\n  if (right < n && arr[right] > arr[largest]) {\r\n    largest = right\r\n  }\r\n\r\n  if (largest !== i) {\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Swap ${arr[i]} with ${arr[largest]} to maintain heap property`,\r\n      code: `// Heapify: swap parent with larger child\\n[arr[${i}], arr[${largest}]] = [arr[${largest}], arr[${i}]];`,\r\n      swapping: [i, largest],\r\n    })\r\n    const temp = arr[i]\r\n    arr[i] = arr[largest]\r\n    arr[largest] = temp\r\n    heapify(arr, n, largest, steps)\r\n  }\r\n}\r\n\r\nconst SortingVisualizer: React.FC<SortingVisualizerProps> = ({ algorithm, inputArray }) => {\r\n  const [steps, setSteps] = useState<Step[]>([])\r\n  const [currentStep, setCurrentStep] = useState(0)\r\n  const [sortResult, setSortResult] = useState<SortResult | null>(null)\r\n\r\n  const generateSteps = useCallback((algorithm: string, array: number[]): Step[] => {\r\n    const steps: Step[] = []\r\n    const arr = [...array]\r\n\r\n    steps.push({\r\n      array: [...arr],\r\n      description: `Initial array: [${arr.join(\", \")}]`,\r\n      code: `// Initial array\\nlet arr = [${arr.join(\", \")}];`,\r\n    })\r\n\r\n    switch (algorithm) {\r\n      case \"Bubble Sort\":\r\n        return bubbleSort(arr, steps)\r\n      case \"Selection Sort\":\r\n        return selectionSort(arr, steps)\r\n      case \"Insertion Sort\":\r\n        return insertionSort(arr, steps)\r\n      case \"Merge Sort\":\r\n        return mergeSort(arr, steps)\r\n      case \"Quick Sort\":\r\n        return quickSort(arr, steps)\r\n      case \"Heap Sort\":\r\n        return heapSort(arr, steps)\r\n      default:\r\n        return steps\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const array = inputArray\r\n      .split(\" \")\r\n      .map(Number)\r\n      .filter((n) => !isNaN(n))\r\n    const newSteps = generateSteps(algorithm, array)\r\n    setSteps(newSteps)\r\n    setCurrentStep(0)\r\n\r\n    // Calculate sort metrics\r\n    const comparisons = newSteps.filter((step) => step.comparing?.length).length\r\n    const swaps = newSteps.filter((step) => step.swapping?.length).length\r\n    setSortResult({\r\n      comparisons,\r\n      swaps,\r\n      steps: newSteps.length,\r\n    })\r\n  }, [algorithm, inputArray, generateSteps])\r\n\r\n  const handleNext = () => {\r\n    if (currentStep < steps.length - 1) {\r\n      setCurrentStep(currentStep + 1)\r\n    }\r\n  }\r\n\r\n  const handlePrevious = () => {\r\n    if (currentStep > 0) {\r\n      setCurrentStep(currentStep - 1)\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setCurrentStep(0)\r\n  }\r\n\r\n  const getElementColor = (index: number): string => {\r\n    const step = steps[currentStep]\r\n    if (!step) return \"bg-blue-500\"\r\n\r\n    if (step.sorted?.includes(index)) return \"bg-green-500\"\r\n    if (step.swapping?.includes(index)) return \"bg-red-500\"\r\n    if (step.comparing?.includes(index)) return \"bg-yellow-500\"\r\n    if (step.pivot === index) return \"bg-purple-500\"\r\n\r\n    return \"bg-blue-500\"\r\n  }\r\n\r\n  const getCompleteAlgorithmCode = (algorithm: string): string => {\r\n    switch (algorithm) {\r\n      case \"Bubble Sort\":\r\n        return `function bubbleSort(arr) {\r\n  const n = arr.length;\r\n  \r\n  for (let i = 0; i < n - 1; i++) {\r\n    let swapped = false;\r\n    \r\n    for (let j = 0; j < n - i - 1; j++) {\r\n      if (arr[j] > arr[j + 1]) {\r\n        // Swap elements\r\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\r\n        swapped = true;\r\n      }\r\n    }\r\n    \r\n    // If no swapping occurred, array is sorted\r\n    if (!swapped) break;\r\n  }\r\n  \r\n  return arr;\r\n}`\r\n\r\n      case \"Selection Sort\":\r\n        return `function selectionSort(arr) {\r\n  const n = arr.length;\r\n  \r\n  for (let i = 0; i < n - 1; i++) {\r\n    let minIdx = i;\r\n    \r\n    // Find minimum element in remaining array\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (arr[j] < arr[minIdx]) {\r\n        minIdx = j;\r\n      }\r\n    }\r\n    \r\n    // Swap minimum element with first element\r\n    if (minIdx !== i) {\r\n      [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\r\n    }\r\n  }\r\n  \r\n  return arr;\r\n}`\r\n\r\n      case \"Insertion Sort\":\r\n        return `function insertionSort(arr) {\r\n  for (let i = 1; i < arr.length; i++) {\r\n    let key = arr[i];\r\n    let j = i - 1;\r\n    \r\n    // Move elements greater than key one position ahead\r\n    while (j >= 0 && arr[j] > key) {\r\n      arr[j + 1] = arr[j];\r\n      j--;\r\n    }\r\n    \r\n    // Insert key at correct position\r\n    arr[j + 1] = key;\r\n  }\r\n  \r\n  return arr;\r\n}`\r\n\r\n      case \"Merge Sort\":\r\n        return `function mergeSort(arr) {\r\n  if (arr.length <= 1) return arr;\r\n  \r\n  const mid = Math.floor(arr.length / 2);\r\n  const left = mergeSort(arr.slice(0, mid));\r\n  const right = mergeSort(arr.slice(mid));\r\n  \r\n  return merge(left, right);\r\n}\r\n\r\nfunction merge(left, right) {\r\n  let result = [];\r\n  let i = 0, j = 0;\r\n  \r\n  while (i < left.length && j < right.length) {\r\n    if (left[i] <= right[j]) {\r\n      result.push(left[i]);\r\n      i++;\r\n    } else {\r\n      result.push(right[j]);\r\n      j++;\r\n    }\r\n  }\r\n  \r\n  // Add remaining elements\r\n  while (i < left.length) {\r\n    result.push(left[i]);\r\n    i++;\r\n  }\r\n  \r\n  while (j < right.length) {\r\n    result.push(right[j]);\r\n    j++;\r\n  }\r\n  \r\n  return result;\r\n}`\r\n\r\n      case \"Quick Sort\":\r\n        return `function quickSort(arr, low = 0, high = arr.length - 1) {\r\n  if (low < high) {\r\n    const pi = partition(arr, low, high);\r\n    \r\n    quickSort(arr, low, pi - 1);\r\n    quickSort(arr, pi + 1, high);\r\n  }\r\n  \r\n  return arr;\r\n}\r\n\r\nfunction partition(arr, low, high) {\r\n  const pivot = arr[high];\r\n  let i = low - 1;\r\n  \r\n  for (let j = low; j < high; j++) {\r\n    if (arr[j] <= pivot) {\r\n      i++;\r\n      [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n  }\r\n  \r\n  [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\r\n  return i + 1;\r\n}`\r\n\r\n      case \"Heap Sort\":\r\n        return `function heapSort(arr) {\r\n  const n = arr.length;\r\n  \r\n  // Build max heap\r\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n    heapify(arr, n, i);\r\n  }\r\n  \r\n  // Extract elements from heap one by one\r\n  for (let i = n - 1; i > 0; i--) {\r\n    [arr[0], arr[i]] = [arr[i], arr[0]];\r\n    heapify(arr, i, 0);\r\n  }\r\n  \r\n  return arr;\r\n}\r\n\r\nfunction heapify(arr, n, i) {\r\n  let largest = i;\r\n  const left = 2 * i + 1;\r\n  const right = 2 * i + 2;\r\n  \r\n  if (left < n && arr[left] > arr[largest]) {\r\n    largest = left;\r\n  }\r\n  \r\n  if (right < n && arr[right] > arr[largest]) {\r\n    largest = right;\r\n  }\r\n  \r\n  if (largest !== i) {\r\n    [arr[i], arr[largest]] = [arr[largest], arr[i]];\r\n    heapify(arr, n, largest);\r\n  }\r\n}`\r\n\r\n      default:\r\n        return \"// Algorithm implementation not available\"\r\n    }\r\n  }\r\n\r\n  if (steps.length === 0) {\r\n    return (\r\n      <div className=\"flex items-center justify-center p-8\">\r\n        <div className=\"text-gray-500\">Loading visualization...</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Sort Result Summary */}\r\n      {sortResult && (\r\n        <Card className=\"border-2 border-dashed border-gray-300\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <div className=\"p-2 bg-blue-100 rounded-full\">\r\n                  <ArrowUpDown className=\"w-6 h-6 text-blue-600\" />\r\n                </div>\r\n                <div>\r\n                  <h3 className=\"text-lg font-semibold\">{algorithm} Statistics</h3>\r\n                  <p className=\"text-gray-600\">Step-by-step visualization of the sorting process</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\r\n                <div>\r\n                  <div className=\"text-2xl font-bold text-blue-600\">{sortResult.comparisons}</div>\r\n                  <div className=\"text-sm text-gray-500\">Comparisons</div>\r\n                </div>\r\n                <div>\r\n                  <div className=\"text-2xl font-bold text-red-600\">{sortResult.swaps}</div>\r\n                  <div className=\"text-sm text-gray-500\">Swaps</div>\r\n                </div>\r\n                <div>\r\n                  <div className=\"text-2xl font-bold text-purple-600\">{sortResult.steps}</div>\r\n                  <div className=\"text-sm text-gray-500\">Total Steps</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Array Visualization */}\r\n      <div className=\"bg-white rounded-lg p-6 shadow-sm border\">\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <h3 className=\"text-lg font-semibold flex items-center\">\r\n            <ArrowUpDown className=\"w-5 h-5 mr-2 text-blue-600\" />\r\n            Array Visualization\r\n          </h3>\r\n          <div className=\"text-sm text-gray-600\">\r\n            Algorithm: <span className=\"font-semibold text-blue-600\">{algorithm}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex flex-wrap items-center justify-center gap-2 p-4 bg-gray-50 rounded-lg min-h-[80px]\">\r\n          {steps[currentStep]?.array.map((value, index) => (\r\n            <div key={index} className=\"relative\">\r\n              <div\r\n                className={`w-12 h-12 flex items-center justify-center text-white rounded-md font-semibold transition-all duration-300 ${getElementColor(index)}`}\r\n              >\r\n                {value}\r\n              </div>\r\n              <div className=\"text-xs text-gray-500 text-center mt-1\">{index}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Legend */}\r\n      <div className=\"flex flex-wrap items-center justify-center gap-4 text-sm bg-white rounded-lg p-4 shadow-sm border\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\r\n          <span>Unsorted</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"w-4 h-4 bg-yellow-500 rounded\"></div>\r\n          <span>Comparing</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"w-4 h-4 bg-red-500 rounded\"></div>\r\n          <span>Swapping</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\r\n          <span>Pivot</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\r\n          <span>Sorted</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Controls */}\r\n      <div className=\"flex items-center justify-between bg-white rounded-lg p-4 shadow-sm border\">\r\n        <div className=\"flex space-x-2\">\r\n          <Button onClick={handleReset} variant=\"secondary\">\r\n            Reset\r\n          </Button>\r\n          <Button onClick={handlePrevious} disabled={currentStep === 0} variant=\"secondary\">\r\n            Previous\r\n          </Button>\r\n          <Button onClick={handleNext} disabled={currentStep === steps.length - 1}>\r\n            Next\r\n          </Button>\r\n        </div>\r\n        <Badge variant=\"default\" className=\"text-sm\">\r\n          Step {currentStep + 1} of {steps.length}\r\n        </Badge>\r\n      </div>\r\n\r\n      {/* Step Description */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg flex items-center\">\r\n            <Code className=\"w-5 h-5 mr-2\" />\r\n            Step Description\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <p className=\"text-gray-700 leading-relaxed\">{steps[currentStep]?.description}</p>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Code Display */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg\">Code Execution</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <pre className=\"bg-gray-900 text-green-400 p-4 rounded-md overflow-x-auto text-sm font-mono\">\r\n            <code>{steps[currentStep]?.code}</code>\r\n          </pre>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Complete Algorithm Code - Show only when at the last step */}\r\n      {currentStep === steps.length - 1 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-lg\">Complete {algorithm} Implementation</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <pre className=\"bg-gray-900 text-green-400 p-4 rounded-md overflow-x-auto text-sm font-mono max-h-96 overflow-y-auto\">\r\n              <code>{getCompleteAlgorithmCode(algorithm)}</code>\r\n            </pre>\r\n            <div className=\"mt-4 p-3 bg-blue-50 rounded-md\">\r\n              <p className=\"text-sm text-blue-800\">\r\n                <strong>💡 Complete Implementation:</strong> This is the full {algorithm} algorithm that you just\r\n                visualized step by step. You can copy this code and use it in your own projects!\r\n              </p>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SortingVisualizer\r\n"],"mappings":"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KAAAG,gBAAA,GAAIX,IAAI,CAACtD,SAAS,cAAAiE,gBAAA,eAAdA,gBAAA,CAAgBC,QAAQ,CAACJ,KAAK,CAAC,EAAE,OAAO,eAAe;IAC3D,IAAIR,IAAI,CAACxB,KAAK,KAAKgC,KAAK,EAAE,OAAO,eAAe;IAEhD,OAAO,aAAa;EACtB,CAAC;EAED,MAAMK,wBAAwB,GAAI/B,SAAiB,IAAa;IAC9D,QAAQA,SAAS;MACf,KAAK,aAAa;QAChB,OAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;MAEI,KAAK,gBAAgB;QACnB,OAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;MAEI,KAAK,gBAAgB;QACnB,OAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;MAEI,KAAK,YAAY;QACf,OAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;MAEI,KAAK,YAAY;QACf,OAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;MAEI,KAAK,WAAW;QACd,OAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;MAEI;QACE,OAAO,2CAA2C;IACtD;E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}