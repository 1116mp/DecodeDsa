{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\DSA Website\\\\src\\\\pages\\\\GraphVisualizerPages.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useCallback, useEffect } from \"react\";\nimport { Network, Plus, Search, RotateCcw, Code, BookOpen, Lightbulb, Target, Clock, Zap, ArrowRight, Shuffle, Play, Pause, SkipForward, MapPin, Route } from \"lucide-react\";\n\n// Graph data structures\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst algorithmInfo = {\n  bfs: {\n    name: \"Breadth-First Search\",\n    description: \"Explores nodes level by level, finding shortest path in unweighted graphs.\",\n    complexity: \"O(V + E)\",\n    useCase: \"Shortest path, level-order traversal, connected components\"\n  },\n  dfs: {\n    name: \"Depth-First Search\",\n    description: \"Explores as far as possible along each branch before backtracking.\",\n    complexity: \"O(V + E)\",\n    useCase: \"Cycle detection, topological sorting, connected components\"\n  },\n  dijkstra: {\n    name: \"Dijkstra's Algorithm\",\n    description: \"Finds shortest paths from source to all vertices in weighted graphs.\",\n    complexity: \"O((V + E) log V)\",\n    useCase: \"GPS navigation, network routing, shortest path problems\"\n  },\n  \"bellman-ford\": {\n    name: \"Bellman-Ford Algorithm\",\n    description: \"Finds shortest paths and detects negative cycles.\",\n    complexity: \"O(VE)\",\n    useCase: \"Graphs with negative weights, currency arbitrage\"\n  },\n  kruskal: {\n    name: \"Kruskal's Algorithm\",\n    description: \"Finds minimum spanning tree by sorting edges.\",\n    complexity: \"O(E log E)\",\n    useCase: \"Network design, clustering, minimum cost connections\"\n  },\n  prim: {\n    name: \"Prim's Algorithm\",\n    description: \"Finds minimum spanning tree by growing from a starting vertex.\",\n    complexity: \"O(E log V)\",\n    useCase: \"Network design, approximation algorithms\"\n  },\n  topological: {\n    name: \"Topological Sort\",\n    description: \"Linear ordering of vertices in a directed acyclic graph.\",\n    complexity: \"O(V + E)\",\n    useCase: \"Task scheduling, dependency resolution, course prerequisites\"\n  },\n  \"floyd-warshall\": {\n    name: \"Floyd-Warshall Algorithm\",\n    description: \"Finds shortest paths between all pairs of vertices.\",\n    complexity: \"O(V¬≥)\",\n    useCase: \"All-pairs shortest paths, transitive closure\"\n  }\n};\nfunction GraphVisualizerPage() {\n  _s();\n  var _algorithmSteps$curre, _algorithmSteps$curre2, _algorithmSteps$curre3;\n  const [graph, setGraph] = useState({\n    nodes: [],\n    edges: [],\n    isDirected: false,\n    isWeighted: false\n  });\n  const [graphType, setGraphType] = useState(\"undirected\");\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(\"bfs\");\n  const [nodeValue, setNodeValue] = useState(\"\");\n  const [edgeFrom, setEdgeFrom] = useState(\"\");\n  const [edgeTo, setEdgeTo] = useState(\"\");\n  const [edgeWeight, setEdgeWeight] = useState(\"\");\n  const [startNode, setStartNode] = useState(\"\");\n  const [endNode, setEndNode] = useState(\"\");\n\n  // Animation states\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [animationSpeed, setAnimationSpeed] = useState(500);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [algorithmSteps, setAlgorithmSteps] = useState([]);\n  const [isPaused, setIsPaused] = useState(false);\n\n  // UI states\n  const [operationHistory, setOperationHistory] = useState([]);\n  const [showCode, setShowCode] = useState(false);\n  const [showTutorial, setShowTutorial] = useState(false);\n  const [nodeCounter, setNodeCounter] = useState(0);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n  const [algorithmResult, setAlgorithmResult] = useState(null);\n\n  // Helper functions\n  const generateNodeId = () => {\n    setNodeCounter(prev => prev + 1);\n    return `node-${nodeCounter}`;\n  };\n  const generateEdgeId = () => `edge-${Date.now()}-${Math.random()}`;\n  const addToHistory = operation => {\n    const timestamp = new Date().toLocaleTimeString();\n    setOperationHistory(prev => [`${timestamp}: ${operation}`, ...prev.slice(0, 19)]);\n  };\n\n  // Graph operations\n  const addNode = () => {\n    if (!nodeValue || isNaN(Number(nodeValue))) {\n      addToHistory(\"‚ùå Error: Please enter a valid number for node value\");\n      return;\n    }\n    const value = Number(nodeValue);\n    if (graph.nodes.some(node => node.value === value)) {\n      addToHistory(\"‚ùå Error: Node with this value already exists\");\n      return;\n    }\n    const newNode = {\n      id: generateNodeId(),\n      value,\n      x: Math.random() * 600 + 100,\n      y: Math.random() * 400 + 100,\n      isHighlighted: true\n    };\n    setGraph(prev => ({\n      ...prev,\n      nodes: [...prev.nodes, newNode]\n    }));\n    addToHistory(`‚úÖ Added node with value ${value}`);\n    setNodeValue(\"\");\n\n    // Remove highlight after animation\n    setTimeout(() => {\n      setGraph(prev => ({\n        ...prev,\n        nodes: prev.nodes.map(node => node.id === newNode.id ? {\n          ...node,\n          isHighlighted: false\n        } : node)\n      }));\n    }, 1000);\n  };\n  const addEdge = () => {\n    const fromValue = Number(edgeFrom);\n    const toValue = Number(edgeTo);\n    const weight = edgeWeight ? Number(edgeWeight) : 1;\n    if (isNaN(fromValue) || isNaN(toValue)) {\n      addToHistory(\"‚ùå Error: Please enter valid node values\");\n      return;\n    }\n    const fromNode = graph.nodes.find(node => node.value === fromValue);\n    const toNode = graph.nodes.find(node => node.value === toValue);\n    if (!fromNode || !toNode) {\n      addToHistory(\"‚ùå Error: One or both nodes don't exist\");\n      return;\n    }\n    if (fromNode.id === toNode.id) {\n      addToHistory(\"‚ùå Error: Cannot create self-loop\");\n      return;\n    }\n\n    // Check if edge already exists\n    const edgeExists = graph.edges.some(edge => edge.from === fromNode.id && edge.to === toNode.id || !graph.isDirected && edge.from === toNode.id && edge.to === fromNode.id);\n    if (edgeExists) {\n      addToHistory(\"‚ùå Error: Edge already exists\");\n      return;\n    }\n    const newEdge = {\n      id: generateEdgeId(),\n      from: fromNode.id,\n      to: toNode.id,\n      weight: graph.isWeighted ? weight : undefined,\n      isDirected: graph.isDirected,\n      isHighlighted: true\n    };\n    setGraph(prev => ({\n      ...prev,\n      edges: [...prev.edges, newEdge]\n    }));\n    addToHistory(`‚úÖ Added edge from ${fromValue} to ${toValue}${graph.isWeighted ? ` (weight: ${weight})` : \"\"}`);\n    setEdgeFrom(\"\");\n    setEdgeTo(\"\");\n    setEdgeWeight(\"\");\n\n    // Remove highlight after animation\n    setTimeout(() => {\n      setGraph(prev => ({\n        ...prev,\n        edges: prev.edges.map(edge => edge.id === newEdge.id ? {\n          ...edge,\n          isHighlighted: false\n        } : edge)\n      }));\n    }, 1000);\n  };\n  const clearGraph = () => {\n    setGraph({\n      nodes: [],\n      edges: [],\n      isDirected: graphType === \"directed\" || graphType === \"dag\",\n      isWeighted: graphType === \"weighted\"\n    });\n    setAlgorithmSteps([]);\n    setCurrentStep(0);\n    setAlgorithmResult(null);\n    addToHistory(\"üóëÔ∏è Graph cleared\");\n  };\n  const generateRandomGraph = () => {\n    const nodeCount = 6 + Math.floor(Math.random() * 4); // 6-9 nodes\n    const nodes = [];\n\n    // Create nodes in a circular layout\n    for (let i = 0; i < nodeCount; i++) {\n      const angle = 2 * Math.PI * i / nodeCount;\n      const radius = 150;\n      const centerX = 400;\n      const centerY = 250;\n      nodes.push({\n        id: generateNodeId(),\n        value: i + 1,\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      });\n    }\n\n    // Create random edges\n    const edges = [];\n    const edgeCount = Math.floor(nodeCount * 1.5); // Moderate connectivity\n\n    for (let i = 0; i < edgeCount; i++) {\n      const fromIdx = Math.floor(Math.random() * nodeCount);\n      let toIdx = Math.floor(Math.random() * nodeCount);\n\n      // Avoid self-loops\n      while (toIdx === fromIdx) {\n        toIdx = Math.floor(Math.random() * nodeCount);\n      }\n      const from = nodes[fromIdx];\n      const to = nodes[toIdx];\n\n      // Check if edge already exists\n      const edgeExists = edges.some(edge => edge.from === from.id && edge.to === to.id || !graph.isDirected && edge.from === to.id && edge.to === from.id);\n      if (!edgeExists) {\n        edges.push({\n          id: generateEdgeId(),\n          from: from.id,\n          to: to.id,\n          weight: graph.isWeighted ? Math.floor(Math.random() * 10) + 1 : undefined,\n          isDirected: graph.isDirected\n        });\n      }\n    }\n    setGraph(prev => ({\n      ...prev,\n      nodes,\n      edges\n    }));\n    addToHistory(`üé≤ Generated random graph with ${nodeCount} nodes and ${edges.length} edges`);\n  };\n\n  // Algorithm implementations\n  const runBFS = async () => {\n    if (!startNode) {\n      addToHistory(\"‚ùå Error: Please select a start node\");\n      return;\n    }\n    const startValue = Number(startNode);\n    const startNodeObj = graph.nodes.find(node => node.value === startValue);\n    if (!startNodeObj) {\n      addToHistory(\"‚ùå Error: Start node not found\");\n      return;\n    }\n    setIsAnimating(true);\n    const steps = [];\n    const visited = new Set();\n    const queue = [startNodeObj.id];\n    const distances = new Map();\n    const parents = new Map();\n    distances.set(startNodeObj.id, 0);\n    parents.set(startNodeObj.id, null);\n    steps.push({\n      type: \"start\",\n      nodeId: startNodeObj.id,\n      message: `Starting BFS from node ${startValue}`,\n      queue: [...queue],\n      visited: new Set(visited),\n      distances: new Map(distances)\n    });\n    while (queue.length > 0) {\n      const currentId = queue.shift();\n      if (visited.has(currentId)) continue;\n      visited.add(currentId);\n      const currentNode = graph.nodes.find(n => n.id === currentId);\n      steps.push({\n        type: \"visit\",\n        nodeId: currentId,\n        message: `Visiting node ${currentNode.value}`,\n        queue: [...queue],\n        visited: new Set(visited),\n        distances: new Map(distances)\n      });\n\n      // Find neighbors\n      const neighbors = graph.edges.filter(edge => edge.from === currentId || !graph.isDirected && edge.to === currentId).map(edge => edge.from === currentId ? edge.to : edge.from).filter(neighborId => !visited.has(neighborId));\n      for (const neighborId of neighbors) {\n        if (!distances.has(neighborId)) {\n          distances.set(neighborId, distances.get(currentId) + 1);\n          parents.set(neighborId, currentId);\n          queue.push(neighborId);\n          const neighborNode = graph.nodes.find(n => n.id === neighborId);\n          steps.push({\n            type: \"discover\",\n            nodeId: neighborId,\n            edgeFrom: currentId,\n            edgeTo: neighborId,\n            message: `Discovered node ${neighborNode.value} at distance ${distances.get(neighborId)}`,\n            queue: [...queue],\n            visited: new Set(visited),\n            distances: new Map(distances)\n          });\n        }\n      }\n    }\n    steps.push({\n      type: \"complete\",\n      message: \"BFS traversal complete\",\n      visited: new Set(visited),\n      distances: new Map(distances),\n      parents: new Map(parents)\n    });\n    setAlgorithmSteps(steps);\n    setCurrentStep(0);\n    addToHistory(`üîç Started BFS from node ${startValue}`);\n  };\n  const runDFS = async () => {\n    if (!startNode) {\n      addToHistory(\"‚ùå Error: Please select a start node\");\n      return;\n    }\n    const startValue = Number(startNode);\n    const startNodeObj = graph.nodes.find(node => node.value === startValue);\n    if (!startNodeObj) {\n      addToHistory(\"‚ùå Error: Start node not found\");\n      return;\n    }\n    setIsAnimating(true);\n    const steps = [];\n    const visited = new Set();\n    const dfsRecursive = nodeId => {\n      if (visited.has(nodeId)) return;\n      visited.add(nodeId);\n      const currentNode = graph.nodes.find(n => n.id === nodeId);\n      steps.push({\n        type: \"visit\",\n        nodeId,\n        message: `Visiting node ${currentNode.value}`,\n        visited: new Set(visited)\n      });\n\n      // Find neighbors\n      const neighbors = graph.edges.filter(edge => edge.from === nodeId || !graph.isDirected && edge.to === nodeId).map(edge => edge.from === nodeId ? edge.to : edge.from).filter(neighborId => !visited.has(neighborId));\n      for (const neighborId of neighbors) {\n        const neighborNode = graph.nodes.find(n => n.id === neighborId);\n        steps.push({\n          type: \"discover\",\n          nodeId: neighborId,\n          edgeFrom: nodeId,\n          edgeTo: neighborId,\n          message: `Exploring edge to node ${neighborNode.value}`,\n          visited: new Set(visited)\n        });\n        dfsRecursive(neighborId);\n      }\n    };\n    steps.push({\n      type: \"start\",\n      nodeId: startNodeObj.id,\n      message: `Starting DFS from node ${startValue}`,\n      visited: new Set()\n    });\n    dfsRecursive(startNodeObj.id);\n    steps.push({\n      type: \"complete\",\n      message: \"DFS traversal complete\",\n      visited: new Set(visited)\n    });\n    setAlgorithmSteps(steps);\n    setCurrentStep(0);\n    addToHistory(`üîç Started DFS from node ${startValue}`);\n  };\n  const runDijkstra = async () => {\n    if (!graph.isWeighted) {\n      addToHistory(\"‚ùå Error: Dijkstra's algorithm requires a weighted graph\");\n      return;\n    }\n    if (!startNode) {\n      addToHistory(\"‚ùå Error: Please select a start node\");\n      return;\n    }\n    const startValue = Number(startNode);\n    const startNodeObj = graph.nodes.find(node => node.value === startValue);\n    if (!startNodeObj) {\n      addToHistory(\"‚ùå Error: Start node not found\");\n      return;\n    }\n    setIsAnimating(true);\n    const steps = [];\n    const distances = new Map();\n    const parents = new Map();\n    const visited = new Set();\n    const unvisited = new Set(graph.nodes.map(n => n.id));\n\n    // Initialize distances\n    graph.nodes.forEach(node => {\n      distances.set(node.id, node.id === startNodeObj.id ? 0 : Number.POSITIVE_INFINITY);\n      parents.set(node.id, null);\n    });\n    steps.push({\n      type: \"start\",\n      nodeId: startNodeObj.id,\n      message: `Starting Dijkstra from node ${startValue}`,\n      distances: new Map(distances),\n      visited: new Set()\n    });\n    while (unvisited.size > 0) {\n      // Find unvisited node with minimum distance\n      let currentId = null;\n      let minDistance = Number.POSITIVE_INFINITY;\n      for (const nodeId of Array.from(unvisited)) {\n        const dist = distances.get(nodeId);\n        if (dist < minDistance) {\n          minDistance = dist;\n          currentId = nodeId;\n        }\n      }\n      if (!currentId || minDistance === Number.POSITIVE_INFINITY) break;\n      unvisited.delete(currentId);\n      visited.add(currentId);\n      const currentNode = graph.nodes.find(n => n.id === currentId);\n      steps.push({\n        type: \"visit\",\n        nodeId: currentId,\n        message: `Visiting node ${currentNode.value} with distance ${minDistance}`,\n        distances: new Map(distances),\n        visited: new Set(visited)\n      });\n\n      // Update distances to neighbors\n      const neighbors = graph.edges.filter(edge => edge.from === currentId || !graph.isDirected && edge.to === currentId).map(edge => ({\n        id: edge.from === currentId ? edge.to : edge.from,\n        weight: edge.weight || 1,\n        edgeId: edge.id\n      })).filter(neighbor => unvisited.has(neighbor.id));\n      for (const neighbor of neighbors) {\n        const newDistance = distances.get(currentId) + neighbor.weight;\n        const currentDistance = distances.get(neighbor.id);\n        if (newDistance < currentDistance) {\n          distances.set(neighbor.id, newDistance);\n          parents.set(neighbor.id, currentId);\n          const neighborNode = graph.nodes.find(n => n.id === neighbor.id);\n          steps.push({\n            type: \"relax\",\n            nodeId: neighbor.id,\n            edgeFrom: currentId,\n            edgeTo: neighbor.id,\n            message: `Updated distance to node ${neighborNode.value}: ${newDistance}`,\n            distances: new Map(distances),\n            visited: new Set(visited)\n          });\n        }\n      }\n    }\n    steps.push({\n      type: \"complete\",\n      message: \"Dijkstra algorithm complete\",\n      distances: new Map(distances),\n      parents: new Map(parents),\n      visited: new Set(visited)\n    });\n    setAlgorithmSteps(steps);\n    setCurrentStep(0);\n    addToHistory(`üõ£Ô∏è Started Dijkstra from node ${startValue}`);\n  };\n\n  // Animation control\n  const playAnimation = useCallback(() => {\n    if (currentStep >= algorithmSteps.length - 1) {\n      setIsAnimating(false);\n      return;\n    }\n    if (isPaused) return;\n    const step = algorithmSteps[currentStep];\n\n    // Apply step to graph visualization\n    setGraph(prev => ({\n      ...prev,\n      nodes: prev.nodes.map(node => {\n        var _step$visited, _step$distances;\n        return {\n          ...node,\n          isHighlighted: step.nodeId === node.id,\n          isVisited: ((_step$visited = step.visited) === null || _step$visited === void 0 ? void 0 : _step$visited.has(node.id)) || false,\n          isStart: step.type === \"start\" && step.nodeId === node.id,\n          distance: (_step$distances = step.distances) === null || _step$distances === void 0 ? void 0 : _step$distances.get(node.id)\n        };\n      }),\n      edges: prev.edges.map(edge => {\n        var _step$visited2, _step$visited3;\n        return {\n          ...edge,\n          isHighlighted: step.edgeFrom === edge.from && step.edgeTo === edge.to || step.edgeFrom === edge.to && step.edgeTo === edge.from,\n          isVisited: ((_step$visited2 = step.visited) === null || _step$visited2 === void 0 ? void 0 : _step$visited2.has(edge.from)) && ((_step$visited3 = step.visited) === null || _step$visited3 === void 0 ? void 0 : _step$visited3.has(edge.to))\n        };\n      })\n    }));\n    addToHistory(`üìç Step ${currentStep + 1}: ${step.message}`);\n    setCurrentStep(prev => prev + 1);\n    if (currentStep < algorithmSteps.length - 1) {\n      setTimeout(() => playAnimation(), animationSpeed);\n    } else {\n      setIsAnimating(false);\n      setAlgorithmResult(step);\n    }\n  }, [currentStep, algorithmSteps, isPaused, animationSpeed]);\n  useEffect(() => {\n    if (isAnimating && !isPaused && algorithmSteps.length > 0) {\n      playAnimation();\n    }\n  }, [isAnimating, isPaused, playAnimation, algorithmSteps.length]);\n  const startAnimation = () => {\n    if (algorithmSteps.length === 0) return;\n    setIsAnimating(true);\n    setIsPaused(false);\n    setCurrentStep(0);\n  };\n  const pauseAnimation = () => {\n    setIsPaused(!isPaused);\n  };\n  const stepForward = () => {\n    if (currentStep < algorithmSteps.length - 1) {\n      setCurrentStep(prev => prev + 1);\n      const step = algorithmSteps[currentStep + 1];\n      setGraph(prev => ({\n        ...prev,\n        nodes: prev.nodes.map(node => {\n          var _step$visited4, _step$distances2;\n          return {\n            ...node,\n            isHighlighted: step.nodeId === node.id,\n            isVisited: ((_step$visited4 = step.visited) === null || _step$visited4 === void 0 ? void 0 : _step$visited4.has(node.id)) || false,\n            distance: (_step$distances2 = step.distances) === null || _step$distances2 === void 0 ? void 0 : _step$distances2.get(node.id)\n          };\n        }),\n        edges: prev.edges.map(edge => {\n          var _step$visited5, _step$visited6;\n          return {\n            ...edge,\n            isHighlighted: step.edgeFrom === edge.from && step.edgeTo === edge.to || step.edgeFrom === edge.to && step.edgeTo === edge.from,\n            isVisited: ((_step$visited5 = step.visited) === null || _step$visited5 === void 0 ? void 0 : _step$visited5.has(edge.from)) && ((_step$visited6 = step.visited) === null || _step$visited6 === void 0 ? void 0 : _step$visited6.has(edge.to))\n          };\n        })\n      }));\n      addToHistory(`üìç Step ${currentStep + 2}: ${step.message}`);\n    }\n  };\n  const resetAnimation = () => {\n    setIsAnimating(false);\n    setIsPaused(false);\n    setCurrentStep(0);\n    setAlgorithmResult(null);\n\n    // Reset graph visualization\n    setGraph(prev => ({\n      ...prev,\n      nodes: prev.nodes.map(node => ({\n        ...node,\n        isHighlighted: false,\n        isVisited: false,\n        isStart: false,\n        isEnd: false,\n        distance: undefined\n      })),\n      edges: prev.edges.map(edge => ({\n        ...edge,\n        isHighlighted: false,\n        isVisited: false\n      }))\n    }));\n  };\n\n  // Update graph type\n  useEffect(() => {\n    setGraph(prev => ({\n      ...prev,\n      isDirected: graphType === \"directed\" || graphType === \"dag\",\n      isWeighted: graphType === \"weighted\"\n    }));\n  }, [graphType]);\n  const runSelectedAlgorithm = () => {\n    resetAnimation();\n    switch (selectedAlgorithm) {\n      case \"bfs\":\n        runBFS();\n        break;\n      case \"dfs\":\n        runDFS();\n        break;\n      case \"dijkstra\":\n        runDijkstra();\n        break;\n      default:\n        addToHistory(`‚ùå Algorithm ${selectedAlgorithm} not implemented yet`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-white shadow-sm border-b\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg\",\n              children: /*#__PURE__*/_jsxDEV(Network, {\n                className: \"w-6 h-6 text-white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 759,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 758,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\",\n                children: \"Interactive Graph Visualizer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 762,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"mt-1 text-gray-600\",\n                children: \"Explore graph algorithms with step-by-step visualization\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 765,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 761,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowTutorial(!showTutorial),\n              className: \"flex items-center space-x-2 px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(BookOpen, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 773,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Tutorial\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 774,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 769,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowCode(!showCode),\n              className: \"flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(Code, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 780,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Code\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 781,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 754,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8\",\n      children: [showTutorial && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-6 border border-blue-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(Lightbulb, {\n            className: \"w-5 h-5 text-blue-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold text-blue-900\",\n            children: \"Graph Data Structure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-blue-800 mb-4\",\n          children: \"A graph is a collection of vertices (nodes) connected by edges. Graphs can represent networks, relationships, paths, and many real-world problems.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-3 gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-lg p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(Clock, {\n                className: \"w-4 h-4 text-green-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 803,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-semibold text-green-800\",\n                children: \"Complexity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 804,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 802,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-green-700\",\n              children: \"Varies by algorithm: O(V+E) to O(V\\xB3)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 801,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-lg p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(Target, {\n                className: \"w-4 h-4 text-blue-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 810,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-semibold text-blue-800\",\n                children: \"Applications\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 811,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 809,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-blue-700\",\n              children: \"Social networks, GPS navigation, web crawling\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 813,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 808,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-lg p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(Zap, {\n                className: \"w-4 h-4 text-purple-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 817,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-semibold text-purple-800\",\n                children: \"Types\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 818,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 816,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-purple-700\",\n              children: \"Directed, undirected, weighted, unweighted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 815,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 800,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 791,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 lg:grid-cols-2 gap-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900 mb-4\",\n              children: \"Graph Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 830,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid grid-cols-2 gap-3\",\n              children: [\"undirected\", \"directed\", \"weighted\", \"dag\"].map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setGraphType(type),\n                className: `p-3 rounded-xl border-2 transition-all duration-200 text-sm ${graphType === type ? \"border-blue-500 bg-blue-50 text-blue-700\" : \"border-gray-200 hover:border-gray-300 hover:bg-gray-50\"}`,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"font-semibold capitalize\",\n                  children: type === \"dag\" ? \"DAG\" : type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 842,\n                  columnNumber: 21\n                }, this)\n              }, type, false, {\n                fileName: _jsxFileName,\n                lineNumber: 833,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 831,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 829,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900 mb-4\",\n              children: \"Algorithm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 849,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid grid-cols-2 gap-3\",\n              children: [\"bfs\", \"dfs\", \"dijkstra\", \"bellman-ford\"].map(algorithm => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setSelectedAlgorithm(algorithm),\n                className: `p-3 rounded-xl border-2 transition-all duration-200 text-sm ${selectedAlgorithm === algorithm ? \"border-purple-500 bg-purple-50 text-purple-700\" : \"border-gray-200 hover:border-gray-300 hover:bg-gray-50\"}`,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"font-semibold\",\n                  children: algorithmInfo[algorithm].name.split(\" \")[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 861,\n                  columnNumber: 21\n                }, this)\n              }, algorithm, false, {\n                fileName: _jsxFileName,\n                lineNumber: 852,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 850,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 848,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-6 p-4 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"font-semibold text-purple-900 mb-2\",\n            children: algorithmInfo[selectedAlgorithm].name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 870,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-purple-800 text-sm mb-2\",\n            children: algorithmInfo[selectedAlgorithm].description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 871,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-wrap gap-4 text-xs\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-green-700\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Complexity:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 874,\n                columnNumber: 17\n              }, this), \" \", algorithmInfo[selectedAlgorithm].complexity]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 873,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-blue-700\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Use Case:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 877,\n                columnNumber: 17\n              }, this), \" \", algorithmInfo[selectedAlgorithm].useCase]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 876,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 872,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 827,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 lg:grid-cols-4 gap-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-1\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sticky top-8\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900 mb-6\",\n              children: \"Graph Controls\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 887,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4 mb-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"font-semibold text-gray-700 mb-3\",\n                  children: \"Add Node\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 892,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"space-y-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: nodeValue,\n                    onChange: e => setNodeValue(e.target.value),\n                    className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\",\n                    placeholder: \"Node value\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 894,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: addNode,\n                    disabled: !nodeValue,\n                    className: \"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\",\n                    children: [/*#__PURE__*/_jsxDEV(Plus, {\n                      className: \"w-4 h-4\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 906,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Add Node\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 907,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 901,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 893,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 891,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"font-semibold text-gray-700 mb-3\",\n                  children: \"Add Edge\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 913,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"space-y-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: edgeFrom,\n                    onChange: e => setEdgeFrom(e.target.value),\n                    className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\",\n                    placeholder: \"From node\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 915,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: edgeTo,\n                    onChange: e => setEdgeTo(e.target.value),\n                    className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\",\n                    placeholder: \"To node\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 922,\n                    columnNumber: 21\n                  }, this), graph.isWeighted && /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: edgeWeight,\n                    onChange: e => setEdgeWeight(e.target.value),\n                    className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\",\n                    placeholder: \"Weight\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 930,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: addEdge,\n                    disabled: !edgeFrom || !edgeTo,\n                    className: \"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\",\n                    children: [/*#__PURE__*/_jsxDEV(ArrowRight, {\n                      className: \"w-4 h-4\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 943,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Add Edge\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 944,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 938,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 914,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 912,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 890,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4 mb-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"font-semibold text-gray-700 mb-3\",\n                  children: \"Algorithm Parameters\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 953,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"space-y-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: startNode,\n                    onChange: e => setStartNode(e.target.value),\n                    className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\",\n                    placeholder: \"Start node\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 955,\n                    columnNumber: 21\n                  }, this), (selectedAlgorithm === \"dijkstra\" || selectedAlgorithm === \"bellman-ford\") && /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: endNode,\n                    onChange: e => setEndNode(e.target.value),\n                    className: \"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\",\n                    placeholder: \"End node (optional)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 963,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 954,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 952,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: runSelectedAlgorithm,\n                disabled: !startNode || graph.nodes.length === 0,\n                className: \"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\",\n                children: [/*#__PURE__*/_jsxDEV(Search, {\n                  className: \"w-4 h-4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 979,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Run \", algorithmInfo[selectedAlgorithm].name.split(\" \")[0]]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 980,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 974,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 951,\n              columnNumber: 15\n            }, this), algorithmSteps.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4 mb-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"font-semibold text-gray-700 mb-3\",\n                children: \"Animation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 987,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex space-x-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: startAnimation,\n                  disabled: isAnimating && !isPaused,\n                  className: \"flex-1 flex items-center justify-center space-x-1 px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors text-sm\",\n                  children: [/*#__PURE__*/_jsxDEV(Play, {\n                    className: \"w-3 h-3\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 994,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Play\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 995,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 989,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: pauseAnimation,\n                  disabled: !isAnimating,\n                  className: \"flex-1 flex items-center justify-center space-x-1 px-3 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 disabled:opacity-50 transition-colors text-sm\",\n                  children: [/*#__PURE__*/_jsxDEV(Pause, {\n                    className: \"w-3 h-3\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1002,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Pause\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1003,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 997,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: stepForward,\n                  disabled: currentStep >= algorithmSteps.length - 1,\n                  className: \"flex-1 flex items-center justify-center space-x-1 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors text-sm\",\n                  children: [/*#__PURE__*/_jsxDEV(SkipForward, {\n                    className: \"w-3 h-3\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1010,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Step\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1011,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1005,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 988,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: resetAnimation,\n                className: \"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\",\n                children: [/*#__PURE__*/_jsxDEV(RotateCcw, {\n                  className: \"w-4 h-4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1018,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Reset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1019,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1014,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-sm font-medium text-gray-700 mb-2\",\n                  children: [\"Animation Speed: \", animationSpeed, \"ms\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1023,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"range\",\n                  min: \"100\",\n                  max: \"2000\",\n                  step: \"100\",\n                  value: animationSpeed,\n                  onChange: e => setAnimationSpeed(Number(e.target.value)),\n                  className: \"w-full\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1026,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1022,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 986,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: generateRandomGraph,\n                className: \"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors\",\n                children: [/*#__PURE__*/_jsxDEV(Shuffle, {\n                  className: \"w-4 h-4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1045,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Random Graph\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1046,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1041,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: clearGraph,\n                className: \"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\",\n                children: [/*#__PURE__*/_jsxDEV(RotateCcw, {\n                  className: \"w-4 h-4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1052,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Clear Graph\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1053,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1048,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1040,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-6 p-4 bg-gray-50 rounded-lg\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"font-semibold text-gray-700 mb-2\",\n                children: \"Graph Info\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1059,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"space-y-1 text-sm\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-between\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Nodes:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1062,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"font-mono\",\n                    children: graph.nodes.length\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1063,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1061,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-between\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Edges:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1066,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"font-mono\",\n                    children: graph.edges.length\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1067,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1065,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-between\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Type:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1070,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"capitalize\",\n                    children: graphType\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1071,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1069,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-between\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Directed:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1074,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: graph.isDirected ? \"text-green-600\" : \"text-red-600\",\n                    children: graph.isDirected ? \"Yes\" : \"No\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1075,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1073,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-between\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Weighted:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1080,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: graph.isWeighted ? \"text-green-600\" : \"text-red-600\",\n                    children: graph.isWeighted ? \"Yes\" : \"No\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1081,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1079,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1060,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1058,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 886,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 885,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-3 space-y-8\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-between mb-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"text-xl font-bold text-gray-900\",\n                children: \"Graph Visualization\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1095,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center space-x-4 text-sm text-gray-600\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Algorithm: \", algorithmInfo[selectedAlgorithm].name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1097,\n                  columnNumber: 19\n                }, this), algorithmSteps.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Step: \", currentStep + 1, \"/\", algorithmSteps.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1099,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1096,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1094,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-6 min-h-[500px] relative overflow-hidden\",\n              children: graph.nodes.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center justify-center h-96 text-gray-500\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-center\",\n                  children: [/*#__PURE__*/_jsxDEV(Network, {\n                    className: \"w-16 h-16 mx-auto mb-4 opacity-50\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1111,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-lg font-medium mb-2\",\n                    children: \"No graph to display\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1112,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm\",\n                    children: \"Add some nodes and edges to get started!\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1113,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1110,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1109,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(GraphRenderer, {\n                graph: graph,\n                onNodeClick: nodeId => {\n                  // Handle node selection for removal\n                  if (selectedNodes.includes(nodeId)) {\n                    setSelectedNodes(prev => prev.filter(id => id !== nodeId));\n                  } else {\n                    setSelectedNodes(prev => [...prev, nodeId]);\n                  }\n                },\n                selectedNodes: selectedNodes\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1117,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1107,\n              columnNumber: 15\n            }, this), algorithmSteps.length > 0 && currentStep < algorithmSteps.length && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-4 p-4 bg-purple-50 rounded-lg border border-purple-200\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center space-x-2 mb-2\",\n                children: [/*#__PURE__*/_jsxDEV(MapPin, {\n                  className: \"w-4 h-4 text-purple-600\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1136,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-semibold text-purple-800\",\n                  children: [\"Step \", currentStep + 1, \": \", (_algorithmSteps$curre = algorithmSteps[currentStep]) === null || _algorithmSteps$curre === void 0 ? void 0 : (_algorithmSteps$curre2 = _algorithmSteps$curre.type) === null || _algorithmSteps$curre2 === void 0 ? void 0 : _algorithmSteps$curre2.toUpperCase()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1137,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1135,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-purple-700 text-sm\",\n                children: (_algorithmSteps$curre3 = algorithmSteps[currentStep]) === null || _algorithmSteps$curre3 === void 0 ? void 0 : _algorithmSteps$curre3.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1141,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1134,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1093,\n            columnNumber: 13\n          }, this), algorithmResult && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900 mb-4\",\n              children: \"Algorithm Result\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1149,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bg-green-50 rounded-lg p-4 border border-green-200\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center space-x-2 mb-2\",\n                children: [/*#__PURE__*/_jsxDEV(Route, {\n                  className: \"w-4 h-4 text-green-600\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1152,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-semibold text-green-800\",\n                  children: [algorithmInfo[selectedAlgorithm].name, \" Complete\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1153,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1151,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-green-700 text-sm space-y-1\",\n                children: [algorithmResult.distances && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Distances from start node:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1160,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mt-1 font-mono text-xs\",\n                    children: Array.from(algorithmResult.distances.entries()).map(([nodeId, distance]) => {\n                      const node = graph.nodes.find(n => n.id === nodeId);\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [\"Node \", node === null || node === void 0 ? void 0 : node.value, \": \", distance === Number.POSITIVE_INFINITY ? \"‚àû\" : distance]\n                      }, nodeId, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1166,\n                        columnNumber: 33\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1161,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1159,\n                  columnNumber: 23\n                }, this), algorithmResult.visited && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Visited nodes:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1177,\n                    columnNumber: 25\n                  }, this), \" \", algorithmResult.visited.size]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1176,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1157,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1150,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1148,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900 mb-4\",\n              children: \"Operation History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1187,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"max-h-60 overflow-y-auto space-y-2\",\n              children: operationHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-gray-500 italic text-center py-8\",\n                children: \"No operations performed yet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1190,\n                columnNumber: 19\n              }, this) : operationHistory.map((operation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `p-3 rounded-lg text-sm border-l-4 ${operation.includes(\"‚ùå\") ? \"bg-red-50 text-red-700 border-red-400\" : operation.includes(\"‚úÖ\") ? \"bg-green-50 text-green-700 border-green-400\" : operation.includes(\"üîç\") || operation.includes(\"üõ£Ô∏è\") ? \"bg-blue-50 text-blue-700 border-blue-400\" : operation.includes(\"üìç\") ? \"bg-purple-50 text-purple-700 border-purple-400\" : \"bg-gray-50 text-gray-700 border-gray-400\"}`,\n                children: operation\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1193,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1188,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1186,\n            columnNumber: 13\n          }, this), showCode && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-900 mb-4\",\n              children: [algorithmInfo[selectedAlgorithm].name, \" Implementation\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1217,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bg-gray-900 rounded-lg p-4 overflow-x-auto\",\n              children: /*#__PURE__*/_jsxDEV(\"pre\", {\n                className: \"text-green-400 text-sm\",\n                children: /*#__PURE__*/_jsxDEV(\"code\", {\n                  children: getAlgorithmCode(selectedAlgorithm)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1222,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1221,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1220,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1216,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1091,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 752,\n    columnNumber: 5\n  }, this);\n}\n\n// Graph Renderer Component\n_s(GraphVisualizerPage, \"aw86oBVwIelraFqQoYNDCr1P7zU=\");\n_c = GraphVisualizerPage;\nfunction GraphRenderer({\n  graph,\n  onNodeClick,\n  selectedNodes\n}) {\n  _s2();\n  const svgRef = React.useRef(null);\n  const handleNodeClick = nodeId => {\n    onNodeClick(nodeId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    width: \"100%\",\n    height: \"500\",\n    viewBox: \"0 0 800 500\",\n    className: \"border border-gray-200 rounded-lg bg-white\",\n    children: [graph.edges.map(edge => {\n      const fromNode = graph.nodes.find(n => n.id === edge.from);\n      const toNode = graph.nodes.find(n => n.id === edge.to);\n      if (!fromNode || !toNode) return null;\n      const dx = toNode.x - fromNode.x;\n      const dy = toNode.y - fromNode.y;\n      const length = Math.sqrt(dx * dx + dy * dy);\n      const unitX = dx / length;\n      const unitY = dy / length;\n\n      // Adjust line endpoints to not overlap with node circles\n      const nodeRadius = 25;\n      const startX = fromNode.x + unitX * nodeRadius;\n      const startY = fromNode.y + unitY * nodeRadius;\n      const endX = toNode.x - unitX * nodeRadius;\n      const endY = toNode.y - unitY * nodeRadius;\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: startX,\n          y1: startY,\n          x2: endX,\n          y2: endY,\n          stroke: edge.isHighlighted ? \"#f59e0b\" : edge.isVisited ? \"#10b981\" : \"#6b7280\",\n          strokeWidth: edge.isHighlighted ? \"3\" : \"2\",\n          className: \"transition-all duration-300\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1281,\n          columnNumber: 13\n        }, this), graph.isDirected && /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: `${endX},${endY} ${endX - 8 * unitX + 4 * unitY},${endY - 8 * unitY - 4 * unitX} ${endX - 8 * unitX - 4 * unitY},${endY - 8 * unitY + 4 * unitX}`,\n          fill: edge.isHighlighted ? \"#f59e0b\" : edge.isVisited ? \"#10b981\" : \"#6b7280\",\n          className: \"transition-all duration-300\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1293,\n          columnNumber: 15\n        }, this), graph.isWeighted && edge.weight && /*#__PURE__*/_jsxDEV(\"text\", {\n          x: (startX + endX) / 2,\n          y: (startY + endY) / 2 - 5,\n          textAnchor: \"middle\",\n          fill: \"#374151\",\n          fontSize: \"12\",\n          fontWeight: \"bold\",\n          className: \"bg-white\",\n          children: edge.weight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1302,\n          columnNumber: 15\n        }, this)]\n      }, edge.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1279,\n        columnNumber: 11\n      }, this);\n    }), graph.nodes.map(node => /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: node.x,\n        cy: node.y,\n        r: \"25\",\n        fill: node.isStart ? \"#10b981\" : node.isEnd ? \"#ef4444\" : node.isHighlighted ? \"#f59e0b\" : node.isVisited ? \"#8b5cf6\" : selectedNodes.includes(node.id) ? \"#f97316\" : \"#3b82f6\",\n        stroke: selectedNodes.includes(node.id) ? \"#ea580c\" : node.isHighlighted ? \"#d97706\" : \"#1e40af\",\n        strokeWidth: \"2\",\n        className: \"cursor-pointer transition-all duration-300 hover:scale-110\",\n        onClick: () => handleNodeClick(node.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1322,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: node.x,\n        y: node.y + 5,\n        textAnchor: \"middle\",\n        fill: \"white\",\n        fontSize: \"14\",\n        fontWeight: \"bold\",\n        className: \"pointer-events-none\",\n        children: node.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1346,\n        columnNumber: 11\n      }, this), node.distance !== undefined && node.distance !== Number.POSITIVE_INFINITY && /*#__PURE__*/_jsxDEV(\"text\", {\n        x: node.x,\n        y: node.y - 35,\n        textAnchor: \"middle\",\n        fill: \"#374151\",\n        fontSize: \"10\",\n        fontWeight: \"bold\",\n        className: \"bg-white\",\n        children: [\"d: \", node.distance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1360,\n        columnNumber: 13\n      }, this), node.isStart && /*#__PURE__*/_jsxDEV(\"text\", {\n        x: node.x,\n        y: node.y + 45,\n        textAnchor: \"middle\",\n        fill: \"#10b981\",\n        fontSize: \"10\",\n        fontWeight: \"bold\",\n        children: \"START\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1375,\n        columnNumber: 13\n      }, this), node.isEnd && /*#__PURE__*/_jsxDEV(\"text\", {\n        x: node.x,\n        y: node.y + 45,\n        textAnchor: \"middle\",\n        fill: \"#ef4444\",\n        fontSize: \"10\",\n        fontWeight: \"bold\",\n        children: \"END\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1380,\n        columnNumber: 13\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1320,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1251,\n    columnNumber: 5\n  }, this);\n}\n\n// Algorithm code implementations\n_s2(GraphRenderer, \"hBmswj7ndKUg9xiEeqZsAgaPoNM=\");\n_c2 = GraphRenderer;\nfunction getAlgorithmCode(algorithm) {\n  const codes = {\n    bfs: `def bfs(graph, start):\n    \"\"\"Breadth-First Search implementation\"\"\"\n    visited = set()\n    queue = [start]\n    distances = {start: 0}\n    parents = {start: None}\n    \n    while queue:\n        current = queue.pop(0)\n        \n        if current in visited:\n            continue\n            \n        visited.add(current)\n        \n        # Explore neighbors\n        for neighbor in graph[current]:\n            if neighbor not in visited:\n                if neighbor not in distances:\n                    distances[neighbor] = distances[current] + 1\n                    parents[neighbor] = current\n                    queue.append(neighbor)\n    \n    return visited, distances, parents`,\n    dfs: `def dfs(graph, start, visited=None):\n    \"\"\"Depth-First Search implementation\"\"\"\n    if visited is None:\n        visited = set()\n    \n    visited.add(start)\n    print(f\"Visiting: {start}\")\n    \n    # Recursively visit neighbors\n    for neighbor in graph[start]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)\n    \n    return visited\n\ndef dfs_iterative(graph, start):\n    \"\"\"Iterative DFS using stack\"\"\"\n    visited = set()\n    stack = [start]\n    \n    while stack:\n        current = stack.pop()\n        \n        if current not in visited:\n            visited.add(current)\n            print(f\"Visiting: {current}\")\n            \n            # Add neighbors to stack\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    stack.append(neighbor)\n    \n    return visited`,\n    dijkstra: `import heapq\n\ndef dijkstra(graph, start):\n    \"\"\"Dijkstra's shortest path algorithm\"\"\"\n    distances = {node: float('infinity') for node in graph}\n    distances[start] = 0\n    parents = {node: None for node in graph}\n    visited = set()\n    \n    # Priority queue: (distance, node)\n    pq = [(0, start)]\n    \n    while pq:\n        current_distance, current = heapq.heappop(pq)\n        \n        if current in visited:\n            continue\n            \n        visited.add(current)\n        \n        # Update distances to neighbors\n        for neighbor, weight in graph[current].items():\n            distance = current_distance + weight\n            \n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                parents[neighbor] = current\n                heapq.heappush(pq, (distance, neighbor))\n    \n    return distances, parents\n\ndef get_shortest_path(parents, start, end):\n    \"\"\"Reconstruct shortest path\"\"\"\n    path = []\n    current = end\n    \n    while current is not None:\n        path.append(current)\n        current = parents[current]\n    \n    return path[::-1] if path[0] == end else []`,\n    \"bellman-ford\": `def bellman_ford(graph, start):\n    \"\"\"Bellman-Ford algorithm for shortest paths\"\"\"\n    # Initialize distances\n    distances = {node: float('infinity') for node in graph}\n    distances[start] = 0\n    parents = {node: None for node in graph}\n    \n    # Relax edges V-1 times\n    for _ in range(len(graph) - 1):\n        for u in graph:\n            for v, weight in graph[u].items():\n                if distances[u] + weight < distances[v]:\n                    distances[v] = distances[u] + weight\n                    parents[v] = u\n    \n    # Check for negative cycles\n    for u in graph:\n        for v, weight in graph[u].items():\n            if distances[u] + weight < distances[v]:\n                raise ValueError(\"Graph contains negative cycle\")\n    \n    return distances, parents`,\n    kruskal: \"# Kruskal's algorithm implementation not available\",\n    prim: \"# Prim's algorithm implementation not available\",\n    topological: \"# Topological sort implementation not available\",\n    \"floyd-warshall\": \"# Floyd-Warshall algorithm implementation not available\"\n  };\n  return codes[algorithm] || \"# Algorithm implementation not available\";\n}\nexport default GraphVisualizerPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphVisualizerPage\");\n$RefreshReg$(_c2, \"GraphRenderer\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","React","useState","useCallback","useEffect","Network","Plus","Search","RotateCcw","Code","BookOpen","Lightbulb","Target","Clock","Zap","ArrowRight","Shuffle","Play","Pause","SkipForward","MapPin","Route","jsxDEV","_jsxDEV","algorithmInfo","bfs","name","description","complexity","useCase","dfs","dijkstra","kruskal","prim","topological","GraphVisualizerPage","_algorithmSteps$curre","_algorithmSteps$curre2","_algorithmSteps$curre3","graph","setGraph","nodes","edges","isDirected","isWeighted","graphType","setGraphType","selectedAlgorithm","setSelectedAlgorithm","nodeValue","setNodeValue","edgeFrom","setEdgeFrom","edgeTo","setEdgeTo","edgeWeight","setEdgeWeight","startNode","setStartNode","endNode","setEndNode","isAnimating","setIsAnimating","animationSpeed","setAnimationSpeed","currentStep","setCurrentStep","algorithmSteps","setAlgorithmSteps","isPaused","setIsPaused","operationHistory","setOperationHistory","showCode","setShowCode","showTutorial","setShowTutorial","nodeCounter","setNodeCounter","selectedNodes","setSelectedNodes","algorithmResult","setAlgorithmResult","generateNodeId","prev","generateEdgeId","Date","now","Math","random","addToHistory","operation","timestamp","toLocaleTimeString","slice","addNode","isNaN","Number","value","some","node","newNode","id","x","y","isHighlighted","setTimeout","map","addEdge","fromValue","toValue","weight","fromNode","find","toNode","edgeExists","edge","from","to","newEdge","undefined","clearGraph","generateRandomGraph","nodeCount","floor","i","angle","PI","radius","centerX","centerY","push","cos","sin","edgeCount","fromIdx","toIdx","length","runBFS","startValue","startNodeObj","steps","visited","Set","queue","distances","Map","parents","set","type","nodeId","message","currentId","shift","has","add","currentNode","n","neighbors","filter","neighborId","get","neighborNode","runDFS","dfsRecursive","runDijkstra","unvisited","forEach","POSITIVE_INFINITY","size","minDistance","Array","dist","delete","edgeId","neighbor","newDistance","currentDistance","playAnimation","step","_step$visited","_step$distances","isVisited","isStart","distance","_step$visited2","_step$visited3","startAnimation","pauseAnimation","stepForward","_step$visited4","_step$distances2","_step$visited5","_step$visited6","resetAnimation","isEnd","runSelectedAlgorithm","className","children","fileName","lineNumber","columnNumber","onClick","algorithm","split","onChange","e","target","placeholder","disabled","min","max","GraphRenderer","onNodeClick","includes","toUpperCase","entries","index","getAlgorithmCode","_c","svgRef","useRef","handleNodeClick","ref","width","height","viewBox","dx","dy","sqrt","unitX","unitY","nodeRadius","startX","startY","endX","endY","x1","y1","x2","y2","stroke","strokeWidth","points","fill","textAnchor","fontSize","fontWeight","cx","cy","r","_c2","codes","$RefreshReg$"],"sources":["D:/DSA Website/src/pages/GraphVisualizerPages.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport React from \"react\"\r\n\r\nimport { useState, useCallback, useEffect } from \"react\"\r\nimport {\r\n  Network,\r\n  Plus,\r\n  Search,\r\n  RotateCcw,\r\n  Code,\r\n  BookOpen,\r\n  Lightbulb,\r\n  Target,\r\n  Clock,\r\n  Zap,\r\n  ArrowRight,\r\n  Shuffle,\r\n  Play,\r\n  Pause,\r\n  SkipForward,\r\n  MapPin,\r\n  Route,\r\n} from \"lucide-react\"\r\n\r\n// Graph data structures\r\ninterface GraphNode {\r\n  id: string\r\n  value: number\r\n  x: number\r\n  y: number\r\n  isHighlighted?: boolean\r\n  isVisited?: boolean\r\n  isStart?: boolean\r\n  isEnd?: boolean\r\n  distance?: number\r\n  parent?: string | null\r\n  color?: string\r\n  level?: number\r\n}\r\n\r\ninterface GraphEdge {\r\n  id: string\r\n  from: string\r\n  to: string\r\n  weight?: number\r\n  isHighlighted?: boolean\r\n  isVisited?: boolean\r\n  isDirected?: boolean\r\n  color?: string\r\n}\r\n\r\ninterface GraphState {\r\n  nodes: GraphNode[]\r\n  edges: GraphEdge[]\r\n  isDirected: boolean\r\n  isWeighted: boolean\r\n}\r\n\r\ntype GraphType = \"undirected\" | \"directed\" | \"weighted\" | \"dag\"\r\ntype AlgorithmType = \"bfs\" | \"dfs\" | \"dijkstra\" | \"bellman-ford\" | \"kruskal\" | \"prim\" | \"topological\" | \"floyd-warshall\"\r\n\r\nconst algorithmInfo: Record<\r\n  AlgorithmType,\r\n  {\r\n    name: string\r\n    description: string\r\n    complexity: string\r\n    useCase: string\r\n  }\r\n> = {\r\n  bfs: {\r\n    name: \"Breadth-First Search\",\r\n    description: \"Explores nodes level by level, finding shortest path in unweighted graphs.\",\r\n    complexity: \"O(V + E)\",\r\n    useCase: \"Shortest path, level-order traversal, connected components\",\r\n  },\r\n  dfs: {\r\n    name: \"Depth-First Search\",\r\n    description: \"Explores as far as possible along each branch before backtracking.\",\r\n    complexity: \"O(V + E)\",\r\n    useCase: \"Cycle detection, topological sorting, connected components\",\r\n  },\r\n  dijkstra: {\r\n    name: \"Dijkstra's Algorithm\",\r\n    description: \"Finds shortest paths from source to all vertices in weighted graphs.\",\r\n    complexity: \"O((V + E) log V)\",\r\n    useCase: \"GPS navigation, network routing, shortest path problems\",\r\n  },\r\n  \"bellman-ford\": {\r\n    name: \"Bellman-Ford Algorithm\",\r\n    description: \"Finds shortest paths and detects negative cycles.\",\r\n    complexity: \"O(VE)\",\r\n    useCase: \"Graphs with negative weights, currency arbitrage\",\r\n  },\r\n  kruskal: {\r\n    name: \"Kruskal's Algorithm\",\r\n    description: \"Finds minimum spanning tree by sorting edges.\",\r\n    complexity: \"O(E log E)\",\r\n    useCase: \"Network design, clustering, minimum cost connections\",\r\n  },\r\n  prim: {\r\n    name: \"Prim's Algorithm\",\r\n    description: \"Finds minimum spanning tree by growing from a starting vertex.\",\r\n    complexity: \"O(E log V)\",\r\n    useCase: \"Network design, approximation algorithms\",\r\n  },\r\n  topological: {\r\n    name: \"Topological Sort\",\r\n    description: \"Linear ordering of vertices in a directed acyclic graph.\",\r\n    complexity: \"O(V + E)\",\r\n    useCase: \"Task scheduling, dependency resolution, course prerequisites\",\r\n  },\r\n  \"floyd-warshall\": {\r\n    name: \"Floyd-Warshall Algorithm\",\r\n    description: \"Finds shortest paths between all pairs of vertices.\",\r\n    complexity: \"O(V¬≥)\",\r\n    useCase: \"All-pairs shortest paths, transitive closure\",\r\n  },\r\n}\r\n\r\nfunction GraphVisualizerPage() {\r\n  const [graph, setGraph] = useState<GraphState>({\r\n    nodes: [],\r\n    edges: [],\r\n    isDirected: false,\r\n    isWeighted: false,\r\n  })\r\n\r\n  const [graphType, setGraphType] = useState<GraphType>(\"undirected\")\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>(\"bfs\")\r\n  const [nodeValue, setNodeValue] = useState(\"\")\r\n  const [edgeFrom, setEdgeFrom] = useState(\"\")\r\n  const [edgeTo, setEdgeTo] = useState(\"\")\r\n  const [edgeWeight, setEdgeWeight] = useState(\"\")\r\n  const [startNode, setStartNode] = useState(\"\")\r\n  const [endNode, setEndNode] = useState(\"\")\r\n\r\n  // Animation states\r\n  const [isAnimating, setIsAnimating] = useState(false)\r\n  const [animationSpeed, setAnimationSpeed] = useState(500)\r\n  const [currentStep, setCurrentStep] = useState(0)\r\n  const [algorithmSteps, setAlgorithmSteps] = useState<any[]>([])\r\n  const [isPaused, setIsPaused] = useState(false)\r\n\r\n  // UI states\r\n  const [operationHistory, setOperationHistory] = useState<string[]>([])\r\n  const [showCode, setShowCode] = useState(false)\r\n  const [showTutorial, setShowTutorial] = useState(false)\r\n  const [nodeCounter, setNodeCounter] = useState(0)\r\n  const [selectedNodes, setSelectedNodes] = useState<string[]>([])\r\n  const [algorithmResult, setAlgorithmResult] = useState<any>(null)\r\n\r\n  // Helper functions\r\n  const generateNodeId = () => {\r\n    setNodeCounter((prev) => prev + 1)\r\n    return `node-${nodeCounter}`\r\n  }\r\n\r\n  const generateEdgeId = () => `edge-${Date.now()}-${Math.random()}`\r\n\r\n  const addToHistory = (operation: string) => {\r\n    const timestamp = new Date().toLocaleTimeString()\r\n    setOperationHistory((prev) => [`${timestamp}: ${operation}`, ...prev.slice(0, 19)])\r\n  }\r\n\r\n  // Graph operations\r\n  const addNode = () => {\r\n    if (!nodeValue || isNaN(Number(nodeValue))) {\r\n      addToHistory(\"‚ùå Error: Please enter a valid number for node value\")\r\n      return\r\n    }\r\n\r\n    const value = Number(nodeValue)\r\n    if (graph.nodes.some((node) => node.value === value)) {\r\n      addToHistory(\"‚ùå Error: Node with this value already exists\")\r\n      return\r\n    }\r\n\r\n    const newNode: GraphNode = {\r\n      id: generateNodeId(),\r\n      value,\r\n      x: Math.random() * 600 + 100,\r\n      y: Math.random() * 400 + 100,\r\n      isHighlighted: true,\r\n    }\r\n\r\n    setGraph((prev) => ({\r\n      ...prev,\r\n      nodes: [...prev.nodes, newNode],\r\n    }))\r\n\r\n    addToHistory(`‚úÖ Added node with value ${value}`)\r\n    setNodeValue(\"\")\r\n\r\n    // Remove highlight after animation\r\n    setTimeout(() => {\r\n      setGraph((prev) => ({\r\n        ...prev,\r\n        nodes: prev.nodes.map((node) => (node.id === newNode.id ? { ...node, isHighlighted: false } : node)),\r\n      }))\r\n    }, 1000)\r\n  }\r\n\r\n  const addEdge = () => {\r\n    const fromValue = Number(edgeFrom)\r\n    const toValue = Number(edgeTo)\r\n    const weight = edgeWeight ? Number(edgeWeight) : 1\r\n\r\n    if (isNaN(fromValue) || isNaN(toValue)) {\r\n      addToHistory(\"‚ùå Error: Please enter valid node values\")\r\n      return\r\n    }\r\n\r\n    const fromNode = graph.nodes.find((node) => node.value === fromValue)\r\n    const toNode = graph.nodes.find((node) => node.value === toValue)\r\n\r\n    if (!fromNode || !toNode) {\r\n      addToHistory(\"‚ùå Error: One or both nodes don't exist\")\r\n      return\r\n    }\r\n\r\n    if (fromNode.id === toNode.id) {\r\n      addToHistory(\"‚ùå Error: Cannot create self-loop\")\r\n      return\r\n    }\r\n\r\n    // Check if edge already exists\r\n    const edgeExists = graph.edges.some(\r\n      (edge) =>\r\n        (edge.from === fromNode.id && edge.to === toNode.id) ||\r\n        (!graph.isDirected && edge.from === toNode.id && edge.to === fromNode.id),\r\n    )\r\n\r\n    if (edgeExists) {\r\n      addToHistory(\"‚ùå Error: Edge already exists\")\r\n      return\r\n    }\r\n\r\n    const newEdge: GraphEdge = {\r\n      id: generateEdgeId(),\r\n      from: fromNode.id,\r\n      to: toNode.id,\r\n      weight: graph.isWeighted ? weight : undefined,\r\n      isDirected: graph.isDirected,\r\n      isHighlighted: true,\r\n    }\r\n\r\n    setGraph((prev) => ({\r\n      ...prev,\r\n      edges: [...prev.edges, newEdge],\r\n    }))\r\n\r\n    addToHistory(`‚úÖ Added edge from ${fromValue} to ${toValue}${graph.isWeighted ? ` (weight: ${weight})` : \"\"}`)\r\n    setEdgeFrom(\"\")\r\n    setEdgeTo(\"\")\r\n    setEdgeWeight(\"\")\r\n\r\n    // Remove highlight after animation\r\n    setTimeout(() => {\r\n      setGraph((prev) => ({\r\n        ...prev,\r\n        edges: prev.edges.map((edge) => (edge.id === newEdge.id ? { ...edge, isHighlighted: false } : edge)),\r\n      }))\r\n    }, 1000)\r\n  }\r\n\r\n  const clearGraph = () => {\r\n    setGraph({\r\n      nodes: [],\r\n      edges: [],\r\n      isDirected: graphType === \"directed\" || graphType === \"dag\",\r\n      isWeighted: graphType === \"weighted\",\r\n    })\r\n    setAlgorithmSteps([])\r\n    setCurrentStep(0)\r\n    setAlgorithmResult(null)\r\n    addToHistory(\"üóëÔ∏è Graph cleared\")\r\n  }\r\n\r\n  const generateRandomGraph = () => {\r\n    const nodeCount = 6 + Math.floor(Math.random() * 4) // 6-9 nodes\r\n    const nodes: GraphNode[] = []\r\n\r\n    // Create nodes in a circular layout\r\n    for (let i = 0; i < nodeCount; i++) {\r\n      const angle = (2 * Math.PI * i) / nodeCount\r\n      const radius = 150\r\n      const centerX = 400\r\n      const centerY = 250\r\n\r\n      nodes.push({\r\n        id: generateNodeId(),\r\n        value: i + 1,\r\n        x: centerX + radius * Math.cos(angle),\r\n        y: centerY + radius * Math.sin(angle),\r\n      })\r\n    }\r\n\r\n    // Create random edges\r\n    const edges: GraphEdge[] = []\r\n    const edgeCount = Math.floor(nodeCount * 1.5) // Moderate connectivity\r\n\r\n    for (let i = 0; i < edgeCount; i++) {\r\n      const fromIdx = Math.floor(Math.random() * nodeCount)\r\n      let toIdx = Math.floor(Math.random() * nodeCount)\r\n\r\n      // Avoid self-loops\r\n      while (toIdx === fromIdx) {\r\n        toIdx = Math.floor(Math.random() * nodeCount)\r\n      }\r\n\r\n      const from = nodes[fromIdx]\r\n      const to = nodes[toIdx]\r\n\r\n      // Check if edge already exists\r\n      const edgeExists = edges.some(\r\n        (edge) =>\r\n          (edge.from === from.id && edge.to === to.id) ||\r\n          (!graph.isDirected && edge.from === to.id && edge.to === from.id),\r\n      )\r\n\r\n      if (!edgeExists) {\r\n        edges.push({\r\n          id: generateEdgeId(),\r\n          from: from.id,\r\n          to: to.id,\r\n          weight: graph.isWeighted ? Math.floor(Math.random() * 10) + 1 : undefined,\r\n          isDirected: graph.isDirected,\r\n        })\r\n      }\r\n    }\r\n\r\n    setGraph((prev) => ({\r\n      ...prev,\r\n      nodes,\r\n      edges,\r\n    }))\r\n\r\n    addToHistory(`üé≤ Generated random graph with ${nodeCount} nodes and ${edges.length} edges`)\r\n  }\r\n\r\n  // Algorithm implementations\r\n  const runBFS = async () => {\r\n    if (!startNode) {\r\n      addToHistory(\"‚ùå Error: Please select a start node\")\r\n      return\r\n    }\r\n\r\n    const startValue = Number(startNode)\r\n    const startNodeObj = graph.nodes.find((node) => node.value === startValue)\r\n    if (!startNodeObj) {\r\n      addToHistory(\"‚ùå Error: Start node not found\")\r\n      return\r\n    }\r\n\r\n    setIsAnimating(true)\r\n    const steps: any[] = []\r\n    const visited = new Set<string>()\r\n    const queue = [startNodeObj.id]\r\n    const distances = new Map<string, number>()\r\n    const parents = new Map<string, string | null>()\r\n\r\n    distances.set(startNodeObj.id, 0)\r\n    parents.set(startNodeObj.id, null)\r\n\r\n    steps.push({\r\n      type: \"start\",\r\n      nodeId: startNodeObj.id,\r\n      message: `Starting BFS from node ${startValue}`,\r\n      queue: [...queue],\r\n      visited: new Set(visited),\r\n      distances: new Map(distances),\r\n    })\r\n\r\n    while (queue.length > 0) {\r\n      const currentId = queue.shift()!\r\n\r\n      if (visited.has(currentId)) continue\r\n\r\n      visited.add(currentId)\r\n      const currentNode = graph.nodes.find((n) => n.id === currentId)!\r\n\r\n      steps.push({\r\n        type: \"visit\",\r\n        nodeId: currentId,\r\n        message: `Visiting node ${currentNode.value}`,\r\n        queue: [...queue],\r\n        visited: new Set(visited),\r\n        distances: new Map(distances),\r\n      })\r\n\r\n      // Find neighbors\r\n      const neighbors = graph.edges\r\n        .filter((edge) => edge.from === currentId || (!graph.isDirected && edge.to === currentId))\r\n        .map((edge) => (edge.from === currentId ? edge.to : edge.from))\r\n        .filter((neighborId) => !visited.has(neighborId))\r\n\r\n      for (const neighborId of neighbors) {\r\n        if (!distances.has(neighborId)) {\r\n          distances.set(neighborId, distances.get(currentId)! + 1)\r\n          parents.set(neighborId, currentId)\r\n          queue.push(neighborId)\r\n\r\n          const neighborNode = graph.nodes.find((n) => n.id === neighborId)!\r\n          steps.push({\r\n            type: \"discover\",\r\n            nodeId: neighborId,\r\n            edgeFrom: currentId,\r\n            edgeTo: neighborId,\r\n            message: `Discovered node ${neighborNode.value} at distance ${distances.get(neighborId)}`,\r\n            queue: [...queue],\r\n            visited: new Set(visited),\r\n            distances: new Map(distances),\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    steps.push({\r\n      type: \"complete\",\r\n      message: \"BFS traversal complete\",\r\n      visited: new Set(visited),\r\n      distances: new Map(distances),\r\n      parents: new Map(parents),\r\n    })\r\n\r\n    setAlgorithmSteps(steps)\r\n    setCurrentStep(0)\r\n    addToHistory(`üîç Started BFS from node ${startValue}`)\r\n  }\r\n\r\n  const runDFS = async () => {\r\n    if (!startNode) {\r\n      addToHistory(\"‚ùå Error: Please select a start node\")\r\n      return\r\n    }\r\n\r\n    const startValue = Number(startNode)\r\n    const startNodeObj = graph.nodes.find((node) => node.value === startValue)\r\n    if (!startNodeObj) {\r\n      addToHistory(\"‚ùå Error: Start node not found\")\r\n      return\r\n    }\r\n\r\n    setIsAnimating(true)\r\n    const steps: any[] = []\r\n    const visited = new Set<string>()\r\n\r\n    const dfsRecursive = (nodeId: string) => {\r\n      if (visited.has(nodeId)) return\r\n\r\n      visited.add(nodeId)\r\n      const currentNode = graph.nodes.find((n) => n.id === nodeId)!\r\n\r\n      steps.push({\r\n        type: \"visit\",\r\n        nodeId,\r\n        message: `Visiting node ${currentNode.value}`,\r\n        visited: new Set(visited),\r\n      })\r\n\r\n      // Find neighbors\r\n      const neighbors = graph.edges\r\n        .filter((edge) => edge.from === nodeId || (!graph.isDirected && edge.to === nodeId))\r\n        .map((edge) => (edge.from === nodeId ? edge.to : edge.from))\r\n        .filter((neighborId) => !visited.has(neighborId))\r\n\r\n      for (const neighborId of neighbors) {\r\n        const neighborNode = graph.nodes.find((n) => n.id === neighborId)!\r\n        steps.push({\r\n          type: \"discover\",\r\n          nodeId: neighborId,\r\n          edgeFrom: nodeId,\r\n          edgeTo: neighborId,\r\n          message: `Exploring edge to node ${neighborNode.value}`,\r\n          visited: new Set(visited),\r\n        })\r\n\r\n        dfsRecursive(neighborId)\r\n      }\r\n    }\r\n\r\n    steps.push({\r\n      type: \"start\",\r\n      nodeId: startNodeObj.id,\r\n      message: `Starting DFS from node ${startValue}`,\r\n      visited: new Set(),\r\n    })\r\n\r\n    dfsRecursive(startNodeObj.id)\r\n\r\n    steps.push({\r\n      type: \"complete\",\r\n      message: \"DFS traversal complete\",\r\n      visited: new Set(visited),\r\n    })\r\n\r\n    setAlgorithmSteps(steps)\r\n    setCurrentStep(0)\r\n    addToHistory(`üîç Started DFS from node ${startValue}`)\r\n  }\r\n\r\n  const runDijkstra = async () => {\r\n    if (!graph.isWeighted) {\r\n      addToHistory(\"‚ùå Error: Dijkstra's algorithm requires a weighted graph\")\r\n      return\r\n    }\r\n\r\n    if (!startNode) {\r\n      addToHistory(\"‚ùå Error: Please select a start node\")\r\n      return\r\n    }\r\n\r\n    const startValue = Number(startNode)\r\n    const startNodeObj = graph.nodes.find((node) => node.value === startValue)\r\n    if (!startNodeObj) {\r\n      addToHistory(\"‚ùå Error: Start node not found\")\r\n      return\r\n    }\r\n\r\n    setIsAnimating(true)\r\n    const steps: any[] = []\r\n    const distances = new Map<string, number>()\r\n    const parents = new Map<string, string | null>()\r\n    const visited = new Set<string>()\r\n    const unvisited = new Set(graph.nodes.map((n) => n.id))\r\n\r\n    // Initialize distances\r\n    graph.nodes.forEach((node) => {\r\n      distances.set(node.id, node.id === startNodeObj.id ? 0 : Number.POSITIVE_INFINITY)\r\n      parents.set(node.id, null)\r\n    })\r\n\r\n    steps.push({\r\n      type: \"start\",\r\n      nodeId: startNodeObj.id,\r\n      message: `Starting Dijkstra from node ${startValue}`,\r\n      distances: new Map(distances),\r\n      visited: new Set(),\r\n    })\r\n\r\n    while (unvisited.size > 0) {\r\n      // Find unvisited node with minimum distance\r\n      let currentId: string | null = null\r\n      let minDistance = Number.POSITIVE_INFINITY\r\n\r\n      for (const nodeId of Array.from(unvisited)) {\r\n        const dist = distances.get(nodeId)!\r\n        if (dist < minDistance) {\r\n          minDistance = dist\r\n          currentId = nodeId\r\n        }\r\n      }\r\n\r\n      if (!currentId || minDistance === Number.POSITIVE_INFINITY) break\r\n\r\n      unvisited.delete(currentId)\r\n      visited.add(currentId)\r\n\r\n      const currentNode = graph.nodes.find((n) => n.id === currentId)!\r\n      steps.push({\r\n        type: \"visit\",\r\n        nodeId: currentId,\r\n        message: `Visiting node ${currentNode.value} with distance ${minDistance}`,\r\n        distances: new Map(distances),\r\n        visited: new Set(visited),\r\n      })\r\n\r\n      // Update distances to neighbors\r\n      const neighbors = graph.edges\r\n        .filter((edge) => edge.from === currentId || (!graph.isDirected && edge.to === currentId))\r\n        .map((edge) => ({\r\n          id: edge.from === currentId ? edge.to : edge.from,\r\n          weight: edge.weight || 1,\r\n          edgeId: edge.id,\r\n        }))\r\n        .filter((neighbor) => unvisited.has(neighbor.id))\r\n\r\n      for (const neighbor of neighbors) {\r\n        const newDistance = distances.get(currentId)! + neighbor.weight\r\n        const currentDistance = distances.get(neighbor.id)!\r\n\r\n        if (newDistance < currentDistance) {\r\n          distances.set(neighbor.id, newDistance)\r\n          parents.set(neighbor.id, currentId)\r\n\r\n          const neighborNode = graph.nodes.find((n) => n.id === neighbor.id)!\r\n          steps.push({\r\n            type: \"relax\",\r\n            nodeId: neighbor.id,\r\n            edgeFrom: currentId,\r\n            edgeTo: neighbor.id,\r\n            message: `Updated distance to node ${neighborNode.value}: ${newDistance}`,\r\n            distances: new Map(distances),\r\n            visited: new Set(visited),\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    steps.push({\r\n      type: \"complete\",\r\n      message: \"Dijkstra algorithm complete\",\r\n      distances: new Map(distances),\r\n      parents: new Map(parents),\r\n      visited: new Set(visited),\r\n    })\r\n\r\n    setAlgorithmSteps(steps)\r\n    setCurrentStep(0)\r\n    addToHistory(`üõ£Ô∏è Started Dijkstra from node ${startValue}`)\r\n  }\r\n\r\n  // Animation control\r\n  const playAnimation = useCallback(() => {\r\n    if (currentStep >= algorithmSteps.length - 1) {\r\n      setIsAnimating(false)\r\n      return\r\n    }\r\n\r\n    if (isPaused) return\r\n\r\n    const step = algorithmSteps[currentStep]\r\n\r\n    // Apply step to graph visualization\r\n    setGraph((prev) => ({\r\n      ...prev,\r\n      nodes: prev.nodes.map((node) => ({\r\n        ...node,\r\n        isHighlighted: step.nodeId === node.id,\r\n        isVisited: step.visited?.has(node.id) || false,\r\n        isStart: step.type === \"start\" && step.nodeId === node.id,\r\n        distance: step.distances?.get(node.id),\r\n      })),\r\n      edges: prev.edges.map((edge) => ({\r\n        ...edge,\r\n        isHighlighted:\r\n          (step.edgeFrom === edge.from && step.edgeTo === edge.to) ||\r\n          (step.edgeFrom === edge.to && step.edgeTo === edge.from),\r\n        isVisited: step.visited?.has(edge.from) && step.visited?.has(edge.to),\r\n      })),\r\n    }))\r\n\r\n    addToHistory(`üìç Step ${currentStep + 1}: ${step.message}`)\r\n    setCurrentStep((prev) => prev + 1)\r\n\r\n    if (currentStep < algorithmSteps.length - 1) {\r\n      setTimeout(() => playAnimation(), animationSpeed)\r\n    } else {\r\n      setIsAnimating(false)\r\n      setAlgorithmResult(step)\r\n    }\r\n  }, [currentStep, algorithmSteps, isPaused, animationSpeed])\r\n\r\n  useEffect(() => {\r\n    if (isAnimating && !isPaused && algorithmSteps.length > 0) {\r\n      playAnimation()\r\n    }\r\n  }, [isAnimating, isPaused, playAnimation, algorithmSteps.length])\r\n\r\n  const startAnimation = () => {\r\n    if (algorithmSteps.length === 0) return\r\n    setIsAnimating(true)\r\n    setIsPaused(false)\r\n    setCurrentStep(0)\r\n  }\r\n\r\n  const pauseAnimation = () => {\r\n    setIsPaused(!isPaused)\r\n  }\r\n\r\n  const stepForward = () => {\r\n    if (currentStep < algorithmSteps.length - 1) {\r\n      setCurrentStep((prev) => prev + 1)\r\n      const step = algorithmSteps[currentStep + 1]\r\n\r\n      setGraph((prev) => ({\r\n        ...prev,\r\n        nodes: prev.nodes.map((node) => ({\r\n          ...node,\r\n          isHighlighted: step.nodeId === node.id,\r\n          isVisited: step.visited?.has(node.id) || false,\r\n          distance: step.distances?.get(node.id),\r\n        })),\r\n        edges: prev.edges.map((edge) => ({\r\n          ...edge,\r\n          isHighlighted:\r\n            (step.edgeFrom === edge.from && step.edgeTo === edge.to) ||\r\n            (step.edgeFrom === edge.to && step.edgeTo === edge.from),\r\n          isVisited: step.visited?.has(edge.from) && step.visited?.has(edge.to),\r\n        })),\r\n      }))\r\n\r\n      addToHistory(`üìç Step ${currentStep + 2}: ${step.message}`)\r\n    }\r\n  }\r\n\r\n  const resetAnimation = () => {\r\n    setIsAnimating(false)\r\n    setIsPaused(false)\r\n    setCurrentStep(0)\r\n    setAlgorithmResult(null)\r\n\r\n    // Reset graph visualization\r\n    setGraph((prev) => ({\r\n      ...prev,\r\n      nodes: prev.nodes.map((node) => ({\r\n        ...node,\r\n        isHighlighted: false,\r\n        isVisited: false,\r\n        isStart: false,\r\n        isEnd: false,\r\n        distance: undefined,\r\n      })),\r\n      edges: prev.edges.map((edge) => ({\r\n        ...edge,\r\n        isHighlighted: false,\r\n        isVisited: false,\r\n      })),\r\n    }))\r\n  }\r\n\r\n  // Update graph type\r\n  useEffect(() => {\r\n    setGraph((prev) => ({\r\n      ...prev,\r\n      isDirected: graphType === \"directed\" || graphType === \"dag\",\r\n      isWeighted: graphType === \"weighted\",\r\n    }))\r\n  }, [graphType])\r\n\r\n  const runSelectedAlgorithm = () => {\r\n    resetAnimation()\r\n\r\n    switch (selectedAlgorithm) {\r\n      case \"bfs\":\r\n        runBFS()\r\n        break\r\n      case \"dfs\":\r\n        runDFS()\r\n        break\r\n      case \"dijkstra\":\r\n        runDijkstra()\r\n        break\r\n      default:\r\n        addToHistory(`‚ùå Algorithm ${selectedAlgorithm} not implemented yet`)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100\">\r\n      {/* Header */}\r\n      <header className=\"bg-white shadow-sm border-b\">\r\n        <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className=\"p-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg\">\r\n                <Network className=\"w-6 h-6 text-white\" />\r\n              </div>\r\n              <div>\r\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\r\n                  Interactive Graph Visualizer\r\n                </h1>\r\n                <p className=\"mt-1 text-gray-600\">Explore graph algorithms with step-by-step visualization</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <button\r\n                onClick={() => setShowTutorial(!showTutorial)}\r\n                className=\"flex items-center space-x-2 px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors\"\r\n              >\r\n                <BookOpen className=\"w-4 h-4\" />\r\n                <span>Tutorial</span>\r\n              </button>\r\n              <button\r\n                onClick={() => setShowCode(!showCode)}\r\n                className=\"flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors\"\r\n              >\r\n                <Code className=\"w-4 h-4\" />\r\n                <span>Code</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8\">\r\n        {/* Tutorial Panel */}\r\n        {showTutorial && (\r\n          <div className=\"mb-8 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-6 border border-blue-200\">\r\n            <div className=\"flex items-center space-x-2 mb-4\">\r\n              <Lightbulb className=\"w-5 h-5 text-blue-600\" />\r\n              <h2 className=\"text-xl font-bold text-blue-900\">Graph Data Structure</h2>\r\n            </div>\r\n            <p className=\"text-blue-800 mb-4\">\r\n              A graph is a collection of vertices (nodes) connected by edges. Graphs can represent networks,\r\n              relationships, paths, and many real-world problems.\r\n            </p>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div className=\"bg-white rounded-lg p-4\">\r\n                <div className=\"flex items-center space-x-2 mb-2\">\r\n                  <Clock className=\"w-4 h-4 text-green-600\" />\r\n                  <span className=\"font-semibold text-green-800\">Complexity</span>\r\n                </div>\r\n                <p className=\"text-sm text-green-700\">Varies by algorithm: O(V+E) to O(V¬≥)</p>\r\n              </div>\r\n              <div className=\"bg-white rounded-lg p-4\">\r\n                <div className=\"flex items-center space-x-2 mb-2\">\r\n                  <Target className=\"w-4 h-4 text-blue-600\" />\r\n                  <span className=\"font-semibold text-blue-800\">Applications</span>\r\n                </div>\r\n                <p className=\"text-sm text-blue-700\">Social networks, GPS navigation, web crawling</p>\r\n              </div>\r\n              <div className=\"bg-white rounded-lg p-4\">\r\n                <div className=\"flex items-center space-x-2 mb-2\">\r\n                  <Zap className=\"w-4 h-4 text-purple-600\" />\r\n                  <span className=\"font-semibold text-purple-800\">Types</span>\r\n                </div>\r\n                <p className=\"text-sm text-purple-700\">Directed, undirected, weighted, unweighted</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Graph Type and Algorithm Selector */}\r\n        <div className=\"mb-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <div>\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Graph Type</h2>\r\n              <div className=\"grid grid-cols-2 gap-3\">\r\n                {([\"undirected\", \"directed\", \"weighted\", \"dag\"] as GraphType[]).map((type) => (\r\n                  <button\r\n                    key={type}\r\n                    onClick={() => setGraphType(type)}\r\n                    className={`p-3 rounded-xl border-2 transition-all duration-200 text-sm ${\r\n                      graphType === type\r\n                        ? \"border-blue-500 bg-blue-50 text-blue-700\"\r\n                        : \"border-gray-200 hover:border-gray-300 hover:bg-gray-50\"\r\n                    }`}\r\n                  >\r\n                    <div className=\"font-semibold capitalize\">{type === \"dag\" ? \"DAG\" : type}</div>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Algorithm</h2>\r\n              <div className=\"grid grid-cols-2 gap-3\">\r\n                {([\"bfs\", \"dfs\", \"dijkstra\", \"bellman-ford\"] as AlgorithmType[]).map((algorithm) => (\r\n                  <button\r\n                    key={algorithm}\r\n                    onClick={() => setSelectedAlgorithm(algorithm)}\r\n                    className={`p-3 rounded-xl border-2 transition-all duration-200 text-sm ${\r\n                      selectedAlgorithm === algorithm\r\n                        ? \"border-purple-500 bg-purple-50 text-purple-700\"\r\n                        : \"border-gray-200 hover:border-gray-300 hover:bg-gray-50\"\r\n                    }`}\r\n                  >\r\n                    <div className=\"font-semibold\">{algorithmInfo[algorithm].name.split(\" \")[0]}</div>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Algorithm Info */}\r\n          <div className=\"mt-6 p-4 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg\">\r\n            <h3 className=\"font-semibold text-purple-900 mb-2\">{algorithmInfo[selectedAlgorithm].name}</h3>\r\n            <p className=\"text-purple-800 text-sm mb-2\">{algorithmInfo[selectedAlgorithm].description}</p>\r\n            <div className=\"flex flex-wrap gap-4 text-xs\">\r\n              <span className=\"text-green-700\">\r\n                <strong>Complexity:</strong> {algorithmInfo[selectedAlgorithm].complexity}\r\n              </span>\r\n              <span className=\"text-blue-700\">\r\n                <strong>Use Case:</strong> {algorithmInfo[selectedAlgorithm].useCase}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\r\n          {/* Controls Panel */}\r\n          <div className=\"lg:col-span-1\">\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sticky top-8\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-6\">Graph Controls</h2>\r\n\r\n              {/* Node Operations */}\r\n              <div className=\"space-y-4 mb-6\">\r\n                <div>\r\n                  <h3 className=\"font-semibold text-gray-700 mb-3\">Add Node</h3>\r\n                  <div className=\"space-y-2\">\r\n                    <input\r\n                      type=\"number\"\r\n                      value={nodeValue}\r\n                      onChange={(e) => setNodeValue(e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                      placeholder=\"Node value\"\r\n                    />\r\n                    <button\r\n                      onClick={addNode}\r\n                      disabled={!nodeValue}\r\n                      className=\"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                    >\r\n                      <Plus className=\"w-4 h-4\" />\r\n                      <span>Add Node</span>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <h3 className=\"font-semibold text-gray-700 mb-3\">Add Edge</h3>\r\n                  <div className=\"space-y-2\">\r\n                    <input\r\n                      type=\"number\"\r\n                      value={edgeFrom}\r\n                      onChange={(e) => setEdgeFrom(e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                      placeholder=\"From node\"\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      value={edgeTo}\r\n                      onChange={(e) => setEdgeTo(e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                      placeholder=\"To node\"\r\n                    />\r\n                    {graph.isWeighted && (\r\n                      <input\r\n                        type=\"number\"\r\n                        value={edgeWeight}\r\n                        onChange={(e) => setEdgeWeight(e.target.value)}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                        placeholder=\"Weight\"\r\n                      />\r\n                    )}\r\n                    <button\r\n                      onClick={addEdge}\r\n                      disabled={!edgeFrom || !edgeTo}\r\n                      className=\"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                    >\r\n                      <ArrowRight className=\"w-4 h-4\" />\r\n                      <span>Add Edge</span>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Algorithm Controls */}\r\n              <div className=\"space-y-4 mb-6\">\r\n                <div>\r\n                  <h3 className=\"font-semibold text-gray-700 mb-3\">Algorithm Parameters</h3>\r\n                  <div className=\"space-y-2\">\r\n                    <input\r\n                      type=\"number\"\r\n                      value={startNode}\r\n                      onChange={(e) => setStartNode(e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\r\n                      placeholder=\"Start node\"\r\n                    />\r\n                    {(selectedAlgorithm === \"dijkstra\" || selectedAlgorithm === \"bellman-ford\") && (\r\n                      <input\r\n                        type=\"number\"\r\n                        value={endNode}\r\n                        onChange={(e) => setEndNode(e.target.value)}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\r\n                        placeholder=\"End node (optional)\"\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                <button\r\n                  onClick={runSelectedAlgorithm}\r\n                  disabled={!startNode || graph.nodes.length === 0}\r\n                  className=\"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                >\r\n                  <Search className=\"w-4 h-4\" />\r\n                  <span>Run {algorithmInfo[selectedAlgorithm].name.split(\" \")[0]}</span>\r\n                </button>\r\n              </div>\r\n\r\n              {/* Animation Controls */}\r\n              {algorithmSteps.length > 0 && (\r\n                <div className=\"space-y-4 mb-6\">\r\n                  <h3 className=\"font-semibold text-gray-700 mb-3\">Animation</h3>\r\n                  <div className=\"flex space-x-2\">\r\n                    <button\r\n                      onClick={startAnimation}\r\n                      disabled={isAnimating && !isPaused}\r\n                      className=\"flex-1 flex items-center justify-center space-x-1 px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors text-sm\"\r\n                    >\r\n                      <Play className=\"w-3 h-3\" />\r\n                      <span>Play</span>\r\n                    </button>\r\n                    <button\r\n                      onClick={pauseAnimation}\r\n                      disabled={!isAnimating}\r\n                      className=\"flex-1 flex items-center justify-center space-x-1 px-3 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 disabled:opacity-50 transition-colors text-sm\"\r\n                    >\r\n                      <Pause className=\"w-3 h-3\" />\r\n                      <span>Pause</span>\r\n                    </button>\r\n                    <button\r\n                      onClick={stepForward}\r\n                      disabled={currentStep >= algorithmSteps.length - 1}\r\n                      className=\"flex-1 flex items-center justify-center space-x-1 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors text-sm\"\r\n                    >\r\n                      <SkipForward className=\"w-3 h-3\" />\r\n                      <span>Step</span>\r\n                    </button>\r\n                  </div>\r\n                  <button\r\n                    onClick={resetAnimation}\r\n                    className=\"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\r\n                  >\r\n                    <RotateCcw className=\"w-4 h-4\" />\r\n                    <span>Reset</span>\r\n                  </button>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Animation Speed: {animationSpeed}ms\r\n                    </label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"100\"\r\n                      max=\"2000\"\r\n                      step=\"100\"\r\n                      value={animationSpeed}\r\n                      onChange={(e) => setAnimationSpeed(Number(e.target.value))}\r\n                      className=\"w-full\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Utility Buttons */}\r\n              <div className=\"space-y-2\">\r\n                <button\r\n                  onClick={generateRandomGraph}\r\n                  className=\"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors\"\r\n                >\r\n                  <Shuffle className=\"w-4 h-4\" />\r\n                  <span>Random Graph</span>\r\n                </button>\r\n                <button\r\n                  onClick={clearGraph}\r\n                  className=\"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\r\n                >\r\n                  <RotateCcw className=\"w-4 h-4\" />\r\n                  <span>Clear Graph</span>\r\n                </button>\r\n              </div>\r\n\r\n              {/* Graph Info */}\r\n              <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\r\n                <h4 className=\"font-semibold text-gray-700 mb-2\">Graph Info</h4>\r\n                <div className=\"space-y-1 text-sm\">\r\n                  <div className=\"flex justify-between\">\r\n                    <span>Nodes:</span>\r\n                    <span className=\"font-mono\">{graph.nodes.length}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span>Edges:</span>\r\n                    <span className=\"font-mono\">{graph.edges.length}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span>Type:</span>\r\n                    <span className=\"capitalize\">{graphType}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span>Directed:</span>\r\n                    <span className={graph.isDirected ? \"text-green-600\" : \"text-red-600\"}>\r\n                      {graph.isDirected ? \"Yes\" : \"No\"}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span>Weighted:</span>\r\n                    <span className={graph.isWeighted ? \"text-green-600\" : \"text-red-600\"}>\r\n                      {graph.isWeighted ? \"Yes\" : \"No\"}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Visualization Panel */}\r\n          <div className=\"lg:col-span-3 space-y-8\">\r\n            {/* Graph Visualization */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <div className=\"flex items-center justify-between mb-6\">\r\n                <h2 className=\"text-xl font-bold text-gray-900\">Graph Visualization</h2>\r\n                <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\r\n                  <span>Algorithm: {algorithmInfo[selectedAlgorithm].name}</span>\r\n                  {algorithmSteps.length > 0 && (\r\n                    <span>\r\n                      Step: {currentStep + 1}/{algorithmSteps.length}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Graph Canvas */}\r\n              <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-6 min-h-[500px] relative overflow-hidden\">\r\n                {graph.nodes.length === 0 ? (\r\n                  <div className=\"flex items-center justify-center h-96 text-gray-500\">\r\n                    <div className=\"text-center\">\r\n                      <Network className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\r\n                      <p className=\"text-lg font-medium mb-2\">No graph to display</p>\r\n                      <p className=\"text-sm\">Add some nodes and edges to get started!</p>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <GraphRenderer\r\n                    graph={graph}\r\n                    onNodeClick={(nodeId) => {\r\n                      // Handle node selection for removal\r\n                      if (selectedNodes.includes(nodeId)) {\r\n                        setSelectedNodes((prev) => prev.filter((id) => id !== nodeId))\r\n                      } else {\r\n                        setSelectedNodes((prev) => [...prev, nodeId])\r\n                      }\r\n                    }}\r\n                    selectedNodes={selectedNodes}\r\n                  />\r\n                )}\r\n              </div>\r\n\r\n              {/* Current Step Info */}\r\n              {algorithmSteps.length > 0 && currentStep < algorithmSteps.length && (\r\n                <div className=\"mt-4 p-4 bg-purple-50 rounded-lg border border-purple-200\">\r\n                  <div className=\"flex items-center space-x-2 mb-2\">\r\n                    <MapPin className=\"w-4 h-4 text-purple-600\" />\r\n                    <span className=\"font-semibold text-purple-800\">\r\n                      Step {currentStep + 1}: {algorithmSteps[currentStep]?.type?.toUpperCase()}\r\n                    </span>\r\n                  </div>\r\n                  <p className=\"text-purple-700 text-sm\">{algorithmSteps[currentStep]?.message}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Algorithm Result */}\r\n            {algorithmResult && (\r\n              <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n                <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Algorithm Result</h2>\r\n                <div className=\"bg-green-50 rounded-lg p-4 border border-green-200\">\r\n                  <div className=\"flex items-center space-x-2 mb-2\">\r\n                    <Route className=\"w-4 h-4 text-green-600\" />\r\n                    <span className=\"font-semibold text-green-800\">\r\n                      {algorithmInfo[selectedAlgorithm].name} Complete\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"text-green-700 text-sm space-y-1\">\r\n                    {algorithmResult.distances && (\r\n                      <div>\r\n                        <strong>Distances from start node:</strong>\r\n                        <div className=\"mt-1 font-mono text-xs\">\r\n                          {Array.from(algorithmResult.distances.entries() as IterableIterator<[string, number]>).map(\r\n                            ([nodeId, distance]: [string, number]) => {\r\n                              const node = graph.nodes.find((n) => n.id === nodeId)\r\n                              return (\r\n                                <div key={nodeId}>\r\n                                  Node {node?.value}: {distance === Number.POSITIVE_INFINITY ? \"‚àû\" : distance}\r\n                                </div>\r\n                              )\r\n                            },\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    {algorithmResult.visited && (\r\n                      <div>\r\n                        <strong>Visited nodes:</strong> {algorithmResult.visited.size}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Operation History */}\r\n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Operation History</h2>\r\n              <div className=\"max-h-60 overflow-y-auto space-y-2\">\r\n                {operationHistory.length === 0 ? (\r\n                  <p className=\"text-gray-500 italic text-center py-8\">No operations performed yet</p>\r\n                ) : (\r\n                  operationHistory.map((operation, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={`p-3 rounded-lg text-sm border-l-4 ${\r\n                        operation.includes(\"‚ùå\")\r\n                          ? \"bg-red-50 text-red-700 border-red-400\"\r\n                          : operation.includes(\"‚úÖ\")\r\n                            ? \"bg-green-50 text-green-700 border-green-400\"\r\n                            : operation.includes(\"üîç\") || operation.includes(\"üõ£Ô∏è\")\r\n                              ? \"bg-blue-50 text-blue-700 border-blue-400\"\r\n                              : operation.includes(\"üìç\")\r\n                                ? \"bg-purple-50 text-purple-700 border-purple-400\"\r\n                                : \"bg-gray-50 text-gray-700 border-gray-400\"\r\n                      }`}\r\n                    >\r\n                      {operation}\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Code Implementation */}\r\n            {showCode && (\r\n              <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-6\">\r\n                <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\r\n                  {algorithmInfo[selectedAlgorithm].name} Implementation\r\n                </h2>\r\n                <div className=\"bg-gray-900 rounded-lg p-4 overflow-x-auto\">\r\n                  <pre className=\"text-green-400 text-sm\">\r\n                    <code>{getAlgorithmCode(selectedAlgorithm)}</code>\r\n                  </pre>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Graph Renderer Component\r\nfunction GraphRenderer({\r\n  graph,\r\n  onNodeClick,\r\n  selectedNodes,\r\n}: {\r\n  graph: GraphState\r\n  onNodeClick: (nodeId: string) => void\r\n  selectedNodes: string[]\r\n}) {\r\n  const svgRef = React.useRef<SVGSVGElement>(null)\r\n\r\n  const handleNodeClick = (nodeId: string) => {\r\n    onNodeClick(nodeId)\r\n  }\r\n\r\n  return (\r\n    <svg\r\n      ref={svgRef}\r\n      width=\"100%\"\r\n      height=\"500\"\r\n      viewBox=\"0 0 800 500\"\r\n      className=\"border border-gray-200 rounded-lg bg-white\"\r\n    >\r\n      {/* Render edges first (so they appear behind nodes) */}\r\n      {graph.edges.map((edge) => {\r\n        const fromNode = graph.nodes.find((n) => n.id === edge.from)\r\n        const toNode = graph.nodes.find((n) => n.id === edge.to)\r\n\r\n        if (!fromNode || !toNode) return null\r\n\r\n        const dx = toNode.x - fromNode.x\r\n        const dy = toNode.y - fromNode.y\r\n        const length = Math.sqrt(dx * dx + dy * dy)\r\n        const unitX = dx / length\r\n        const unitY = dy / length\r\n\r\n        // Adjust line endpoints to not overlap with node circles\r\n        const nodeRadius = 25\r\n        const startX = fromNode.x + unitX * nodeRadius\r\n        const startY = fromNode.y + unitY * nodeRadius\r\n        const endX = toNode.x - unitX * nodeRadius\r\n        const endY = toNode.y - unitY * nodeRadius\r\n\r\n        return (\r\n          <g key={edge.id}>\r\n            {/* Edge line */}\r\n            <line\r\n              x1={startX}\r\n              y1={startY}\r\n              x2={endX}\r\n              y2={endY}\r\n              stroke={edge.isHighlighted ? \"#f59e0b\" : edge.isVisited ? \"#10b981\" : \"#6b7280\"}\r\n              strokeWidth={edge.isHighlighted ? \"3\" : \"2\"}\r\n              className=\"transition-all duration-300\"\r\n            />\r\n\r\n            {/* Arrow for directed graphs */}\r\n            {graph.isDirected && (\r\n              <polygon\r\n                points={`${endX},${endY} ${endX - 8 * unitX + 4 * unitY},${endY - 8 * unitY - 4 * unitX} ${endX - 8 * unitX - 4 * unitY},${endY - 8 * unitY + 4 * unitX}`}\r\n                fill={edge.isHighlighted ? \"#f59e0b\" : edge.isVisited ? \"#10b981\" : \"#6b7280\"}\r\n                className=\"transition-all duration-300\"\r\n              />\r\n            )}\r\n\r\n            {/* Edge weight */}\r\n            {graph.isWeighted && edge.weight && (\r\n              <text\r\n                x={(startX + endX) / 2}\r\n                y={(startY + endY) / 2 - 5}\r\n                textAnchor=\"middle\"\r\n                fill=\"#374151\"\r\n                fontSize=\"12\"\r\n                fontWeight=\"bold\"\r\n                className=\"bg-white\"\r\n              >\r\n                {edge.weight}\r\n              </text>\r\n            )}\r\n          </g>\r\n        )\r\n      })}\r\n\r\n      {/* Render nodes */}\r\n      {graph.nodes.map((node) => (\r\n        <g key={node.id}>\r\n          {/* Node circle */}\r\n          <circle\r\n            cx={node.x}\r\n            cy={node.y}\r\n            r=\"25\"\r\n            fill={\r\n              node.isStart\r\n                ? \"#10b981\"\r\n                : node.isEnd\r\n                  ? \"#ef4444\"\r\n                  : node.isHighlighted\r\n                    ? \"#f59e0b\"\r\n                    : node.isVisited\r\n                      ? \"#8b5cf6\"\r\n                      : selectedNodes.includes(node.id)\r\n                        ? \"#f97316\"\r\n                        : \"#3b82f6\"\r\n            }\r\n            stroke={selectedNodes.includes(node.id) ? \"#ea580c\" : node.isHighlighted ? \"#d97706\" : \"#1e40af\"}\r\n            strokeWidth=\"2\"\r\n            className=\"cursor-pointer transition-all duration-300 hover:scale-110\"\r\n            onClick={() => handleNodeClick(node.id)}\r\n          />\r\n\r\n          {/* Node value */}\r\n          <text\r\n            x={node.x}\r\n            y={node.y + 5}\r\n            textAnchor=\"middle\"\r\n            fill=\"white\"\r\n            fontSize=\"14\"\r\n            fontWeight=\"bold\"\r\n            className=\"pointer-events-none\"\r\n          >\r\n            {node.value}\r\n          </text>\r\n\r\n          {/* Distance label for shortest path algorithms */}\r\n          {node.distance !== undefined && node.distance !== Number.POSITIVE_INFINITY && (\r\n            <text\r\n              x={node.x}\r\n              y={node.y - 35}\r\n              textAnchor=\"middle\"\r\n              fill=\"#374151\"\r\n              fontSize=\"10\"\r\n              fontWeight=\"bold\"\r\n              className=\"bg-white\"\r\n            >\r\n              d: {node.distance}\r\n            </text>\r\n          )}\r\n\r\n          {/* Start/End labels */}\r\n          {node.isStart && (\r\n            <text x={node.x} y={node.y + 45} textAnchor=\"middle\" fill=\"#10b981\" fontSize=\"10\" fontWeight=\"bold\">\r\n              START\r\n            </text>\r\n          )}\r\n          {node.isEnd && (\r\n            <text x={node.x} y={node.y + 45} textAnchor=\"middle\" fill=\"#ef4444\" fontSize=\"10\" fontWeight=\"bold\">\r\n              END\r\n            </text>\r\n          )}\r\n        </g>\r\n      ))}\r\n    </svg>\r\n  )\r\n}\r\n\r\n// Algorithm code implementations\r\nfunction getAlgorithmCode(algorithm: AlgorithmType): string {\r\n  const codes: Record<AlgorithmType, string> = {\r\n    bfs: `def bfs(graph, start):\r\n    \"\"\"Breadth-First Search implementation\"\"\"\r\n    visited = set()\r\n    queue = [start]\r\n    distances = {start: 0}\r\n    parents = {start: None}\r\n    \r\n    while queue:\r\n        current = queue.pop(0)\r\n        \r\n        if current in visited:\r\n            continue\r\n            \r\n        visited.add(current)\r\n        \r\n        # Explore neighbors\r\n        for neighbor in graph[current]:\r\n            if neighbor not in visited:\r\n                if neighbor not in distances:\r\n                    distances[neighbor] = distances[current] + 1\r\n                    parents[neighbor] = current\r\n                    queue.append(neighbor)\r\n    \r\n    return visited, distances, parents`,\r\n\r\n    dfs: `def dfs(graph, start, visited=None):\r\n    \"\"\"Depth-First Search implementation\"\"\"\r\n    if visited is None:\r\n        visited = set()\r\n    \r\n    visited.add(start)\r\n    print(f\"Visiting: {start}\")\r\n    \r\n    # Recursively visit neighbors\r\n    for neighbor in graph[start]:\r\n        if neighbor not in visited:\r\n            dfs(graph, neighbor, visited)\r\n    \r\n    return visited\r\n\r\ndef dfs_iterative(graph, start):\r\n    \"\"\"Iterative DFS using stack\"\"\"\r\n    visited = set()\r\n    stack = [start]\r\n    \r\n    while stack:\r\n        current = stack.pop()\r\n        \r\n        if current not in visited:\r\n            visited.add(current)\r\n            print(f\"Visiting: {current}\")\r\n            \r\n            # Add neighbors to stack\r\n            for neighbor in graph[current]:\r\n                if neighbor not in visited:\r\n                    stack.append(neighbor)\r\n    \r\n    return visited`,\r\n\r\n    dijkstra: `import heapq\r\n\r\ndef dijkstra(graph, start):\r\n    \"\"\"Dijkstra's shortest path algorithm\"\"\"\r\n    distances = {node: float('infinity') for node in graph}\r\n    distances[start] = 0\r\n    parents = {node: None for node in graph}\r\n    visited = set()\r\n    \r\n    # Priority queue: (distance, node)\r\n    pq = [(0, start)]\r\n    \r\n    while pq:\r\n        current_distance, current = heapq.heappop(pq)\r\n        \r\n        if current in visited:\r\n            continue\r\n            \r\n        visited.add(current)\r\n        \r\n        # Update distances to neighbors\r\n        for neighbor, weight in graph[current].items():\r\n            distance = current_distance + weight\r\n            \r\n            if distance < distances[neighbor]:\r\n                distances[neighbor] = distance\r\n                parents[neighbor] = current\r\n                heapq.heappush(pq, (distance, neighbor))\r\n    \r\n    return distances, parents\r\n\r\ndef get_shortest_path(parents, start, end):\r\n    \"\"\"Reconstruct shortest path\"\"\"\r\n    path = []\r\n    current = end\r\n    \r\n    while current is not None:\r\n        path.append(current)\r\n        current = parents[current]\r\n    \r\n    return path[::-1] if path[0] == end else []`,\r\n\r\n    \"bellman-ford\": `def bellman_ford(graph, start):\r\n    \"\"\"Bellman-Ford algorithm for shortest paths\"\"\"\r\n    # Initialize distances\r\n    distances = {node: float('infinity') for node in graph}\r\n    distances[start] = 0\r\n    parents = {node: None for node in graph}\r\n    \r\n    # Relax edges V-1 times\r\n    for _ in range(len(graph) - 1):\r\n        for u in graph:\r\n            for v, weight in graph[u].items():\r\n                if distances[u] + weight < distances[v]:\r\n                    distances[v] = distances[u] + weight\r\n                    parents[v] = u\r\n    \r\n    # Check for negative cycles\r\n    for u in graph:\r\n        for v, weight in graph[u].items():\r\n            if distances[u] + weight < distances[v]:\r\n                raise ValueError(\"Graph contains negative cycle\")\r\n    \r\n    return distances, parents`,\r\n    kruskal: \"# Kruskal's algorithm implementation not available\",\r\n    prim: \"# Prim's algorithm implementation not available\",\r\n    topological: \"# Topological sort implementation not available\",\r\n    \"floyd-warshall\": \"# Floyd-Warshall algorithm implementation not available\",\r\n  }\r\n\r\n  return codes[algorithm] || \"# Algorithm implementation not available\"\r\n}\r\n\r\nexport default GraphVisualizerPage\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}